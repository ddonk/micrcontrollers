
EindOpdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000b9a  00000c2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800180  00800180  00000cae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f6  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3d  00000000  00000000  0000224a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a44  00000000  00000000  00002f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  000039cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075a  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000769  00000000  00000000  000043fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004b63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3a c2       	rjmp	.+1140   	; 0x4a6 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 38       	cpi	r26, 0x80	; 128
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e8       	ldi	r26, 0x80	; 128
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 38       	cpi	r26, 0x8B	; 139
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	76 d2       	rcall	.+1260   	; 0x5b0 <main>
  c4:	68 c5       	rjmp	.+2768   	; 0xb96 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <time>:
  c8:	fc 01       	movw	r30, r24
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <__system_time>
  d2:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <__system_time+0x1>
  d6:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <__system_time+0x2>
  da:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <__system_time+0x3>
  de:	0f be       	out	0x3f, r0	; 63
  e0:	30 97       	sbiw	r30, 0x00	; 0
  e2:	21 f0       	breq	.+8      	; 0xec <time+0x24>
  e4:	60 83       	st	Z, r22
  e6:	71 83       	std	Z+1, r23	; 0x01
  e8:	82 83       	std	Z+2, r24	; 0x02
  ea:	93 83       	std	Z+3, r25	; 0x03
  ec:	08 95       	ret

000000ee <switch_channel>:
}

// This function changes the channel of the accelerometer.
static void switch_channel(){
	static int channel = -1;
	if (channel == -1){
  ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channel.1627>
  f2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channel.1627+0x1>
  f6:	8f 3f       	cpi	r24, 0xFF	; 255
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	92 07       	cpc	r25, r18
  fc:	39 f4       	brne	.+14     	; 0x10c <switch_channel+0x1e>
		channel = 3;
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
 106:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
 10a:	0d c0       	rjmp	.+26     	; 0x126 <switch_channel+0x38>
		} else {
		channel++;
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
 112:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
		if (channel > 5){
 116:	06 97       	sbiw	r24, 0x06	; 6
 118:	34 f0       	brlt	.+12     	; 0x126 <switch_channel+0x38>
			channel = 3;
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
 122:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
		}
	}
	// Clearing
	int temporary =  0b11000000;
	temporary |= channel;
 126:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channel.1627>
 12a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channel.1627+0x1>
 12e:	80 6c       	ori	r24, 0xC0	; 192
	
	// Adding
	ADMUX = temporary;
 130:	87 b9       	out	0x07, r24	; 7
 132:	08 95       	ret

00000134 <translate_to_geforce>:
}

// This function translates raw data to geforce.
// Still needs some work.
static int translate_to_geforce(int raw){
	float fraction =  ((float)raw - (1170.0 / 2.0)) / 1170.0;
 134:	bc 01       	movw	r22, r24
 136:	99 0f       	add	r25, r25
 138:	88 0b       	sbc	r24, r24
 13a:	99 0b       	sbc	r25, r25
 13c:	3c d3       	rcall	.+1656   	; 0x7b6 <__floatsisf>
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e4       	ldi	r19, 0x40	; 64
 142:	42 e1       	ldi	r20, 0x12	; 18
 144:	54 e4       	ldi	r21, 0x44	; 68
 146:	37 d2       	rcall	.+1134   	; 0x5b6 <__subsf3>
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e4       	ldi	r19, 0x40	; 64
 14c:	42 e9       	ldi	r20, 0x92	; 146
 14e:	54 e4       	ldi	r21, 0x44	; 68
 150:	97 d2       	rcall	.+1326   	; 0x680 <__divsf3>
	float scaled = fraction * 30000.0;
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e6       	ldi	r19, 0x60	; 96
 156:	4a ee       	ldi	r20, 0xEA	; 234
 158:	56 e4       	ldi	r21, 0x46	; 70
	return (int) scaled;
 15a:	bd d3       	rcall	.+1914   	; 0x8d6 <__mulsf3>
 15c:	f9 d2       	rcall	.+1522   	; 0x750 <__fixsfsi>
}
 15e:	cb 01       	movw	r24, r22
 160:	08 95       	ret

00000162 <read_acc_direction>:
	
	return measurment;
}

// Reads one channel at a time.
static void read_acc_direction(int* ptr){
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	ec 01       	movw	r28, r24
	switch_channel();
 168:	c2 df       	rcall	.-124    	; 0xee <switch_channel>
	ADCSRA |= BIT(6);
 16a:	86 b1       	in	r24, 0x06	; 6
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & BIT(6));
 170:	36 99       	sbic	0x06, 6	; 6
 172:	fe cf       	rjmp	.-4      	; 0x170 <read_acc_direction+0xe>
	int value = ADCL + (ADCH<<8);
 174:	24 b1       	in	r18, 0x04	; 4
 176:	85 b1       	in	r24, 0x05	; 5
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	98 2f       	mov	r25, r24
 17c:	88 27       	eor	r24, r24
	*ptr = translate_to_geforce(value);
 17e:	82 0f       	add	r24, r18
 180:	91 1d       	adc	r25, r1
 182:	d8 df       	rcall	.-80     	; 0x134 <translate_to_geforce>
 184:	99 83       	std	Y+1, r25	; 0x01
 186:	88 83       	st	Y, r24
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <accelerometer_init>:
static void switch_channel();
static int translate_to_geforce(int raw);


void accelerometer_init(){
	DDRF = 0x00;				// Setting ADC pins to input.
 18e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	ADMUX = 0b11000000;			// AREF=VCC, result left adjusted, channel1 at pin PF1
 192:	80 ec       	ldi	r24, 0xC0	; 192
 194:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;		// ADC-enable, no interrupt, start, free running, division by 64
 196:	86 e8       	ldi	r24, 0x86	; 134
 198:	86 b9       	out	0x06, r24	; 6
 19a:	08 95       	ret

0000019c <accelerometer_read>:
}

// Reads the accelerometer.
accelerometer_measurment_t accelerometer_read(){
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	2c 97       	sbiw	r28, 0x0c	; 12
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
	accelerometer_measurment_t measurment;
	
	// Reading all values
	read_acc_direction(&measurment.x_geforce);
 1b0:	ce 01       	movw	r24, r28
 1b2:	07 96       	adiw	r24, 0x07	; 7
 1b4:	d6 df       	rcall	.-84     	; 0x162 <read_acc_direction>
	read_acc_direction(&measurment.y_geforce);
 1b6:	ce 01       	movw	r24, r28
 1b8:	09 96       	adiw	r24, 0x09	; 9
 1ba:	d3 df       	rcall	.-90     	; 0x162 <read_acc_direction>
	read_acc_direction(&measurment.z_geforce);
 1bc:	ce 01       	movw	r24, r28
 1be:	0b 96       	adiw	r24, 0x0b	; 11
 1c0:	d0 df       	rcall	.-96     	; 0x162 <read_acc_direction>
	
	return measurment;
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	fe 01       	movw	r30, r28
 1c6:	37 96       	adiw	r30, 0x07	; 7
 1c8:	de 01       	movw	r26, r28
 1ca:	11 96       	adiw	r26, 0x01	; 1
 1cc:	01 90       	ld	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	8a 95       	dec	r24
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <accelerometer_read+0x30>
 1d4:	29 81       	ldd	r18, Y+1	; 0x01
 1d6:	3a 81       	ldd	r19, Y+2	; 0x02
 1d8:	4b 81       	ldd	r20, Y+3	; 0x03
 1da:	5c 81       	ldd	r21, Y+4	; 0x04
 1dc:	6d 81       	ldd	r22, Y+5	; 0x05
 1de:	7e 81       	ldd	r23, Y+6	; 0x06
}
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	2c 96       	adiw	r28, 0x0c	; 12
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <time_passed>:
{
    return directions[randomNumber()];
}

void time_passed(){
	reading = false;
 1f6:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__data_end>
 1fa:	08 95       	ret

000001fc <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	08 c0       	rjmp	.+16     	; 0x212 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	ef ec       	ldi	r30, 0xCF	; 207
 204:	f7 e0       	ldi	r31, 0x07	; 7
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <wait+0xa>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <wait+0x10>
 20c:	00 00       	nop
 20e:	2f 5f       	subi	r18, 0xFF	; 255
 210:	3f 4f       	sbci	r19, 0xFF	; 255
 212:	28 17       	cp	r18, r24
 214:	39 07       	cpc	r19, r25
 216:	ac f3       	brlt	.-22     	; 0x202 <wait+0x6>
	{
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
 218:	08 95       	ret

0000021a <GameLogic_Init>:
    if (CORRECTINPUTVALUE < 1)
    {
        return CORRECTINPUTVALUE_INVALID;
    }

	display_init();
 21a:	2b d1       	rcall	.+598    	; 0x472 <display_init>
	accelerometer_init();
 21c:	b8 df       	rcall	.-144    	; 0x18e <accelerometer_init>
 21e:	83 e0       	ldi	r24, 0x03	; 3

	return UNKNOWN;
    display_text("---starting up game---");
}
 220:	08 95       	ret

00000222 <randomNumber>:
 222:	80 e0       	ldi	r24, 0x00	; 0

int randomNumber()
{
    int rand_num;
    srand(time(NULL));
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	50 df       	rcall	.-352    	; 0xc8 <time>
 228:	cb 01       	movw	r24, r22
 22a:	4d d4       	rcall	.+2202   	; 0xac6 <srand>
    // Will generate a random number between 0-5
    rand_num = rand() % 6;
 22c:	49 d4       	rcall	.+2194   	; 0xac0 <rand>
 22e:	66 e0       	ldi	r22, 0x06	; 6
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	d8 c3       	rjmp	.+1968   	; 0x9e4 <__divmodhi4>

00000234 <randomDirection>:

    return rand_num;
}
 234:	f6 df       	rcall	.-20     	; 0x222 <randomNumber>

DIRECTION randomDirection()
{
    return directions[randomNumber()];
 236:	8a 5f       	subi	r24, 0xFA	; 250
 238:	9e 4f       	sbci	r25, 0xFE	; 254
}
 23a:	fc 01       	movw	r30, r24
 23c:	80 81       	ld	r24, Z
 23e:	08 95       	ret

00000240 <GameLogic_Draw_Dir>:
void time_passed(){
	reading = false;
}

void GameLogic_Draw_Dir(DIRECTION dir){
	switch (dir)
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	a1 f0       	breq	.+40     	; 0x26c <GameLogic_Draw_Dir+0x2c>
 244:	28 f4       	brcc	.+10     	; 0x250 <GameLogic_Draw_Dir+0x10>
 246:	88 23       	and	r24, r24
 248:	49 f0       	breq	.+18     	; 0x25c <GameLogic_Draw_Dir+0x1c>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	59 f0       	breq	.+22     	; 0x264 <GameLogic_Draw_Dir+0x24>
 24e:	08 95       	ret
 250:	84 30       	cpi	r24, 0x04	; 4
 252:	a1 f0       	breq	.+40     	; 0x27c <GameLogic_Draw_Dir+0x3c>
 254:	78 f0       	brcs	.+30     	; 0x274 <GameLogic_Draw_Dir+0x34>
 256:	85 30       	cpi	r24, 0x05	; 5
 258:	a9 f0       	breq	.+42     	; 0x284 <GameLogic_Draw_Dir+0x44>
 25a:	08 95       	ret
	{
		case UP:
			display_text(" Go upwards");
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	fb c0       	rjmp	.+502    	; 0x458 <display_text>
			break;
 262:	08 95       	ret
		case DOWN:
			display_text(" Go downwards");
 264:	88 e1       	ldi	r24, 0x18	; 24
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	f7 c0       	rjmp	.+494    	; 0x458 <display_text>
			break;
 26a:	08 95       	ret
		case LEFT:
			display_text(" Go left");
 26c:	86 e2       	ldi	r24, 0x26	; 38
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	f3 c0       	rjmp	.+486    	; 0x458 <display_text>
			break;
		case RIGHT:
			display_text(" Go right");
 272:	08 95       	ret
 274:	8f e2       	ldi	r24, 0x2F	; 47
 276:	91 e0       	ldi	r25, 0x01	; 1
			break;
 278:	ef c0       	rjmp	.+478    	; 0x458 <display_text>
		case FORWARD:
			display_text(" Go forward");
 27a:	08 95       	ret
 27c:	89 e3       	ldi	r24, 0x39	; 57
 27e:	91 e0       	ldi	r25, 0x01	; 1
			break;
 280:	eb c0       	rjmp	.+470    	; 0x458 <display_text>
		case BACKWARD:
			display_text(" Go backward");
 282:	08 95       	ret
 284:	85 e4       	ldi	r24, 0x45	; 69
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	e7 c0       	rjmp	.+462    	; 0x458 <display_text>
 28a:	08 95       	ret

0000028c <GameLogic_Round>:
			break;
	}
}

void GameLogic_Round()
{
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	62 97       	sbiw	r28, 0x12	; 18
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
	// Setup of handling
    DIRECTION dir = randomDirection();
 2aa:	c4 df       	rcall	.-120    	; 0x234 <randomDirection>
 2ac:	18 2f       	mov	r17, r24
	set_timer(2000, time_passed);
 2ae:	6b ef       	ldi	r22, 0xFB	; 251
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	80 ed       	ldi	r24, 0xD0	; 208
 2b4:	97 e0       	ldi	r25, 0x07	; 7
 2b6:	2f d1       	rcall	.+606    	; 0x516 <set_timer>
	reading = true;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
	GameLogic_Draw_Dir(dir);
 2be:	81 2f       	mov	r24, r17
 2c0:	bf df       	rcall	.-130    	; 0x240 <GameLogic_Draw_Dir>

	// Starting handling
	while(reading) {
 2c2:	49 c0       	rjmp	.+146    	; 0x356 <GameLogic_Round+0xca>
		switch (dir)
 2c4:	14 30       	cpi	r17, 0x04	; 4
 2c6:	18 f4       	brcc	.+6      	; 0x2ce <GameLogic_Round+0x42>
 2c8:	12 30       	cpi	r17, 0x02	; 2
 2ca:	20 f0       	brcs	.+8      	; 0x2d4 <GameLogic_Round+0x48>
 2cc:	15 c0       	rjmp	.+42     	; 0x2f8 <GameLogic_Round+0x6c>
 2ce:	16 30       	cpi	r17, 0x06	; 6
 2d0:	28 f1       	brcs	.+74     	; 0x31c <GameLogic_Round+0x90>
		{
			case UP:
			case DOWN:
				if(accelerometer_read().x_geforce >= CORRECTINPUTVALUE)
 2d2:	35 c0       	rjmp	.+106    	; 0x33e <GameLogic_Round+0xb2>
 2d4:	63 df       	rcall	.-314    	; 0x19c <accelerometer_read>
 2d6:	2d 87       	std	Y+13, r18	; 0x0d
 2d8:	3e 87       	std	Y+14, r19	; 0x0e
 2da:	8d 85       	ldd	r24, Y+13	; 0x0d
 2dc:	9e 85       	ldd	r25, Y+14	; 0x0e
 2de:	18 16       	cp	r1, r24
 2e0:	19 06       	cpc	r1, r25
 2e2:	6c f5       	brge	.+90     	; 0x33e <GameLogic_Round+0xb2>
				{
					correctCount++;
 2e4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <correctCount>
 2e8:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <correctCount+0x1>
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <correctCount+0x1>
 2f2:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <correctCount>
				}
				break;

			case LEFT:
			case RIGHT:
				if(accelerometer_read().y_geforce >= CORRECTINPUTVALUE)
 2f6:	23 c0       	rjmp	.+70     	; 0x33e <GameLogic_Round+0xb2>
 2f8:	51 df       	rcall	.-350    	; 0x19c <accelerometer_read>
 2fa:	49 87       	std	Y+9, r20	; 0x09
 2fc:	5a 87       	std	Y+10, r21	; 0x0a
 2fe:	89 85       	ldd	r24, Y+9	; 0x09
 300:	9a 85       	ldd	r25, Y+10	; 0x0a
 302:	18 16       	cp	r1, r24
 304:	19 06       	cpc	r1, r25
 306:	dc f4       	brge	.+54     	; 0x33e <GameLogic_Round+0xb2>
				{
					correctCount++;
 308:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <correctCount>
 30c:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <correctCount+0x1>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <correctCount+0x1>
 316:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <correctCount>
				}
				break;

			case FORWARD:
			case BACKWARD:
				if(accelerometer_read().z_geforce >= CORRECTINPUTVALUE)
 31a:	11 c0       	rjmp	.+34     	; 0x33e <GameLogic_Round+0xb2>
 31c:	3f df       	rcall	.-386    	; 0x19c <accelerometer_read>
 31e:	6d 83       	std	Y+5, r22	; 0x05
 320:	7e 83       	std	Y+6, r23	; 0x06
 322:	8d 81       	ldd	r24, Y+5	; 0x05
 324:	9e 81       	ldd	r25, Y+6	; 0x06
 326:	18 16       	cp	r1, r24
 328:	19 06       	cpc	r1, r25
 32a:	4c f4       	brge	.+18     	; 0x33e <GameLogic_Round+0xb2>
				{
					correctCount++;
 32c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <correctCount>
 330:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <correctCount+0x1>
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <correctCount+0x1>
 33a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <correctCount>
				}
				break;
		}
		totalCount++;
 33e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <totalCount>
 342:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <totalCount+0x1>
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <totalCount+0x1>
 34c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <totalCount>
		wait(100);
 350:	84 e6       	ldi	r24, 0x64	; 100
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	53 df       	rcall	.-346    	; 0x1fc <wait>
	set_timer(2000, time_passed);
	reading = true;
	GameLogic_Draw_Dir(dir);

	// Starting handling
	while(reading) {
 356:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 35a:	81 11       	cpse	r24, r1
 35c:	b3 cf       	rjmp	.-154    	; 0x2c4 <GameLogic_Round+0x38>
		}
		totalCount++;
		wait(100);
	}

    bool inputCorrect = ((float)((float)100 / (float)totalCount) * (float)correctCount) > CORRECTTHRESHOLD;
 35e:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <totalCount>
 362:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <totalCount+0x1>
 366:	07 2e       	mov	r0, r23
 368:	00 0c       	add	r0, r0
 36a:	88 0b       	sbc	r24, r24
 36c:	99 0b       	sbc	r25, r25
 36e:	23 d2       	rcall	.+1094   	; 0x7b6 <__floatsisf>
 370:	9b 01       	movw	r18, r22
 372:	ac 01       	movw	r20, r24
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	88 ec       	ldi	r24, 0xC8	; 200
 37a:	92 e4       	ldi	r25, 0x42	; 66
 37c:	81 d1       	rcall	.+770    	; 0x680 <__divsf3>
 37e:	6b 01       	movw	r12, r22
 380:	7c 01       	movw	r14, r24
 382:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <correctCount>
 386:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <correctCount+0x1>
 38a:	07 2e       	mov	r0, r23
 38c:	00 0c       	add	r0, r0
 38e:	88 0b       	sbc	r24, r24
 390:	99 0b       	sbc	r25, r25
 392:	11 d2       	rcall	.+1058   	; 0x7b6 <__floatsisf>
 394:	9b 01       	movw	r18, r22
 396:	ac 01       	movw	r20, r24
 398:	c7 01       	movw	r24, r14
 39a:	b6 01       	movw	r22, r12

    if(inputCorrect) {
 39c:	9c d2       	rcall	.+1336   	; 0x8d6 <__mulsf3>
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	40 ea       	ldi	r20, 0xA0	; 160
 3a4:	50 e4       	ldi	r21, 0x40	; 64
 3a6:	93 d2       	rcall	.+1318   	; 0x8ce <__gesf2>
        display_text(" Input Correct! ");
 3a8:	18 16       	cp	r1, r24
 3aa:	24 f4       	brge	.+8      	; 0x3b4 <GameLogic_Round+0x128>
 3ac:	82 e5       	ldi	r24, 0x52	; 82
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	53 d0       	rcall	.+166    	; 0x458 <display_text>
    } else {
        display_text("Input Incorrect!");
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <GameLogic_Round+0x12e>
 3b4:	83 e6       	ldi	r24, 0x63	; 99
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	4f d0       	rcall	.+158    	; 0x458 <display_text>
    }

	wait(1000);
 3ba:	88 ee       	ldi	r24, 0xE8	; 232
 3bc:	93 e0       	ldi	r25, 0x03	; 3
 3be:	1e df       	rcall	.-452    	; 0x1fc <wait>
 3c0:	62 96       	adiw	r28, 0x12	; 18
}
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	df 90       	pop	r13
 3d8:	cf 90       	pop	r12
 3da:	08 95       	ret

000003dc <switch_E>:
 3dc:	85 b3       	in	r24, 0x15	; 21
	PORTC = (byte<<4);
	PORTC &= ~(1<<RS);
	switch_E();
}

void display_set_cursor(int position) {
 3de:	88 60       	ori	r24, 0x08	; 8
 3e0:	85 bb       	out	0x15, r24	; 21
 3e2:	8f ec       	ldi	r24, 0xCF	; 207
 3e4:	97 e0       	ldi	r25, 0x07	; 7
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <switch_E+0xa>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <switch_E+0x10>
 3ec:	00 00       	nop
 3ee:	85 b3       	in	r24, 0x15	; 21
 3f0:	87 7f       	andi	r24, 0xF7	; 247
 3f2:	85 bb       	out	0x15, r24	; 21
 3f4:	8f ec       	ldi	r24, 0xCF	; 207
 3f6:	97 e0       	ldi	r25, 0x07	; 7
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <switch_E+0x1c>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <switch_E+0x22>
 3fe:	00 00       	nop
 400:	08 95       	ret

00000402 <lcd_write_data>:
 402:	cf 93       	push	r28
 404:	c8 2f       	mov	r28, r24
 406:	85 bb       	out	0x15, r24	; 21
 408:	85 b3       	in	r24, 0x15	; 21
 40a:	84 60       	ori	r24, 0x04	; 4
 40c:	85 bb       	out	0x15, r24	; 21
 40e:	e6 df       	rcall	.-52     	; 0x3dc <switch_E>
 410:	c2 95       	swap	r28
 412:	c0 7f       	andi	r28, 0xF0	; 240
 414:	c5 bb       	out	0x15, r28	; 21
 416:	85 b3       	in	r24, 0x15	; 21
 418:	84 60       	ori	r24, 0x04	; 4
 41a:	85 bb       	out	0x15, r24	; 21
 41c:	df df       	rcall	.-66     	; 0x3dc <switch_E>
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <lcd_write_command>:
 422:	cf 93       	push	r28
 424:	c8 2f       	mov	r28, r24
 426:	85 bb       	out	0x15, r24	; 21
 428:	85 b3       	in	r24, 0x15	; 21
 42a:	8b 7f       	andi	r24, 0xFB	; 251
 42c:	85 bb       	out	0x15, r24	; 21
 42e:	d6 df       	rcall	.-84     	; 0x3dc <switch_E>
 430:	c2 95       	swap	r28
 432:	c0 7f       	andi	r28, 0xF0	; 240
 434:	c5 bb       	out	0x15, r28	; 21
 436:	85 b3       	in	r24, 0x15	; 21
 438:	8b 7f       	andi	r24, 0xFB	; 251
 43a:	85 bb       	out	0x15, r24	; 21
 43c:	cf df       	rcall	.-98     	; 0x3dc <switch_E>
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <display_clear>:
	//TODO
}

void display_clear(){
	lcd_write_command(0x01);
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	ee df       	rcall	.-36     	; 0x422 <lcd_write_command>
 446:	8f e9       	ldi	r24, 0x9F	; 159
 448:	9f e0       	ldi	r25, 0x0F	; 15
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <display_clear+0x8>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <display_clear+0xe>
 450:	00 00       	nop
	_delay_ms(2);
	lcd_write_command(0x80);
 452:	80 e8       	ldi	r24, 0x80	; 128
 454:	e6 cf       	rjmp	.-52     	; 0x422 <lcd_write_command>
 456:	08 95       	ret

00000458 <display_text>:
	PORTC = (byte<<4);
	PORTC |= (1<<RS);
	switch_E();
}

void display_text(char *str) {
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	ec 01       	movw	r28, r24
	display_clear();
 45e:	f1 df       	rcall	.-30     	; 0x442 <display_clear>
	while (*str) {
 460:	02 c0       	rjmp	.+4      	; 0x466 <display_text+0xe>
		lcd_write_data(*str++);
 462:	21 96       	adiw	r28, 0x01	; 1
 464:	ce df       	rcall	.-100    	; 0x402 <lcd_write_data>
	switch_E();
}

void display_text(char *str) {
	display_clear();
	while (*str) {
 466:	88 81       	ld	r24, Y
 468:	81 11       	cpse	r24, r1
 46a:	fb cf       	rjmp	.-10     	; 0x462 <display_text+0xa>
		lcd_write_data(*str++);
	}
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <display_init>:
	lcd_write_command(0x01);
	_delay_ms(2);
	lcd_write_command(0x80);
}

void display_init() {
 472:	cf 93       	push	r28
	// See table 13 from the HD44780U datasheet.
	DDRC = 0xFF;
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 478:	15 ba       	out	0x15, r1	; 21
	
	// Step 2 Function set
	PORTC = 0x20;
 47a:	c0 e2       	ldi	r28, 0x20	; 32
 47c:	c5 bb       	out	0x15, r28	; 21
	switch_E();
 47e:	ae df       	rcall	.-164    	; 0x3dc <switch_E>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	switch_E();
 480:	c5 bb       	out	0x15, r28	; 21
 482:	ac df       	rcall	.-168    	; 0x3dc <switch_E>
	PORTC = 0x80;
 484:	80 e8       	ldi	r24, 0x80	; 128
	switch_E();
 486:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 488:	a9 df       	rcall	.-174    	; 0x3dc <switch_E>
	switch_E();
 48a:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 48c:	a7 df       	rcall	.-178    	; 0x3dc <switch_E>
	switch_E();
 48e:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 490:	85 bb       	out	0x15, r24	; 21
	switch_E();
 492:	a4 df       	rcall	.-184    	; 0x3dc <switch_E>
	PORTC = 0x60;
 494:	15 ba       	out	0x15, r1	; 21
 496:	a2 df       	rcall	.-188    	; 0x3dc <switch_E>
	switch_E();
 498:	80 e6       	ldi	r24, 0x60	; 96
 49a:	85 bb       	out	0x15, r24	; 21
	
	// Set cursor to position 0 on first row.
	lcd_write_command(0x02);
 49c:	9f df       	rcall	.-194    	; 0x3dc <switch_E>
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	c0 df       	rcall	.-128    	; 0x422 <lcd_write_command>
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <__vector_12>:
	{0b000, 0b001, 0b010,
	0b011, 0b100,  0b101};

void (*on_interupt)(void);

ISR(TIMER1_COMPA_vect) {
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	0b b6       	in	r0, 0x3b	; 59
 4b2:	0f 92       	push	r0
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	4f 93       	push	r20
 4ba:	5f 93       	push	r21
 4bc:	6f 93       	push	r22
 4be:	7f 93       	push	r23
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	af 93       	push	r26
 4c6:	bf 93       	push	r27
 4c8:	ef 93       	push	r30
 4ca:	ff 93       	push	r31
	on_interupt();
 4cc:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <on_interupt>
 4d0:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <on_interupt+0x1>
 4d4:	09 95       	icall
	cli();
 4d6:	f8 94       	cli
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0b be       	out	0x3b, r0	; 59
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <setup_timer>:
	setup_timer(prescaler, limit);
	on_interupt = fun_ptr;
}

void setup_timer(int prescaler, int limit){
	OCR1A = limit;					// Setting calculated limit
 4fe:	7b bd       	out	0x2b, r23	; 43
 500:	6a bd       	out	0x2a, r22	; 42
	TIMSK |= (1 << 4);				// Setting on compare vect intr
 502:	97 b7       	in	r25, 0x37	; 55
 504:	90 61       	ori	r25, 0x10	; 16
 506:	97 bf       	out	0x37, r25	; 55
	sei();							// Turning on interupts
 508:	78 94       	sei
	TCCR1B |= prescaler_values[0];	// Clearing prescaler
 50a:	9e b5       	in	r25, 0x2e	; 46
 50c:	9e bd       	out	0x2e, r25	; 46
	TCCR1B |= prescaler;			// Setting new prescaler
 50e:	9e b5       	in	r25, 0x2e	; 46
 510:	89 2b       	or	r24, r25
 512:	8e bd       	out	0x2e, r24	; 46
 514:	08 95       	ret

00000516 <set_timer>:
	cli();
}

void setup_timer(int prescaler, int limit);

void set_timer(int time_ms, void (*fun_ptr)(void)){
 516:	8f 92       	push	r8
 518:	9f 92       	push	r9
 51a:	af 92       	push	r10
 51c:	bf 92       	push	r11
 51e:	cf 92       	push	r12
 520:	df 92       	push	r13
 522:	ef 92       	push	r14
 524:	ff 92       	push	r15
 526:	0f 93       	push	r16
 528:	1f 93       	push	r17
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	8c 01       	movw	r16, r24
 530:	6b 01       	movw	r12, r22
	int prescaler, limit;

	// Looping through prescalers
	for (int i = 1; i < Timer_PRESCALER_COUNT; i++)
 532:	c1 e0       	ldi	r28, 0x01	; 1
 534:	d0 e0       	ldi	r29, 0x00	; 0
 536:	25 c0       	rjmp	.+74     	; 0x582 <set_timer+0x6c>
	{
		// Calculating max allowed value of prescaler and if in limit then use.
		if ((1 / TIMER_CLOCK_RATE) * prescaler_values[i] < time_ms){
 538:	10 16       	cp	r1, r16
 53a:	11 06       	cpc	r1, r17
 53c:	0c f5       	brge	.+66     	; 0x580 <set_timer+0x6a>
			prescaler = prescaler_values[i];
 53e:	fe 01       	movw	r30, r28
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	ec 58       	subi	r30, 0x8C	; 140
 546:	fe 4f       	sbci	r31, 0xFE	; 254
 548:	e0 80       	ld	r14, Z
 54a:	f1 80       	ldd	r15, Z+1	; 0x01
			limit = (int)((float)time_ms / (((float)1 / (float)TIMER_CLOCK_RATE) * (float)prescaler_values[i]));
 54c:	b8 01       	movw	r22, r16
 54e:	01 2e       	mov	r0, r17
 550:	00 0c       	add	r0, r0
 552:	88 0b       	sbc	r24, r24
 554:	99 0b       	sbc	r25, r25
 556:	2f d1       	rcall	.+606    	; 0x7b6 <__floatsisf>
 558:	4b 01       	movw	r8, r22
 55a:	5c 01       	movw	r10, r24
 55c:	b7 01       	movw	r22, r14
 55e:	0f 2c       	mov	r0, r15
 560:	00 0c       	add	r0, r0
 562:	88 0b       	sbc	r24, r24
 564:	99 0b       	sbc	r25, r25
 566:	27 d1       	rcall	.+590    	; 0x7b6 <__floatsisf>
 568:	2f e6       	ldi	r18, 0x6F	; 111
 56a:	32 e1       	ldi	r19, 0x12	; 18
 56c:	43 e0       	ldi	r20, 0x03	; 3
 56e:	59 e3       	ldi	r21, 0x39	; 57
 570:	b2 d1       	rcall	.+868    	; 0x8d6 <__mulsf3>
 572:	9b 01       	movw	r18, r22
 574:	ac 01       	movw	r20, r24
 576:	c5 01       	movw	r24, r10
 578:	b4 01       	movw	r22, r8
 57a:	82 d0       	rcall	.+260    	; 0x680 <__divsf3>
 57c:	e9 d0       	rcall	.+466    	; 0x750 <__fixsfsi>
 57e:	9b 01       	movw	r18, r22

void set_timer(int time_ms, void (*fun_ptr)(void)){
	int prescaler, limit;

	// Looping through prescalers
	for (int i = 1; i < Timer_PRESCALER_COUNT; i++)
 580:	21 96       	adiw	r28, 0x01	; 1
 582:	c6 30       	cpi	r28, 0x06	; 6
 584:	d1 05       	cpc	r29, r1
			limit = (int)((float)time_ms / (((float)1 / (float)TIMER_CLOCK_RATE) * (float)prescaler_values[i]));
		}
	}

	// Setting up all timers and other things
	setup_timer(prescaler, limit);
 586:	c4 f2       	brlt	.-80     	; 0x538 <set_timer+0x22>
 588:	b9 01       	movw	r22, r18
 58a:	c7 01       	movw	r24, r14
 58c:	b8 df       	rcall	.-144    	; 0x4fe <setup_timer>
	on_interupt = fun_ptr;
 58e:	d0 92 86 01 	sts	0x0186, r13	; 0x800186 <on_interupt+0x1>
 592:	c0 92 85 01 	sts	0x0185, r12	; 0x800185 <on_interupt>
}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	ff 90       	pop	r15
 5a0:	ef 90       	pop	r14
 5a2:	df 90       	pop	r13
 5a4:	cf 90       	pop	r12
 5a6:	bf 90       	pop	r11
 5a8:	af 90       	pop	r10
 5aa:	9f 90       	pop	r9
 5ac:	8f 90       	pop	r8
 5ae:	08 95       	ret

000005b0 <main>:


// Main program
int main( void )
{
	GameLogic_Init();
 5b0:	34 de       	rcall	.-920    	; 0x21a <GameLogic_Init>
	while (1)
	{
		// Reading measurement
		GameLogic_Round();
 5b2:	6c de       	rcall	.-808    	; 0x28c <GameLogic_Round>
 5b4:	fe cf       	rjmp	.-4      	; 0x5b2 <main+0x2>

000005b6 <__subsf3>:
 5b6:	50 58       	subi	r21, 0x80	; 128

000005b8 <__addsf3>:
 5b8:	bb 27       	eor	r27, r27
 5ba:	aa 27       	eor	r26, r26
 5bc:	0e d0       	rcall	.+28     	; 0x5da <__addsf3x>
 5be:	4d c1       	rjmp	.+666    	; 0x85a <__fp_round>
 5c0:	3e d1       	rcall	.+636    	; 0x83e <__fp_pscA>
 5c2:	30 f0       	brcs	.+12     	; 0x5d0 <__addsf3+0x18>
 5c4:	43 d1       	rcall	.+646    	; 0x84c <__fp_pscB>
 5c6:	20 f0       	brcs	.+8      	; 0x5d0 <__addsf3+0x18>
 5c8:	31 f4       	brne	.+12     	; 0x5d6 <__addsf3+0x1e>
 5ca:	9f 3f       	cpi	r25, 0xFF	; 255
 5cc:	11 f4       	brne	.+4      	; 0x5d2 <__addsf3+0x1a>
 5ce:	1e f4       	brtc	.+6      	; 0x5d6 <__addsf3+0x1e>
 5d0:	33 c1       	rjmp	.+614    	; 0x838 <__fp_nan>
 5d2:	0e f4       	brtc	.+2      	; 0x5d6 <__addsf3+0x1e>
 5d4:	e0 95       	com	r30
 5d6:	e7 fb       	bst	r30, 7
 5d8:	29 c1       	rjmp	.+594    	; 0x82c <__fp_inf>

000005da <__addsf3x>:
 5da:	e9 2f       	mov	r30, r25
 5dc:	4f d1       	rcall	.+670    	; 0x87c <__fp_split3>
 5de:	80 f3       	brcs	.-32     	; 0x5c0 <__addsf3+0x8>
 5e0:	ba 17       	cp	r27, r26
 5e2:	62 07       	cpc	r22, r18
 5e4:	73 07       	cpc	r23, r19
 5e6:	84 07       	cpc	r24, r20
 5e8:	95 07       	cpc	r25, r21
 5ea:	18 f0       	brcs	.+6      	; 0x5f2 <__addsf3x+0x18>
 5ec:	71 f4       	brne	.+28     	; 0x60a <__addsf3x+0x30>
 5ee:	9e f5       	brtc	.+102    	; 0x656 <__addsf3x+0x7c>
 5f0:	67 c1       	rjmp	.+718    	; 0x8c0 <__fp_zero>
 5f2:	0e f4       	brtc	.+2      	; 0x5f6 <__addsf3x+0x1c>
 5f4:	e0 95       	com	r30
 5f6:	0b 2e       	mov	r0, r27
 5f8:	ba 2f       	mov	r27, r26
 5fa:	a0 2d       	mov	r26, r0
 5fc:	0b 01       	movw	r0, r22
 5fe:	b9 01       	movw	r22, r18
 600:	90 01       	movw	r18, r0
 602:	0c 01       	movw	r0, r24
 604:	ca 01       	movw	r24, r20
 606:	a0 01       	movw	r20, r0
 608:	11 24       	eor	r1, r1
 60a:	ff 27       	eor	r31, r31
 60c:	59 1b       	sub	r21, r25
 60e:	99 f0       	breq	.+38     	; 0x636 <__addsf3x+0x5c>
 610:	59 3f       	cpi	r21, 0xF9	; 249
 612:	50 f4       	brcc	.+20     	; 0x628 <__addsf3x+0x4e>
 614:	50 3e       	cpi	r21, 0xE0	; 224
 616:	68 f1       	brcs	.+90     	; 0x672 <__addsf3x+0x98>
 618:	1a 16       	cp	r1, r26
 61a:	f0 40       	sbci	r31, 0x00	; 0
 61c:	a2 2f       	mov	r26, r18
 61e:	23 2f       	mov	r18, r19
 620:	34 2f       	mov	r19, r20
 622:	44 27       	eor	r20, r20
 624:	58 5f       	subi	r21, 0xF8	; 248
 626:	f3 cf       	rjmp	.-26     	; 0x60e <__addsf3x+0x34>
 628:	46 95       	lsr	r20
 62a:	37 95       	ror	r19
 62c:	27 95       	ror	r18
 62e:	a7 95       	ror	r26
 630:	f0 40       	sbci	r31, 0x00	; 0
 632:	53 95       	inc	r21
 634:	c9 f7       	brne	.-14     	; 0x628 <__addsf3x+0x4e>
 636:	7e f4       	brtc	.+30     	; 0x656 <__addsf3x+0x7c>
 638:	1f 16       	cp	r1, r31
 63a:	ba 0b       	sbc	r27, r26
 63c:	62 0b       	sbc	r22, r18
 63e:	73 0b       	sbc	r23, r19
 640:	84 0b       	sbc	r24, r20
 642:	ba f0       	brmi	.+46     	; 0x672 <__addsf3x+0x98>
 644:	91 50       	subi	r25, 0x01	; 1
 646:	a1 f0       	breq	.+40     	; 0x670 <__addsf3x+0x96>
 648:	ff 0f       	add	r31, r31
 64a:	bb 1f       	adc	r27, r27
 64c:	66 1f       	adc	r22, r22
 64e:	77 1f       	adc	r23, r23
 650:	88 1f       	adc	r24, r24
 652:	c2 f7       	brpl	.-16     	; 0x644 <__addsf3x+0x6a>
 654:	0e c0       	rjmp	.+28     	; 0x672 <__addsf3x+0x98>
 656:	ba 0f       	add	r27, r26
 658:	62 1f       	adc	r22, r18
 65a:	73 1f       	adc	r23, r19
 65c:	84 1f       	adc	r24, r20
 65e:	48 f4       	brcc	.+18     	; 0x672 <__addsf3x+0x98>
 660:	87 95       	ror	r24
 662:	77 95       	ror	r23
 664:	67 95       	ror	r22
 666:	b7 95       	ror	r27
 668:	f7 95       	ror	r31
 66a:	9e 3f       	cpi	r25, 0xFE	; 254
 66c:	08 f0       	brcs	.+2      	; 0x670 <__addsf3x+0x96>
 66e:	b3 cf       	rjmp	.-154    	; 0x5d6 <__addsf3+0x1e>
 670:	93 95       	inc	r25
 672:	88 0f       	add	r24, r24
 674:	08 f0       	brcs	.+2      	; 0x678 <__addsf3x+0x9e>
 676:	99 27       	eor	r25, r25
 678:	ee 0f       	add	r30, r30
 67a:	97 95       	ror	r25
 67c:	87 95       	ror	r24
 67e:	08 95       	ret

00000680 <__divsf3>:
 680:	0c d0       	rcall	.+24     	; 0x69a <__divsf3x>
 682:	eb c0       	rjmp	.+470    	; 0x85a <__fp_round>
 684:	e3 d0       	rcall	.+454    	; 0x84c <__fp_pscB>
 686:	40 f0       	brcs	.+16     	; 0x698 <__divsf3+0x18>
 688:	da d0       	rcall	.+436    	; 0x83e <__fp_pscA>
 68a:	30 f0       	brcs	.+12     	; 0x698 <__divsf3+0x18>
 68c:	21 f4       	brne	.+8      	; 0x696 <__divsf3+0x16>
 68e:	5f 3f       	cpi	r21, 0xFF	; 255
 690:	19 f0       	breq	.+6      	; 0x698 <__divsf3+0x18>
 692:	cc c0       	rjmp	.+408    	; 0x82c <__fp_inf>
 694:	51 11       	cpse	r21, r1
 696:	15 c1       	rjmp	.+554    	; 0x8c2 <__fp_szero>
 698:	cf c0       	rjmp	.+414    	; 0x838 <__fp_nan>

0000069a <__divsf3x>:
 69a:	f0 d0       	rcall	.+480    	; 0x87c <__fp_split3>
 69c:	98 f3       	brcs	.-26     	; 0x684 <__divsf3+0x4>

0000069e <__divsf3_pse>:
 69e:	99 23       	and	r25, r25
 6a0:	c9 f3       	breq	.-14     	; 0x694 <__divsf3+0x14>
 6a2:	55 23       	and	r21, r21
 6a4:	b1 f3       	breq	.-20     	; 0x692 <__divsf3+0x12>
 6a6:	95 1b       	sub	r25, r21
 6a8:	55 0b       	sbc	r21, r21
 6aa:	bb 27       	eor	r27, r27
 6ac:	aa 27       	eor	r26, r26
 6ae:	62 17       	cp	r22, r18
 6b0:	73 07       	cpc	r23, r19
 6b2:	84 07       	cpc	r24, r20
 6b4:	38 f0       	brcs	.+14     	; 0x6c4 <__divsf3_pse+0x26>
 6b6:	9f 5f       	subi	r25, 0xFF	; 255
 6b8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ba:	22 0f       	add	r18, r18
 6bc:	33 1f       	adc	r19, r19
 6be:	44 1f       	adc	r20, r20
 6c0:	aa 1f       	adc	r26, r26
 6c2:	a9 f3       	breq	.-22     	; 0x6ae <__divsf3_pse+0x10>
 6c4:	33 d0       	rcall	.+102    	; 0x72c <__divsf3_pse+0x8e>
 6c6:	0e 2e       	mov	r0, r30
 6c8:	3a f0       	brmi	.+14     	; 0x6d8 <__divsf3_pse+0x3a>
 6ca:	e0 e8       	ldi	r30, 0x80	; 128
 6cc:	30 d0       	rcall	.+96     	; 0x72e <__divsf3_pse+0x90>
 6ce:	91 50       	subi	r25, 0x01	; 1
 6d0:	50 40       	sbci	r21, 0x00	; 0
 6d2:	e6 95       	lsr	r30
 6d4:	00 1c       	adc	r0, r0
 6d6:	ca f7       	brpl	.-14     	; 0x6ca <__divsf3_pse+0x2c>
 6d8:	29 d0       	rcall	.+82     	; 0x72c <__divsf3_pse+0x8e>
 6da:	fe 2f       	mov	r31, r30
 6dc:	27 d0       	rcall	.+78     	; 0x72c <__divsf3_pse+0x8e>
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	bb 1f       	adc	r27, r27
 6e6:	26 17       	cp	r18, r22
 6e8:	37 07       	cpc	r19, r23
 6ea:	48 07       	cpc	r20, r24
 6ec:	ab 07       	cpc	r26, r27
 6ee:	b0 e8       	ldi	r27, 0x80	; 128
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <__divsf3_pse+0x56>
 6f2:	bb 0b       	sbc	r27, r27
 6f4:	80 2d       	mov	r24, r0
 6f6:	bf 01       	movw	r22, r30
 6f8:	ff 27       	eor	r31, r31
 6fa:	93 58       	subi	r25, 0x83	; 131
 6fc:	5f 4f       	sbci	r21, 0xFF	; 255
 6fe:	2a f0       	brmi	.+10     	; 0x70a <__divsf3_pse+0x6c>
 700:	9e 3f       	cpi	r25, 0xFE	; 254
 702:	51 05       	cpc	r21, r1
 704:	68 f0       	brcs	.+26     	; 0x720 <__divsf3_pse+0x82>
 706:	92 c0       	rjmp	.+292    	; 0x82c <__fp_inf>
 708:	dc c0       	rjmp	.+440    	; 0x8c2 <__fp_szero>
 70a:	5f 3f       	cpi	r21, 0xFF	; 255
 70c:	ec f3       	brlt	.-6      	; 0x708 <__divsf3_pse+0x6a>
 70e:	98 3e       	cpi	r25, 0xE8	; 232
 710:	dc f3       	brlt	.-10     	; 0x708 <__divsf3_pse+0x6a>
 712:	86 95       	lsr	r24
 714:	77 95       	ror	r23
 716:	67 95       	ror	r22
 718:	b7 95       	ror	r27
 71a:	f7 95       	ror	r31
 71c:	9f 5f       	subi	r25, 0xFF	; 255
 71e:	c9 f7       	brne	.-14     	; 0x712 <__divsf3_pse+0x74>
 720:	88 0f       	add	r24, r24
 722:	91 1d       	adc	r25, r1
 724:	96 95       	lsr	r25
 726:	87 95       	ror	r24
 728:	97 f9       	bld	r25, 7
 72a:	08 95       	ret
 72c:	e1 e0       	ldi	r30, 0x01	; 1
 72e:	66 0f       	add	r22, r22
 730:	77 1f       	adc	r23, r23
 732:	88 1f       	adc	r24, r24
 734:	bb 1f       	adc	r27, r27
 736:	62 17       	cp	r22, r18
 738:	73 07       	cpc	r23, r19
 73a:	84 07       	cpc	r24, r20
 73c:	ba 07       	cpc	r27, r26
 73e:	20 f0       	brcs	.+8      	; 0x748 <__divsf3_pse+0xaa>
 740:	62 1b       	sub	r22, r18
 742:	73 0b       	sbc	r23, r19
 744:	84 0b       	sbc	r24, r20
 746:	ba 0b       	sbc	r27, r26
 748:	ee 1f       	adc	r30, r30
 74a:	88 f7       	brcc	.-30     	; 0x72e <__divsf3_pse+0x90>
 74c:	e0 95       	com	r30
 74e:	08 95       	ret

00000750 <__fixsfsi>:
 750:	04 d0       	rcall	.+8      	; 0x75a <__fixunssfsi>
 752:	68 94       	set
 754:	b1 11       	cpse	r27, r1
 756:	b5 c0       	rjmp	.+362    	; 0x8c2 <__fp_szero>
 758:	08 95       	ret

0000075a <__fixunssfsi>:
 75a:	98 d0       	rcall	.+304    	; 0x88c <__fp_splitA>
 75c:	88 f0       	brcs	.+34     	; 0x780 <__fixunssfsi+0x26>
 75e:	9f 57       	subi	r25, 0x7F	; 127
 760:	90 f0       	brcs	.+36     	; 0x786 <__fixunssfsi+0x2c>
 762:	b9 2f       	mov	r27, r25
 764:	99 27       	eor	r25, r25
 766:	b7 51       	subi	r27, 0x17	; 23
 768:	a0 f0       	brcs	.+40     	; 0x792 <__fixunssfsi+0x38>
 76a:	d1 f0       	breq	.+52     	; 0x7a0 <__fixunssfsi+0x46>
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	1a f0       	brmi	.+6      	; 0x77c <__fixunssfsi+0x22>
 776:	ba 95       	dec	r27
 778:	c9 f7       	brne	.-14     	; 0x76c <__fixunssfsi+0x12>
 77a:	12 c0       	rjmp	.+36     	; 0x7a0 <__fixunssfsi+0x46>
 77c:	b1 30       	cpi	r27, 0x01	; 1
 77e:	81 f0       	breq	.+32     	; 0x7a0 <__fixunssfsi+0x46>
 780:	9f d0       	rcall	.+318    	; 0x8c0 <__fp_zero>
 782:	b1 e0       	ldi	r27, 0x01	; 1
 784:	08 95       	ret
 786:	9c c0       	rjmp	.+312    	; 0x8c0 <__fp_zero>
 788:	67 2f       	mov	r22, r23
 78a:	78 2f       	mov	r23, r24
 78c:	88 27       	eor	r24, r24
 78e:	b8 5f       	subi	r27, 0xF8	; 248
 790:	39 f0       	breq	.+14     	; 0x7a0 <__fixunssfsi+0x46>
 792:	b9 3f       	cpi	r27, 0xF9	; 249
 794:	cc f3       	brlt	.-14     	; 0x788 <__fixunssfsi+0x2e>
 796:	86 95       	lsr	r24
 798:	77 95       	ror	r23
 79a:	67 95       	ror	r22
 79c:	b3 95       	inc	r27
 79e:	d9 f7       	brne	.-10     	; 0x796 <__fixunssfsi+0x3c>
 7a0:	3e f4       	brtc	.+14     	; 0x7b0 <__fixunssfsi+0x56>
 7a2:	90 95       	com	r25
 7a4:	80 95       	com	r24
 7a6:	70 95       	com	r23
 7a8:	61 95       	neg	r22
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	08 95       	ret

000007b2 <__floatunsisf>:
 7b2:	e8 94       	clt
 7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <__floatsisf+0x12>

000007b6 <__floatsisf>:
 7b6:	97 fb       	bst	r25, 7
 7b8:	3e f4       	brtc	.+14     	; 0x7c8 <__floatsisf+0x12>
 7ba:	90 95       	com	r25
 7bc:	80 95       	com	r24
 7be:	70 95       	com	r23
 7c0:	61 95       	neg	r22
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	99 23       	and	r25, r25
 7ca:	a9 f0       	breq	.+42     	; 0x7f6 <__floatsisf+0x40>
 7cc:	f9 2f       	mov	r31, r25
 7ce:	96 e9       	ldi	r25, 0x96	; 150
 7d0:	bb 27       	eor	r27, r27
 7d2:	93 95       	inc	r25
 7d4:	f6 95       	lsr	r31
 7d6:	87 95       	ror	r24
 7d8:	77 95       	ror	r23
 7da:	67 95       	ror	r22
 7dc:	b7 95       	ror	r27
 7de:	f1 11       	cpse	r31, r1
 7e0:	f8 cf       	rjmp	.-16     	; 0x7d2 <__floatsisf+0x1c>
 7e2:	fa f4       	brpl	.+62     	; 0x822 <__floatsisf+0x6c>
 7e4:	bb 0f       	add	r27, r27
 7e6:	11 f4       	brne	.+4      	; 0x7ec <__floatsisf+0x36>
 7e8:	60 ff       	sbrs	r22, 0
 7ea:	1b c0       	rjmp	.+54     	; 0x822 <__floatsisf+0x6c>
 7ec:	6f 5f       	subi	r22, 0xFF	; 255
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f 4f       	sbci	r24, 0xFF	; 255
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	16 c0       	rjmp	.+44     	; 0x822 <__floatsisf+0x6c>
 7f6:	88 23       	and	r24, r24
 7f8:	11 f0       	breq	.+4      	; 0x7fe <__floatsisf+0x48>
 7fa:	96 e9       	ldi	r25, 0x96	; 150
 7fc:	11 c0       	rjmp	.+34     	; 0x820 <__floatsisf+0x6a>
 7fe:	77 23       	and	r23, r23
 800:	21 f0       	breq	.+8      	; 0x80a <__floatsisf+0x54>
 802:	9e e8       	ldi	r25, 0x8E	; 142
 804:	87 2f       	mov	r24, r23
 806:	76 2f       	mov	r23, r22
 808:	05 c0       	rjmp	.+10     	; 0x814 <__floatsisf+0x5e>
 80a:	66 23       	and	r22, r22
 80c:	71 f0       	breq	.+28     	; 0x82a <__floatsisf+0x74>
 80e:	96 e8       	ldi	r25, 0x86	; 134
 810:	86 2f       	mov	r24, r22
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	2a f0       	brmi	.+10     	; 0x822 <__floatsisf+0x6c>
 818:	9a 95       	dec	r25
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	da f7       	brpl	.-10     	; 0x818 <__floatsisf+0x62>
 822:	88 0f       	add	r24, r24
 824:	96 95       	lsr	r25
 826:	87 95       	ror	r24
 828:	97 f9       	bld	r25, 7
 82a:	08 95       	ret

0000082c <__fp_inf>:
 82c:	97 f9       	bld	r25, 7
 82e:	9f 67       	ori	r25, 0x7F	; 127
 830:	80 e8       	ldi	r24, 0x80	; 128
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	08 95       	ret

00000838 <__fp_nan>:
 838:	9f ef       	ldi	r25, 0xFF	; 255
 83a:	80 ec       	ldi	r24, 0xC0	; 192
 83c:	08 95       	ret

0000083e <__fp_pscA>:
 83e:	00 24       	eor	r0, r0
 840:	0a 94       	dec	r0
 842:	16 16       	cp	r1, r22
 844:	17 06       	cpc	r1, r23
 846:	18 06       	cpc	r1, r24
 848:	09 06       	cpc	r0, r25
 84a:	08 95       	ret

0000084c <__fp_pscB>:
 84c:	00 24       	eor	r0, r0
 84e:	0a 94       	dec	r0
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	05 06       	cpc	r0, r21
 858:	08 95       	ret

0000085a <__fp_round>:
 85a:	09 2e       	mov	r0, r25
 85c:	03 94       	inc	r0
 85e:	00 0c       	add	r0, r0
 860:	11 f4       	brne	.+4      	; 0x866 <__fp_round+0xc>
 862:	88 23       	and	r24, r24
 864:	52 f0       	brmi	.+20     	; 0x87a <__fp_round+0x20>
 866:	bb 0f       	add	r27, r27
 868:	40 f4       	brcc	.+16     	; 0x87a <__fp_round+0x20>
 86a:	bf 2b       	or	r27, r31
 86c:	11 f4       	brne	.+4      	; 0x872 <__fp_round+0x18>
 86e:	60 ff       	sbrs	r22, 0
 870:	04 c0       	rjmp	.+8      	; 0x87a <__fp_round+0x20>
 872:	6f 5f       	subi	r22, 0xFF	; 255
 874:	7f 4f       	sbci	r23, 0xFF	; 255
 876:	8f 4f       	sbci	r24, 0xFF	; 255
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	08 95       	ret

0000087c <__fp_split3>:
 87c:	57 fd       	sbrc	r21, 7
 87e:	90 58       	subi	r25, 0x80	; 128
 880:	44 0f       	add	r20, r20
 882:	55 1f       	adc	r21, r21
 884:	59 f0       	breq	.+22     	; 0x89c <__fp_splitA+0x10>
 886:	5f 3f       	cpi	r21, 0xFF	; 255
 888:	71 f0       	breq	.+28     	; 0x8a6 <__fp_splitA+0x1a>
 88a:	47 95       	ror	r20

0000088c <__fp_splitA>:
 88c:	88 0f       	add	r24, r24
 88e:	97 fb       	bst	r25, 7
 890:	99 1f       	adc	r25, r25
 892:	61 f0       	breq	.+24     	; 0x8ac <__fp_splitA+0x20>
 894:	9f 3f       	cpi	r25, 0xFF	; 255
 896:	79 f0       	breq	.+30     	; 0x8b6 <__fp_splitA+0x2a>
 898:	87 95       	ror	r24
 89a:	08 95       	ret
 89c:	12 16       	cp	r1, r18
 89e:	13 06       	cpc	r1, r19
 8a0:	14 06       	cpc	r1, r20
 8a2:	55 1f       	adc	r21, r21
 8a4:	f2 cf       	rjmp	.-28     	; 0x88a <__fp_split3+0xe>
 8a6:	46 95       	lsr	r20
 8a8:	f1 df       	rcall	.-30     	; 0x88c <__fp_splitA>
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <__fp_splitA+0x30>
 8ac:	16 16       	cp	r1, r22
 8ae:	17 06       	cpc	r1, r23
 8b0:	18 06       	cpc	r1, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	f1 cf       	rjmp	.-30     	; 0x898 <__fp_splitA+0xc>
 8b6:	86 95       	lsr	r24
 8b8:	71 05       	cpc	r23, r1
 8ba:	61 05       	cpc	r22, r1
 8bc:	08 94       	sec
 8be:	08 95       	ret

000008c0 <__fp_zero>:
 8c0:	e8 94       	clt

000008c2 <__fp_szero>:
 8c2:	bb 27       	eor	r27, r27
 8c4:	66 27       	eor	r22, r22
 8c6:	77 27       	eor	r23, r23
 8c8:	cb 01       	movw	r24, r22
 8ca:	97 f9       	bld	r25, 7
 8cc:	08 95       	ret

000008ce <__gesf2>:
 8ce:	66 d0       	rcall	.+204    	; 0x99c <__fp_cmp>
 8d0:	08 f4       	brcc	.+2      	; 0x8d4 <__gesf2+0x6>
 8d2:	8f ef       	ldi	r24, 0xFF	; 255
 8d4:	08 95       	ret

000008d6 <__mulsf3>:
 8d6:	0b d0       	rcall	.+22     	; 0x8ee <__mulsf3x>
 8d8:	c0 cf       	rjmp	.-128    	; 0x85a <__fp_round>
 8da:	b1 df       	rcall	.-158    	; 0x83e <__fp_pscA>
 8dc:	28 f0       	brcs	.+10     	; 0x8e8 <__mulsf3+0x12>
 8de:	b6 df       	rcall	.-148    	; 0x84c <__fp_pscB>
 8e0:	18 f0       	brcs	.+6      	; 0x8e8 <__mulsf3+0x12>
 8e2:	95 23       	and	r25, r21
 8e4:	09 f0       	breq	.+2      	; 0x8e8 <__mulsf3+0x12>
 8e6:	a2 cf       	rjmp	.-188    	; 0x82c <__fp_inf>
 8e8:	a7 cf       	rjmp	.-178    	; 0x838 <__fp_nan>
 8ea:	11 24       	eor	r1, r1
 8ec:	ea cf       	rjmp	.-44     	; 0x8c2 <__fp_szero>

000008ee <__mulsf3x>:
 8ee:	c6 df       	rcall	.-116    	; 0x87c <__fp_split3>
 8f0:	a0 f3       	brcs	.-24     	; 0x8da <__mulsf3+0x4>

000008f2 <__mulsf3_pse>:
 8f2:	95 9f       	mul	r25, r21
 8f4:	d1 f3       	breq	.-12     	; 0x8ea <__mulsf3+0x14>
 8f6:	95 0f       	add	r25, r21
 8f8:	50 e0       	ldi	r21, 0x00	; 0
 8fa:	55 1f       	adc	r21, r21
 8fc:	62 9f       	mul	r22, r18
 8fe:	f0 01       	movw	r30, r0
 900:	72 9f       	mul	r23, r18
 902:	bb 27       	eor	r27, r27
 904:	f0 0d       	add	r31, r0
 906:	b1 1d       	adc	r27, r1
 908:	63 9f       	mul	r22, r19
 90a:	aa 27       	eor	r26, r26
 90c:	f0 0d       	add	r31, r0
 90e:	b1 1d       	adc	r27, r1
 910:	aa 1f       	adc	r26, r26
 912:	64 9f       	mul	r22, r20
 914:	66 27       	eor	r22, r22
 916:	b0 0d       	add	r27, r0
 918:	a1 1d       	adc	r26, r1
 91a:	66 1f       	adc	r22, r22
 91c:	82 9f       	mul	r24, r18
 91e:	22 27       	eor	r18, r18
 920:	b0 0d       	add	r27, r0
 922:	a1 1d       	adc	r26, r1
 924:	62 1f       	adc	r22, r18
 926:	73 9f       	mul	r23, r19
 928:	b0 0d       	add	r27, r0
 92a:	a1 1d       	adc	r26, r1
 92c:	62 1f       	adc	r22, r18
 92e:	83 9f       	mul	r24, r19
 930:	a0 0d       	add	r26, r0
 932:	61 1d       	adc	r22, r1
 934:	22 1f       	adc	r18, r18
 936:	74 9f       	mul	r23, r20
 938:	33 27       	eor	r19, r19
 93a:	a0 0d       	add	r26, r0
 93c:	61 1d       	adc	r22, r1
 93e:	23 1f       	adc	r18, r19
 940:	84 9f       	mul	r24, r20
 942:	60 0d       	add	r22, r0
 944:	21 1d       	adc	r18, r1
 946:	82 2f       	mov	r24, r18
 948:	76 2f       	mov	r23, r22
 94a:	6a 2f       	mov	r22, r26
 94c:	11 24       	eor	r1, r1
 94e:	9f 57       	subi	r25, 0x7F	; 127
 950:	50 40       	sbci	r21, 0x00	; 0
 952:	8a f0       	brmi	.+34     	; 0x976 <__mulsf3_pse+0x84>
 954:	e1 f0       	breq	.+56     	; 0x98e <__mulsf3_pse+0x9c>
 956:	88 23       	and	r24, r24
 958:	4a f0       	brmi	.+18     	; 0x96c <__mulsf3_pse+0x7a>
 95a:	ee 0f       	add	r30, r30
 95c:	ff 1f       	adc	r31, r31
 95e:	bb 1f       	adc	r27, r27
 960:	66 1f       	adc	r22, r22
 962:	77 1f       	adc	r23, r23
 964:	88 1f       	adc	r24, r24
 966:	91 50       	subi	r25, 0x01	; 1
 968:	50 40       	sbci	r21, 0x00	; 0
 96a:	a9 f7       	brne	.-22     	; 0x956 <__mulsf3_pse+0x64>
 96c:	9e 3f       	cpi	r25, 0xFE	; 254
 96e:	51 05       	cpc	r21, r1
 970:	70 f0       	brcs	.+28     	; 0x98e <__mulsf3_pse+0x9c>
 972:	5c cf       	rjmp	.-328    	; 0x82c <__fp_inf>
 974:	a6 cf       	rjmp	.-180    	; 0x8c2 <__fp_szero>
 976:	5f 3f       	cpi	r21, 0xFF	; 255
 978:	ec f3       	brlt	.-6      	; 0x974 <__mulsf3_pse+0x82>
 97a:	98 3e       	cpi	r25, 0xE8	; 232
 97c:	dc f3       	brlt	.-10     	; 0x974 <__mulsf3_pse+0x82>
 97e:	86 95       	lsr	r24
 980:	77 95       	ror	r23
 982:	67 95       	ror	r22
 984:	b7 95       	ror	r27
 986:	f7 95       	ror	r31
 988:	e7 95       	ror	r30
 98a:	9f 5f       	subi	r25, 0xFF	; 255
 98c:	c1 f7       	brne	.-16     	; 0x97e <__mulsf3_pse+0x8c>
 98e:	fe 2b       	or	r31, r30
 990:	88 0f       	add	r24, r24
 992:	91 1d       	adc	r25, r1
 994:	96 95       	lsr	r25
 996:	87 95       	ror	r24
 998:	97 f9       	bld	r25, 7
 99a:	08 95       	ret

0000099c <__fp_cmp>:
 99c:	99 0f       	add	r25, r25
 99e:	00 08       	sbc	r0, r0
 9a0:	55 0f       	add	r21, r21
 9a2:	aa 0b       	sbc	r26, r26
 9a4:	e0 e8       	ldi	r30, 0x80	; 128
 9a6:	fe ef       	ldi	r31, 0xFE	; 254
 9a8:	16 16       	cp	r1, r22
 9aa:	17 06       	cpc	r1, r23
 9ac:	e8 07       	cpc	r30, r24
 9ae:	f9 07       	cpc	r31, r25
 9b0:	c0 f0       	brcs	.+48     	; 0x9e2 <__fp_cmp+0x46>
 9b2:	12 16       	cp	r1, r18
 9b4:	13 06       	cpc	r1, r19
 9b6:	e4 07       	cpc	r30, r20
 9b8:	f5 07       	cpc	r31, r21
 9ba:	98 f0       	brcs	.+38     	; 0x9e2 <__fp_cmp+0x46>
 9bc:	62 1b       	sub	r22, r18
 9be:	73 0b       	sbc	r23, r19
 9c0:	84 0b       	sbc	r24, r20
 9c2:	95 0b       	sbc	r25, r21
 9c4:	39 f4       	brne	.+14     	; 0x9d4 <__fp_cmp+0x38>
 9c6:	0a 26       	eor	r0, r26
 9c8:	61 f0       	breq	.+24     	; 0x9e2 <__fp_cmp+0x46>
 9ca:	23 2b       	or	r18, r19
 9cc:	24 2b       	or	r18, r20
 9ce:	25 2b       	or	r18, r21
 9d0:	21 f4       	brne	.+8      	; 0x9da <__fp_cmp+0x3e>
 9d2:	08 95       	ret
 9d4:	0a 26       	eor	r0, r26
 9d6:	09 f4       	brne	.+2      	; 0x9da <__fp_cmp+0x3e>
 9d8:	a1 40       	sbci	r26, 0x01	; 1
 9da:	a6 95       	lsr	r26
 9dc:	8f ef       	ldi	r24, 0xFF	; 255
 9de:	81 1d       	adc	r24, r1
 9e0:	81 1d       	adc	r24, r1
 9e2:	08 95       	ret

000009e4 <__divmodhi4>:
 9e4:	97 fb       	bst	r25, 7
 9e6:	07 2e       	mov	r0, r23
 9e8:	16 f4       	brtc	.+4      	; 0x9ee <__divmodhi4+0xa>
 9ea:	00 94       	com	r0
 9ec:	06 d0       	rcall	.+12     	; 0x9fa <__divmodhi4_neg1>
 9ee:	77 fd       	sbrc	r23, 7
 9f0:	08 d0       	rcall	.+16     	; 0xa02 <__divmodhi4_neg2>
 9f2:	0b d0       	rcall	.+22     	; 0xa0a <__udivmodhi4>
 9f4:	07 fc       	sbrc	r0, 7
 9f6:	05 d0       	rcall	.+10     	; 0xa02 <__divmodhi4_neg2>
 9f8:	3e f4       	brtc	.+14     	; 0xa08 <__divmodhi4_exit>

000009fa <__divmodhi4_neg1>:
 9fa:	90 95       	com	r25
 9fc:	81 95       	neg	r24
 9fe:	9f 4f       	sbci	r25, 0xFF	; 255
 a00:	08 95       	ret

00000a02 <__divmodhi4_neg2>:
 a02:	70 95       	com	r23
 a04:	61 95       	neg	r22
 a06:	7f 4f       	sbci	r23, 0xFF	; 255

00000a08 <__divmodhi4_exit>:
 a08:	08 95       	ret

00000a0a <__udivmodhi4>:
 a0a:	aa 1b       	sub	r26, r26
 a0c:	bb 1b       	sub	r27, r27
 a0e:	51 e1       	ldi	r21, 0x11	; 17
 a10:	07 c0       	rjmp	.+14     	; 0xa20 <__udivmodhi4_ep>

00000a12 <__udivmodhi4_loop>:
 a12:	aa 1f       	adc	r26, r26
 a14:	bb 1f       	adc	r27, r27
 a16:	a6 17       	cp	r26, r22
 a18:	b7 07       	cpc	r27, r23
 a1a:	10 f0       	brcs	.+4      	; 0xa20 <__udivmodhi4_ep>
 a1c:	a6 1b       	sub	r26, r22
 a1e:	b7 0b       	sbc	r27, r23

00000a20 <__udivmodhi4_ep>:
 a20:	88 1f       	adc	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	5a 95       	dec	r21
 a26:	a9 f7       	brne	.-22     	; 0xa12 <__udivmodhi4_loop>
 a28:	80 95       	com	r24
 a2a:	90 95       	com	r25
 a2c:	bc 01       	movw	r22, r24
 a2e:	cd 01       	movw	r24, r26
 a30:	08 95       	ret

00000a32 <do_rand>:
 a32:	8f 92       	push	r8
 a34:	9f 92       	push	r9
 a36:	af 92       	push	r10
 a38:	bf 92       	push	r11
 a3a:	cf 92       	push	r12
 a3c:	df 92       	push	r13
 a3e:	ef 92       	push	r14
 a40:	ff 92       	push	r15
 a42:	cf 93       	push	r28
 a44:	df 93       	push	r29
 a46:	ec 01       	movw	r28, r24
 a48:	68 81       	ld	r22, Y
 a4a:	79 81       	ldd	r23, Y+1	; 0x01
 a4c:	8a 81       	ldd	r24, Y+2	; 0x02
 a4e:	9b 81       	ldd	r25, Y+3	; 0x03
 a50:	61 15       	cp	r22, r1
 a52:	71 05       	cpc	r23, r1
 a54:	81 05       	cpc	r24, r1
 a56:	91 05       	cpc	r25, r1
 a58:	21 f4       	brne	.+8      	; 0xa62 <do_rand+0x30>
 a5a:	64 e2       	ldi	r22, 0x24	; 36
 a5c:	79 ed       	ldi	r23, 0xD9	; 217
 a5e:	8b e5       	ldi	r24, 0x5B	; 91
 a60:	97 e0       	ldi	r25, 0x07	; 7
 a62:	2d e1       	ldi	r18, 0x1D	; 29
 a64:	33 ef       	ldi	r19, 0xF3	; 243
 a66:	41 e0       	ldi	r20, 0x01	; 1
 a68:	50 e0       	ldi	r21, 0x00	; 0
 a6a:	38 d0       	rcall	.+112    	; 0xadc <__divmodsi4>
 a6c:	49 01       	movw	r8, r18
 a6e:	5a 01       	movw	r10, r20
 a70:	9b 01       	movw	r18, r22
 a72:	ac 01       	movw	r20, r24
 a74:	a7 ea       	ldi	r26, 0xA7	; 167
 a76:	b1 e4       	ldi	r27, 0x41	; 65
 a78:	4d d0       	rcall	.+154    	; 0xb14 <__muluhisi3>
 a7a:	6b 01       	movw	r12, r22
 a7c:	7c 01       	movw	r14, r24
 a7e:	ac ee       	ldi	r26, 0xEC	; 236
 a80:	b4 ef       	ldi	r27, 0xF4	; 244
 a82:	a5 01       	movw	r20, r10
 a84:	94 01       	movw	r18, r8
 a86:	52 d0       	rcall	.+164    	; 0xb2c <__mulohisi3>
 a88:	dc 01       	movw	r26, r24
 a8a:	cb 01       	movw	r24, r22
 a8c:	8c 0d       	add	r24, r12
 a8e:	9d 1d       	adc	r25, r13
 a90:	ae 1d       	adc	r26, r14
 a92:	bf 1d       	adc	r27, r15
 a94:	b7 ff       	sbrs	r27, 7
 a96:	03 c0       	rjmp	.+6      	; 0xa9e <do_rand+0x6c>
 a98:	01 97       	sbiw	r24, 0x01	; 1
 a9a:	a1 09       	sbc	r26, r1
 a9c:	b0 48       	sbci	r27, 0x80	; 128
 a9e:	88 83       	st	Y, r24
 aa0:	99 83       	std	Y+1, r25	; 0x01
 aa2:	aa 83       	std	Y+2, r26	; 0x02
 aa4:	bb 83       	std	Y+3, r27	; 0x03
 aa6:	9f 77       	andi	r25, 0x7F	; 127
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	ff 90       	pop	r15
 aae:	ef 90       	pop	r14
 ab0:	df 90       	pop	r13
 ab2:	cf 90       	pop	r12
 ab4:	bf 90       	pop	r11
 ab6:	af 90       	pop	r10
 ab8:	9f 90       	pop	r9
 aba:	8f 90       	pop	r8
 abc:	08 95       	ret

00000abe <rand_r>:
 abe:	b9 cf       	rjmp	.-142    	; 0xa32 <do_rand>

00000ac0 <rand>:
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	91 e0       	ldi	r25, 0x01	; 1
 ac4:	b6 cf       	rjmp	.-148    	; 0xa32 <do_rand>

00000ac6 <srand>:
 ac6:	a0 e0       	ldi	r26, 0x00	; 0
 ac8:	b0 e0       	ldi	r27, 0x00	; 0
 aca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 ace:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 ad2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 ad6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 ada:	08 95       	ret

00000adc <__divmodsi4>:
 adc:	05 2e       	mov	r0, r21
 ade:	97 fb       	bst	r25, 7
 ae0:	16 f4       	brtc	.+4      	; 0xae6 <__divmodsi4+0xa>
 ae2:	00 94       	com	r0
 ae4:	0f d0       	rcall	.+30     	; 0xb04 <__negsi2>
 ae6:	57 fd       	sbrc	r21, 7
 ae8:	05 d0       	rcall	.+10     	; 0xaf4 <__divmodsi4_neg2>
 aea:	24 d0       	rcall	.+72     	; 0xb34 <__udivmodsi4>
 aec:	07 fc       	sbrc	r0, 7
 aee:	02 d0       	rcall	.+4      	; 0xaf4 <__divmodsi4_neg2>
 af0:	46 f4       	brtc	.+16     	; 0xb02 <__divmodsi4_exit>
 af2:	08 c0       	rjmp	.+16     	; 0xb04 <__negsi2>

00000af4 <__divmodsi4_neg2>:
 af4:	50 95       	com	r21
 af6:	40 95       	com	r20
 af8:	30 95       	com	r19
 afa:	21 95       	neg	r18
 afc:	3f 4f       	sbci	r19, 0xFF	; 255
 afe:	4f 4f       	sbci	r20, 0xFF	; 255
 b00:	5f 4f       	sbci	r21, 0xFF	; 255

00000b02 <__divmodsi4_exit>:
 b02:	08 95       	ret

00000b04 <__negsi2>:
 b04:	90 95       	com	r25
 b06:	80 95       	com	r24
 b08:	70 95       	com	r23
 b0a:	61 95       	neg	r22
 b0c:	7f 4f       	sbci	r23, 0xFF	; 255
 b0e:	8f 4f       	sbci	r24, 0xFF	; 255
 b10:	9f 4f       	sbci	r25, 0xFF	; 255
 b12:	08 95       	ret

00000b14 <__muluhisi3>:
 b14:	31 d0       	rcall	.+98     	; 0xb78 <__umulhisi3>
 b16:	a5 9f       	mul	r26, r21
 b18:	90 0d       	add	r25, r0
 b1a:	b4 9f       	mul	r27, r20
 b1c:	90 0d       	add	r25, r0
 b1e:	a4 9f       	mul	r26, r20
 b20:	80 0d       	add	r24, r0
 b22:	91 1d       	adc	r25, r1
 b24:	11 24       	eor	r1, r1
 b26:	08 95       	ret

00000b28 <__mulshisi3>:
 b28:	b7 ff       	sbrs	r27, 7
 b2a:	f4 cf       	rjmp	.-24     	; 0xb14 <__muluhisi3>

00000b2c <__mulohisi3>:
 b2c:	f3 df       	rcall	.-26     	; 0xb14 <__muluhisi3>
 b2e:	82 1b       	sub	r24, r18
 b30:	93 0b       	sbc	r25, r19
 b32:	08 95       	ret

00000b34 <__udivmodsi4>:
 b34:	a1 e2       	ldi	r26, 0x21	; 33
 b36:	1a 2e       	mov	r1, r26
 b38:	aa 1b       	sub	r26, r26
 b3a:	bb 1b       	sub	r27, r27
 b3c:	fd 01       	movw	r30, r26
 b3e:	0d c0       	rjmp	.+26     	; 0xb5a <__udivmodsi4_ep>

00000b40 <__udivmodsi4_loop>:
 b40:	aa 1f       	adc	r26, r26
 b42:	bb 1f       	adc	r27, r27
 b44:	ee 1f       	adc	r30, r30
 b46:	ff 1f       	adc	r31, r31
 b48:	a2 17       	cp	r26, r18
 b4a:	b3 07       	cpc	r27, r19
 b4c:	e4 07       	cpc	r30, r20
 b4e:	f5 07       	cpc	r31, r21
 b50:	20 f0       	brcs	.+8      	; 0xb5a <__udivmodsi4_ep>
 b52:	a2 1b       	sub	r26, r18
 b54:	b3 0b       	sbc	r27, r19
 b56:	e4 0b       	sbc	r30, r20
 b58:	f5 0b       	sbc	r31, r21

00000b5a <__udivmodsi4_ep>:
 b5a:	66 1f       	adc	r22, r22
 b5c:	77 1f       	adc	r23, r23
 b5e:	88 1f       	adc	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	1a 94       	dec	r1
 b64:	69 f7       	brne	.-38     	; 0xb40 <__udivmodsi4_loop>
 b66:	60 95       	com	r22
 b68:	70 95       	com	r23
 b6a:	80 95       	com	r24
 b6c:	90 95       	com	r25
 b6e:	9b 01       	movw	r18, r22
 b70:	ac 01       	movw	r20, r24
 b72:	bd 01       	movw	r22, r26
 b74:	cf 01       	movw	r24, r30
 b76:	08 95       	ret

00000b78 <__umulhisi3>:
 b78:	a2 9f       	mul	r26, r18
 b7a:	b0 01       	movw	r22, r0
 b7c:	b3 9f       	mul	r27, r19
 b7e:	c0 01       	movw	r24, r0
 b80:	a3 9f       	mul	r26, r19
 b82:	70 0d       	add	r23, r0
 b84:	81 1d       	adc	r24, r1
 b86:	11 24       	eor	r1, r1
 b88:	91 1d       	adc	r25, r1
 b8a:	b2 9f       	mul	r27, r18
 b8c:	70 0d       	add	r23, r0
 b8e:	81 1d       	adc	r24, r1
 b90:	11 24       	eor	r1, r1
 b92:	91 1d       	adc	r25, r1
 b94:	08 95       	ret

00000b96 <_exit>:
 b96:	f8 94       	cli

00000b98 <__stop_program>:
 b98:	ff cf       	rjmp	.-2      	; 0xb98 <__stop_program>
