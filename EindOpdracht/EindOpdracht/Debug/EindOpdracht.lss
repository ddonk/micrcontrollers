
EindOpdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  000011e6  0000127a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080019c  0080019c  00001316  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001705  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df0  00000000  00000000  00002bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b41  00000000  00000000  000039ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00004530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e5  00000000  00000000  00004880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fa  00000000  00000000  00005065  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000595f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	12 c3       	rjmp	.+1572   	; 0x656 <__vector_12>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ee       	ldi	r30, 0xE6	; 230
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 39       	cpi	r26, 0x9C	; 156
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	ac e9       	ldi	r26, 0x9C	; 156
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3a       	cpi	r26, 0xA9	; 169
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	4e d3       	rcall	.+1692   	; 0x760 <main>
      c4:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <switch_channel>:
}

// This function changes the channel of the accelerometer.
static void switch_channel(){
	static int channel = -1;
	if (channel == -1){
      ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channel.1627>
      ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channel.1627+0x1>
      d2:	8f 3f       	cpi	r24, 0xFF	; 255
      d4:	2f ef       	ldi	r18, 0xFF	; 255
      d6:	92 07       	cpc	r25, r18
      d8:	39 f4       	brne	.+14     	; 0xe8 <switch_channel+0x1e>
		channel = 3;
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
      e6:	0d c0       	rjmp	.+26     	; 0x102 <switch_channel+0x38>
		} else {
		channel++;
      e8:	01 96       	adiw	r24, 0x01	; 1
      ea:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
		if (channel > 5){
      f2:	06 97       	sbiw	r24, 0x06	; 6
      f4:	34 f0       	brlt	.+12     	; 0x102 <switch_channel+0x38>
			channel = 3;
      f6:	83 e0       	ldi	r24, 0x03	; 3
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
		}
	}
	// Clearing
	int temporary =  0b11000000;
	temporary |= channel;
     102:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channel.1627>
     106:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channel.1627+0x1>
     10a:	80 6c       	ori	r24, 0xC0	; 192
	
	// Adding
	ADMUX = temporary;
     10c:	87 b9       	out	0x07, r24	; 7
     10e:	08 95       	ret

00000110 <translate_to_geforce>:
static int translate_to_geforce(int raw){
	//float fraction =  ((float)raw - (1170.0 / 2.0)) / 1170.0;
	//float scaled = fraction * 30000.0;
	//return (int) scaled;
	return raw;
}
     110:	08 95       	ret

00000112 <read_acc_direction>:
	
	return measurment;
}

// Reads one channel at a time.
static void read_acc_direction(int* ptr){
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	ec 01       	movw	r28, r24
	switch_channel();
     118:	d8 df       	rcall	.-80     	; 0xca <switch_channel>
	ADCSRA |= BIT(6);
     11a:	86 b1       	in	r24, 0x06	; 6
     11c:	80 64       	ori	r24, 0x40	; 64
     11e:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & BIT(6));
     120:	36 99       	sbic	0x06, 6	; 6
     122:	fe cf       	rjmp	.-4      	; 0x120 <read_acc_direction+0xe>
	int value = ADCL + (ADCH<<8);
     124:	24 b1       	in	r18, 0x04	; 4
     126:	85 b1       	in	r24, 0x05	; 5
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	98 2f       	mov	r25, r24
     12c:	88 27       	eor	r24, r24
	*ptr = translate_to_geforce(value);
     12e:	82 0f       	add	r24, r18
     130:	91 1d       	adc	r25, r1
     132:	ee df       	rcall	.-36     	; 0x110 <translate_to_geforce>
     134:	99 83       	std	Y+1, r25	; 0x01
     136:	88 83       	st	Y, r24
}
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <accelerometer_init>:
static void switch_channel();
static int translate_to_geforce(int raw);


void accelerometer_init(){
	DDRF = 0x00;				// Setting ADC pins to input.
     13e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	ADMUX = 0b11000000;			// AREF=VCC, result left adjusted, channel1 at pin PF1
     142:	80 ec       	ldi	r24, 0xC0	; 192
     144:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;		// ADC-enable, no interrupt, start, free running, division by 64
     146:	86 e8       	ldi	r24, 0x86	; 134
     148:	86 b9       	out	0x06, r24	; 6
     14a:	08 95       	ret

0000014c <accelerometer_read>:
}

// Reads the accelerometer.
accelerometer_measurment_t accelerometer_read(){
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	2c 97       	sbiw	r28, 0x0c	; 12
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
	accelerometer_measurment_t measurment;
	
	// Reading all values
	read_acc_direction(&measurment.x_geforce);
     160:	ce 01       	movw	r24, r28
     162:	07 96       	adiw	r24, 0x07	; 7
     164:	d6 df       	rcall	.-84     	; 0x112 <read_acc_direction>
	read_acc_direction(&measurment.y_geforce);
     166:	ce 01       	movw	r24, r28
     168:	09 96       	adiw	r24, 0x09	; 9
     16a:	d3 df       	rcall	.-90     	; 0x112 <read_acc_direction>
	read_acc_direction(&measurment.z_geforce);
     16c:	ce 01       	movw	r24, r28
     16e:	0b 96       	adiw	r24, 0x0b	; 11
     170:	d0 df       	rcall	.-96     	; 0x112 <read_acc_direction>
	
	return measurment;
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	fe 01       	movw	r30, r28
     176:	37 96       	adiw	r30, 0x07	; 7
     178:	de 01       	movw	r26, r28
     17a:	11 96       	adiw	r26, 0x01	; 1
     17c:	01 90       	ld	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	8a 95       	dec	r24
     182:	e1 f7       	brne	.-8      	; 0x17c <accelerometer_read+0x30>
     184:	29 81       	ldd	r18, Y+1	; 0x01
     186:	3a 81       	ldd	r19, Y+2	; 0x02
     188:	4b 81       	ldd	r20, Y+3	; 0x03
     18a:	5c 81       	ldd	r21, Y+4	; 0x04
     18c:	6d 81       	ldd	r22, Y+5	; 0x05
     18e:	7e 81       	ldd	r23, Y+6	; 0x06
}
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	2c 96       	adiw	r28, 0x0c	; 12
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	cd bf       	out	0x3d, r28	; 61
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <time_passed>:
			break;
		case BACKWARD:
			display_text("Go backward");
			break;
	}
}
     1a6:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <__data_end>
     1aa:	08 95       	ret

000001ac <wait>:
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <wait+0x16>
     1b2:	ef ec       	ldi	r30, 0xCF	; 207
     1b4:	f7 e0       	ldi	r31, 0x07	; 7
     1b6:	31 97       	sbiw	r30, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <wait+0xa>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <wait+0x10>
     1bc:	00 00       	nop
     1be:	2f 5f       	subi	r18, 0xFF	; 255
     1c0:	3f 4f       	sbci	r19, 0xFF	; 255
     1c2:	28 17       	cp	r18, r24
     1c4:	39 07       	cpc	r19, r25
     1c6:	ac f3       	brlt	.-22     	; 0x1b2 <wait+0x6>
     1c8:	08 95       	ret

000001ca <GameLogic_Init>:
     1ca:	21 d2       	rcall	.+1090   	; 0x60e <display_init>
     1cc:	80 e1       	ldi	r24, 0x10	; 16
     1ce:	97 e2       	ldi	r25, 0x27	; 39
     1d0:	ed df       	rcall	.-38     	; 0x1ac <wait>
     1d2:	b5 df       	rcall	.-150    	; 0x13e <accelerometer_init>
     1d4:	bb df       	rcall	.-138    	; 0x14c <accelerometer_read>
     1d6:	20 93 9d 01 	sts	0x019D, r18	; 0x80019d <TRESHOLD_MEASURMENT>
     1da:	30 93 9e 01 	sts	0x019E, r19	; 0x80019e <TRESHOLD_MEASURMENT+0x1>
     1de:	40 93 9f 01 	sts	0x019F, r20	; 0x80019f <TRESHOLD_MEASURMENT+0x2>
     1e2:	50 93 a0 01 	sts	0x01A0, r21	; 0x8001a0 <TRESHOLD_MEASURMENT+0x3>
     1e6:	60 93 a1 01 	sts	0x01A1, r22	; 0x8001a1 <TRESHOLD_MEASURMENT+0x4>
     1ea:	70 93 a2 01 	sts	0x01A2, r23	; 0x8001a2 <TRESHOLD_MEASURMENT+0x5>
     1ee:	83 e0       	ldi	r24, 0x03	; 3
     1f0:	08 95       	ret

000001f2 <randomNumber>:
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	62 97       	sbiw	r28, 0x12	; 18
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	f8 94       	cli
     208:	de bf       	out	0x3e, r29	; 62
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	cd bf       	out	0x3d, r28	; 61
     20e:	9e df       	rcall	.-196    	; 0x14c <accelerometer_read>
     210:	2d 87       	std	Y+13, r18	; 0x0d
     212:	3e 87       	std	Y+14, r19	; 0x0e
     214:	ed 84       	ldd	r14, Y+13	; 0x0d
     216:	fe 84       	ldd	r15, Y+14	; 0x0e
     218:	99 df       	rcall	.-206    	; 0x14c <accelerometer_read>
     21a:	49 87       	std	Y+9, r20	; 0x09
     21c:	5a 87       	std	Y+10, r21	; 0x0a
     21e:	89 85       	ldd	r24, Y+9	; 0x09
     220:	9a 85       	ldd	r25, Y+10	; 0x0a
     222:	e8 9e       	mul	r14, r24
     224:	80 01       	movw	r16, r0
     226:	e9 9e       	mul	r14, r25
     228:	10 0d       	add	r17, r0
     22a:	f8 9e       	mul	r15, r24
     22c:	10 0d       	add	r17, r0
     22e:	11 24       	eor	r1, r1
     230:	8d df       	rcall	.-230    	; 0x14c <accelerometer_read>
     232:	6d 83       	std	Y+5, r22	; 0x05
     234:	7e 83       	std	Y+6, r23	; 0x06
     236:	8d 81       	ldd	r24, Y+5	; 0x05
     238:	9e 81       	ldd	r25, Y+6	; 0x06
     23a:	9c 01       	movw	r18, r24
     23c:	02 9f       	mul	r16, r18
     23e:	c0 01       	movw	r24, r0
     240:	03 9f       	mul	r16, r19
     242:	90 0d       	add	r25, r0
     244:	12 9f       	mul	r17, r18
     246:	90 0d       	add	r25, r0
     248:	11 24       	eor	r1, r1
     24a:	88 d4       	rcall	.+2320   	; 0xb5c <srand>
     24c:	84 d4       	rcall	.+2312   	; 0xb56 <rand>
     24e:	66 e0       	ldi	r22, 0x06	; 6
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	13 d4       	rcall	.+2086   	; 0xa7a <__divmodhi4>
     254:	62 96       	adiw	r28, 0x12	; 18
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	ff 90       	pop	r15
     26a:	ef 90       	pop	r14
     26c:	08 95       	ret

0000026e <randomDirection>:
     26e:	c1 df       	rcall	.-126    	; 0x1f2 <randomNumber>
     270:	88 5f       	subi	r24, 0xF8	; 248
     272:	9e 4f       	sbci	r25, 0xFE	; 254
     274:	fc 01       	movw	r30, r24
     276:	80 81       	ld	r24, Z
     278:	08 95       	ret

0000027a <GameLogic_draw_hearts>:
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	1f 92       	push	r1
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	89 83       	std	Y+1, r24	; 0x01
     288:	ce 01       	movw	r24, r28
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	71 d1       	rcall	.+738    	; 0x570 <display_text>
     28e:	0f 90       	pop	r0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <GameLogic_Round>:

void GameLogic_Round()
{
     296:	8f 92       	push	r8
     298:	9f 92       	push	r9
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	ca 56       	subi	r28, 0x6A	; 106
     2b2:	d1 09       	sbc	r29, r1
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
	// Setup of handling
    DIRECTION dir = randomDirection();
     2be:	d7 df       	rcall	.-82     	; 0x26e <randomDirection>
     2c0:	18 2f       	mov	r17, r24
	set_timer(2000, time_passed);
     2c2:	63 ed       	ldi	r22, 0xD3	; 211
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	80 ed       	ldi	r24, 0xD0	; 208
     2c8:	97 e0       	ldi	r25, 0x07	; 7
     2ca:	fd d1       	rcall	.+1018   	; 0x6c6 <set_timer>
	reading = true;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
	//GameLogic_Draw_Dir(dir);
	display_clear();
	GameLogic_draw_hearts();
     2d2:	7e d1       	rcall	.+764    	; 0x5d0 <display_clear>
     2d4:	d2 df       	rcall	.-92     	; 0x27a <GameLogic_draw_hearts>

	// Starting handling
	while(reading) {
     2d6:	d1 c0       	rjmp	.+418    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		accelerometer_measurment_t measurement = accelerometer_read();
     2d8:	39 df       	rcall	.-398    	; 0x14c <accelerometer_read>
     2da:	a6 96       	adiw	r28, 0x26	; 38
     2dc:	2f af       	std	Y+63, r18	; 0x3f
     2de:	a6 97       	sbiw	r28, 0x26	; 38
     2e0:	a7 96       	adiw	r28, 0x27	; 39
     2e2:	3f af       	std	Y+63, r19	; 0x3f
     2e4:	a7 97       	sbiw	r28, 0x27	; 39
     2e6:	a8 96       	adiw	r28, 0x28	; 40
     2e8:	4f af       	std	Y+63, r20	; 0x3f
     2ea:	a8 97       	sbiw	r28, 0x28	; 40
     2ec:	a9 96       	adiw	r28, 0x29	; 41
     2ee:	5f af       	std	Y+63, r21	; 0x3f
     2f0:	a9 97       	sbiw	r28, 0x29	; 41
     2f2:	aa 96       	adiw	r28, 0x2a	; 42
     2f4:	6f af       	std	Y+63, r22	; 0x3f
     2f6:	aa 97       	sbiw	r28, 0x2a	; 42
     2f8:	ab 96       	adiw	r28, 0x2b	; 43
     2fa:	7f af       	std	Y+63, r23	; 0x3f
     2fc:	ab 97       	sbiw	r28, 0x2b	; 43
		display_set_cursor(0, 1);
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	50 d1       	rcall	.+672    	; 0x5a8 <display_set_cursor>
     308:	ab 96       	adiw	r28, 0x2b	; 43
		char debugout[100];
		sprintf(debugout, "%d;%d;%d,%d,%d", measurement.x_geforce, measurement.y_geforce, measurement.z_geforce, correctCount, totalCount);
     30a:	ae ac       	ldd	r10, Y+62	; 0x3e
     30c:	bf ac       	ldd	r11, Y+63	; 0x3f
     30e:	ab 97       	sbiw	r28, 0x2b	; 43
     310:	a9 96       	adiw	r28, 0x29	; 41
     312:	ce ac       	ldd	r12, Y+62	; 0x3e
     314:	df ac       	ldd	r13, Y+63	; 0x3f
     316:	a9 97       	sbiw	r28, 0x29	; 41
     318:	a7 96       	adiw	r28, 0x27	; 39
     31a:	ee ac       	ldd	r14, Y+62	; 0x3e
     31c:	ff ac       	ldd	r15, Y+63	; 0x3f
     31e:	a7 97       	sbiw	r28, 0x27	; 39
     320:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <totalCount+0x1>
     324:	8f 93       	push	r24
     326:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <totalCount>
     32a:	8f 93       	push	r24
     32c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <correctCount+0x1>
     330:	8f 93       	push	r24
     332:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <correctCount>
     336:	8f 93       	push	r24
     338:	bf 92       	push	r11
     33a:	af 92       	push	r10
     33c:	df 92       	push	r13
     33e:	cf 92       	push	r12
     340:	ff 92       	push	r15
     342:	ef 92       	push	r14
     344:	8e e5       	ldi	r24, 0x5E	; 94
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	9f 93       	push	r25
     34a:	8f 93       	push	r24
     34c:	ce 01       	movw	r24, r28
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	4c 01       	movw	r8, r24
     352:	9f 93       	push	r25
     354:	8f 93       	push	r24
     356:	0d d4       	rcall	.+2074   	; 0xb72 <sprintf>
		display_text(debugout);
     358:	c4 01       	movw	r24, r8
     35a:	0a d1       	rcall	.+532    	; 0x570 <display_text>
     35c:	0f b6       	in	r0, 0x3f	; 63
		switch (dir)
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	12 30       	cpi	r17, 0x02	; 2
     368:	a1 f1       	breq	.+104    	; 0x3d2 <GameLogic_Round+0x13c>
     36a:	28 f4       	brcc	.+10     	; 0x376 <GameLogic_Round+0xe0>
     36c:	11 23       	and	r17, r17
     36e:	59 f0       	breq	.+22     	; 0x386 <GameLogic_Round+0xf0>
     370:	11 30       	cpi	r17, 0x01	; 1
     372:	e1 f0       	breq	.+56     	; 0x3ac <GameLogic_Round+0x116>
     374:	76 c0       	rjmp	.+236    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     376:	14 30       	cpi	r17, 0x04	; 4
     378:	09 f4       	brne	.+2      	; 0x37c <GameLogic_Round+0xe6>
     37a:	50 c0       	rjmp	.+160    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     37c:	e8 f1       	brcs	.+122    	; 0x3f8 <GameLogic_Round+0x162>
     37e:	15 30       	cpi	r17, 0x05	; 5
     380:	09 f4       	brne	.+2      	; 0x384 <GameLogic_Round+0xee>
     382:	5e c0       	rjmp	.+188    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     384:	6e c0       	rjmp	.+220    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     386:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <TRESHOLD_MEASURMENT+0x4>
		{

			case UP:
				if(measurement.z_geforce <= TRESHOLD_MEASURMENT.z_geforce - MEASURMENT_OFSETT)
     38a:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <TRESHOLD_MEASURMENT+0x5>
     38e:	02 97       	sbiw	r24, 0x02	; 2
     390:	8a 15       	cp	r24, r10
     392:	9b 05       	cpc	r25, r11
     394:	0c f4       	brge	.+2      	; 0x398 <GameLogic_Round+0x102>
     396:	65 c0       	rjmp	.+202    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     398:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <correctCount>
				{
					correctCount++;
     39c:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <correctCount+0x1>
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <correctCount+0x1>
     3a6:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <correctCount>
     3aa:	5b c0       	rjmp	.+182    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     3ac:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <TRESHOLD_MEASURMENT+0x4>
				}
				break;
			case DOWN:
				if(measurement.z_geforce >= TRESHOLD_MEASURMENT.z_geforce + MEASURMENT_OFSETT)
     3b0:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <TRESHOLD_MEASURMENT+0x5>
     3b4:	02 96       	adiw	r24, 0x02	; 2
     3b6:	a8 16       	cp	r10, r24
     3b8:	b9 06       	cpc	r11, r25
     3ba:	0c f4       	brge	.+2      	; 0x3be <GameLogic_Round+0x128>
     3bc:	52 c0       	rjmp	.+164    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     3be:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <correctCount>
				{
					correctCount++;
     3c2:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <correctCount+0x1>
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <correctCount+0x1>
     3cc:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <correctCount>
     3d0:	48 c0       	rjmp	.+144    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     3d2:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <TRESHOLD_MEASURMENT+0x2>
				}
				break;

			case LEFT:
				if(measurement.y_geforce <= TRESHOLD_MEASURMENT.y_geforce - MEASURMENT_OFSETT)
     3d6:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <TRESHOLD_MEASURMENT+0x3>
     3da:	02 97       	sbiw	r24, 0x02	; 2
     3dc:	8c 15       	cp	r24, r12
     3de:	9d 05       	cpc	r25, r13
     3e0:	0c f4       	brge	.+2      	; 0x3e4 <GameLogic_Round+0x14e>
     3e2:	3f c0       	rjmp	.+126    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     3e4:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <correctCount>
				{
					correctCount++;
     3e8:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <correctCount+0x1>
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <correctCount+0x1>
     3f2:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <correctCount>
     3f6:	35 c0       	rjmp	.+106    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     3f8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <TRESHOLD_MEASURMENT+0x2>
				}
				break;
			case RIGHT:
				if(measurement.y_geforce >= TRESHOLD_MEASURMENT.y_geforce + MEASURMENT_OFSETT)
     3fc:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <TRESHOLD_MEASURMENT+0x3>
     400:	02 96       	adiw	r24, 0x02	; 2
     402:	c8 16       	cp	r12, r24
     404:	d9 06       	cpc	r13, r25
     406:	6c f1       	brlt	.+90     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     408:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <correctCount>
				{
					correctCount++;
     40c:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <correctCount+0x1>
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <correctCount+0x1>
     416:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <correctCount>
     41a:	23 c0       	rjmp	.+70     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     41c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <TRESHOLD_MEASURMENT>
				}
				break;
			case FORWARD:
				if(measurement.x_geforce <= TRESHOLD_MEASURMENT.x_geforce - MEASURMENT_OFSETT)
     420:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <TRESHOLD_MEASURMENT+0x1>
     424:	02 97       	sbiw	r24, 0x02	; 2
     426:	8e 15       	cp	r24, r14
     428:	9f 05       	cpc	r25, r15
     42a:	dc f0       	brlt	.+54     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     42c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <correctCount>
				{
					correctCount++;
     430:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <correctCount+0x1>
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <correctCount+0x1>
     43a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <correctCount>
     43e:	11 c0       	rjmp	.+34     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     440:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <TRESHOLD_MEASURMENT>
				}
				break;
			case BACKWARD:
				if(measurement.x_geforce >= TRESHOLD_MEASURMENT.x_geforce + MEASURMENT_OFSETT)
     444:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <TRESHOLD_MEASURMENT+0x1>
     448:	02 96       	adiw	r24, 0x02	; 2
     44a:	e8 16       	cp	r14, r24
     44c:	f9 06       	cpc	r15, r25
     44e:	4c f0       	brlt	.+18     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     450:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <correctCount>
				{
					correctCount++;
     454:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <correctCount+0x1>
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <correctCount+0x1>
     45e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <correctCount>
     462:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <totalCount>
				}
				break;
		}
		totalCount++;
     466:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <totalCount+0x1>
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <totalCount+0x1>
     470:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <totalCount>
		wait(100);
     474:	84 e6       	ldi	r24, 0x64	; 100
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	99 de       	rcall	.-718    	; 0x1ac <wait>
     47a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
	//GameLogic_Draw_Dir(dir);
	display_clear();
	GameLogic_draw_hearts();

	// Starting handling
	while(reading) {
     47e:	81 11       	cpse	r24, r1
     480:	2b cf       	rjmp	.-426    	; 0x2d8 <GameLogic_Round+0x42>
		}
		totalCount++;
		wait(100);
	}
	
	float percentage = ((float)correctCount / (float)totalCount) * 100.0;
     482:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <correctCount>
     486:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <correctCount+0x1>
     48a:	07 2e       	mov	r0, r23
     48c:	00 0c       	add	r0, r0
     48e:	88 0b       	sbc	r24, r24
     490:	99 0b       	sbc	r25, r25
     492:	04 d2       	rcall	.+1032   	; 0x89c <__floatsisf>
     494:	6b 01       	movw	r12, r22
     496:	7c 01       	movw	r14, r24
     498:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <totalCount>
     49c:	70 91 a6 01 	lds	r23, 0x01A6	; 0x8001a6 <totalCount+0x1>
     4a0:	07 2e       	mov	r0, r23
     4a2:	00 0c       	add	r0, r0
     4a4:	88 0b       	sbc	r24, r24
     4a6:	99 0b       	sbc	r25, r25
     4a8:	f9 d1       	rcall	.+1010   	; 0x89c <__floatsisf>
     4aa:	9b 01       	movw	r18, r22
     4ac:	ac 01       	movw	r20, r24
     4ae:	c7 01       	movw	r24, r14
     4b0:	b6 01       	movw	r22, r12
     4b2:	59 d1       	rcall	.+690    	; 0x766 <__divsf3>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	48 ec       	ldi	r20, 0xC8	; 200
     4ba:	52 e4       	ldi	r21, 0x42	; 66
    bool inputCorrect = (int)percentage > CORRECTTHRESHOLD;
     4bc:	7b d2       	rcall	.+1270   	; 0x9b4 <__mulsf3>
     4be:	bb d1       	rcall	.+886    	; 0x836 <__fixsfsi>

	display_clear();
     4c0:	7b 01       	movw	r14, r22
     4c2:	86 d0       	rcall	.+268    	; 0x5d0 <display_clear>
    if(inputCorrect) {
     4c4:	9b e0       	ldi	r25, 0x0B	; 11
     4c6:	e9 16       	cp	r14, r25
     4c8:	f1 04       	cpc	r15, r1
     4ca:	24 f0       	brlt	.+8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	    display_text(" Input Correct! ");
     4cc:	8d e6       	ldi	r24, 0x6D	; 109
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	4f d0       	rcall	.+158    	; 0x570 <display_text>
     4d2:	0c c0       	rjmp	.+24     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
	    } else {
	    display_text("Input Incorrect!");
     4d4:	8e e7       	ldi	r24, 0x7E	; 126
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	4b d0       	rcall	.+150    	; 0x570 <display_text>
     4da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lives_left>
		lives_left--;
     4de:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lives_left+0x1>
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lives_left+0x1>
     4e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lives_left>
    }
	GameLogic_draw_hearts();
     4ec:	c6 de       	rcall	.-628    	; 0x27a <GameLogic_draw_hearts>
     4ee:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <correctCount+0x1>

	correctCount = 0;
     4f2:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <correctCount>
     4f6:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <totalCount+0x1>
	totalCount = 0;
     4fa:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <totalCount>
     4fe:	88 ee       	ldi	r24, 0xE8	; 232

	wait(1000);
     500:	93 e0       	ldi	r25, 0x03	; 3
     502:	54 de       	rcall	.-856    	; 0x1ac <wait>
     504:	c6 59       	subi	r28, 0x96	; 150
     506:	df 4f       	sbci	r29, 0xFF	; 255
}
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	bf 90       	pop	r11
     522:	af 90       	pop	r10
     524:	9f 90       	pop	r9
     526:	8f 90       	pop	r8
     528:	08 95       	ret

0000052a <switch_E>:
char fullheart[] = {0x00,0x00,0x0a,0x15,0x11,0x0a,0x04,0x00};
char emptyheart[] = {0x00,0x00,0x0a,0x15,0x11,0x0a,0x04,0x00};


void switch_E() {
	PORTC |= (1<<E);
     52a:	85 b3       	in	r24, 0x15	; 21
     52c:	88 60       	ori	r24, 0x08	; 8
     52e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     530:	8f ec       	ldi	r24, 0xCF	; 207
     532:	97 e0       	ldi	r25, 0x07	; 7
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <switch_E+0xa>
     538:	00 c0       	rjmp	.+0      	; 0x53a <switch_E+0x10>
     53a:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<E);
     53c:	85 b3       	in	r24, 0x15	; 21
     53e:	87 7f       	andi	r24, 0xF7	; 247
     540:	85 bb       	out	0x15, r24	; 21
     542:	8f ec       	ldi	r24, 0xCF	; 207
     544:	97 e0       	ldi	r25, 0x07	; 7
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <switch_E+0x1c>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <switch_E+0x22>
     54c:	00 00       	nop
     54e:	08 95       	ret

00000550 <lcd_write_data>:
	_delay_ms(1);
}



void lcd_write_data(unsigned char byte) {
     550:	cf 93       	push	r28
     552:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     554:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<RS);
     556:	85 b3       	in	r24, 0x15	; 21
     558:	84 60       	ori	r24, 0x04	; 4
     55a:	85 bb       	out	0x15, r24	; 21
	switch_E();
     55c:	e6 df       	rcall	.-52     	; 0x52a <switch_E>

	// Second nibble
	PORTC = (byte<<4);
     55e:	c2 95       	swap	r28
     560:	c0 7f       	andi	r28, 0xF0	; 240
     562:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<RS);
     564:	85 b3       	in	r24, 0x15	; 21
     566:	84 60       	ori	r24, 0x04	; 4
	switch_E();
     568:	85 bb       	out	0x15, r24	; 21
     56a:	df df       	rcall	.-66     	; 0x52a <switch_E>
}
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <display_text>:

void display_text(char *str) {
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	ec 01       	movw	r28, r24
	while (*str) {
     576:	02 c0       	rjmp	.+4      	; 0x57c <display_text+0xc>
		lcd_write_data(*str++);
     578:	21 96       	adiw	r28, 0x01	; 1
     57a:	ea df       	rcall	.-44     	; 0x550 <lcd_write_data>
	PORTC |= (1<<RS);
	switch_E();
}

void display_text(char *str) {
	while (*str) {
     57c:	88 81       	ld	r24, Y
     57e:	81 11       	cpse	r24, r1
     580:	fb cf       	rjmp	.-10     	; 0x578 <display_text+0x8>
		lcd_write_data(*str++);
	}
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <lcd_write_command>:

void lcd_write_command(unsigned char byte)
{
     588:	cf 93       	push	r28
     58a:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     58c:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<RS);
     58e:	85 b3       	in	r24, 0x15	; 21
     590:	8b 7f       	andi	r24, 0xFB	; 251
     592:	85 bb       	out	0x15, r24	; 21
	switch_E();
     594:	ca df       	rcall	.-108    	; 0x52a <switch_E>

	// Second nibble
	PORTC = (byte<<4);
     596:	c2 95       	swap	r28
     598:	c0 7f       	andi	r28, 0xF0	; 240
     59a:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<RS);
     59c:	85 b3       	in	r24, 0x15	; 21
     59e:	8b 7f       	andi	r24, 0xFB	; 251
	switch_E();
     5a0:	85 bb       	out	0x15, r24	; 21
     5a2:	c3 df       	rcall	.-122    	; 0x52a <switch_E>
}
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <display_set_cursor>:


// 0x0c for turning cursor of.
void display_set_cursor(int position, int line) {
	if (line == 0){
     5a8:	67 2b       	or	r22, r23
     5aa:	49 f4       	brne	.+18     	; 0x5be <display_set_cursor+0x16>
		lcd_write_command((position * 0x1) + 0x80);
     5ac:	80 58       	subi	r24, 0x80	; 128
     5ae:	ec df       	rcall	.-40     	; 0x588 <lcd_write_command>
     5b0:	8f e9       	ldi	r24, 0x9F	; 159
     5b2:	9f e0       	ldi	r25, 0x0F	; 15
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <display_set_cursor+0xc>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <display_set_cursor+0x12>
     5ba:	00 00       	nop
     5bc:	08 95       	ret
		_delay_ms(2);
	} else {
		lcd_write_command((position * 0x1) + 0xc0);
     5be:	80 54       	subi	r24, 0x40	; 64
     5c0:	e3 df       	rcall	.-58     	; 0x588 <lcd_write_command>
     5c2:	8f e9       	ldi	r24, 0x9F	; 159
     5c4:	9f e0       	ldi	r25, 0x0F	; 15
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <display_set_cursor+0x1e>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <display_set_cursor+0x24>
     5cc:	00 00       	nop
     5ce:	08 95       	ret

000005d0 <display_clear>:
		_delay_ms(2);
	}
}

void display_clear(){
	lcd_write_command(0x01);
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	da df       	rcall	.-76     	; 0x588 <lcd_write_command>
     5d4:	8f e9       	ldi	r24, 0x9F	; 159
     5d6:	9f e0       	ldi	r25, 0x0F	; 15
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <display_clear+0x8>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <display_clear+0xe>
     5de:	00 00       	nop
	_delay_ms(2);
	lcd_write_command(0x80);
     5e0:	80 e8       	ldi	r24, 0x80	; 128
     5e2:	d2 cf       	rjmp	.-92     	; 0x588 <lcd_write_command>
     5e4:	08 95       	ret

000005e6 <display_add_custom_char>:
}

void display_add_custom_char(char* character, int adress){
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	ec 01       	movw	r28, r24
     5ec:	86 2f       	mov	r24, r22
	lcd_write_command(adress);
     5ee:	cc df       	rcall	.-104    	; 0x588 <lcd_write_command>
     5f0:	8f e9       	ldi	r24, 0x9F	; 159
     5f2:	9f e0       	ldi	r25, 0x0F	; 15
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <display_add_custom_char+0xe>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <display_add_custom_char+0x14>
     5fa:	00 00       	nop
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <display_add_custom_char+0x1c>
	_delay_ms(2);
	while (*character) {
		lcd_write_data(*character++);
     5fe:	21 96       	adiw	r28, 0x01	; 1
     600:	a7 df       	rcall	.-178    	; 0x550 <lcd_write_data>
}

void display_add_custom_char(char* character, int adress){
	lcd_write_command(adress);
	_delay_ms(2);
	while (*character) {
     602:	88 81       	ld	r24, Y
     604:	81 11       	cpse	r24, r1
     606:	fb cf       	rjmp	.-10     	; 0x5fe <display_add_custom_char+0x18>
		lcd_write_data(*character++);
	}
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <display_init>:

void display_init() {
     60e:	cf 93       	push	r28
	// See table 13 from the HD44780U datasheet.
	DDRC = 0xFF;
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
     614:	15 ba       	out	0x15, r1	; 21
	
	// Step 2 Function set
	PORTC = 0x20;
     616:	c0 e2       	ldi	r28, 0x20	; 32
     618:	c5 bb       	out	0x15, r28	; 21
	switch_E();
     61a:	87 df       	rcall	.-242    	; 0x52a <switch_E>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	switch_E();
     61c:	c5 bb       	out	0x15, r28	; 21
     61e:	85 df       	rcall	.-246    	; 0x52a <switch_E>
	PORTC = 0x80;
     620:	80 e8       	ldi	r24, 0x80	; 128
	switch_E();
     622:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
     624:	82 df       	rcall	.-252    	; 0x52a <switch_E>
	switch_E();
     626:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
     628:	80 df       	rcall	.-256    	; 0x52a <switch_E>
	switch_E();
     62a:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
     62c:	85 bb       	out	0x15, r24	; 21
	switch_E();
     62e:	7d df       	rcall	.-262    	; 0x52a <switch_E>
	PORTC = 0x60;
     630:	15 ba       	out	0x15, r1	; 21
     632:	7b df       	rcall	.-266    	; 0x52a <switch_E>
	switch_E();
     634:	80 e6       	ldi	r24, 0x60	; 96
	
	// Set cursor to position 0 on first row.
	lcd_write_command(0x02);
     636:	85 bb       	out	0x15, r24	; 21
     638:	78 df       	rcall	.-272    	; 0x52a <switch_E>
     63a:	82 e0       	ldi	r24, 0x02	; 2

	display_add_custom_char(fullheart, 0x40);
     63c:	a5 df       	rcall	.-182    	; 0x588 <lcd_write_command>
     63e:	60 e4       	ldi	r22, 0x40	; 64
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	86 e1       	ldi	r24, 0x16	; 22
     644:	91 e0       	ldi	r25, 0x01	; 1
	display_add_custom_char(emptyheart, 0x48);
     646:	cf df       	rcall	.-98     	; 0x5e6 <display_add_custom_char>
     648:	68 e4       	ldi	r22, 0x48	; 72
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	ca df       	rcall	.-108    	; 0x5e6 <display_add_custom_char>
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <__vector_12>:
	{0b000, 0b001, 0b010,
	0b011, 0b100,  0b101};

void (*on_interupt)(void);

ISR(TIMER1_COMPA_vect) {
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	0f 92       	push	r0
     65e:	11 24       	eor	r1, r1
     660:	0b b6       	in	r0, 0x3b	; 59
     662:	0f 92       	push	r0
     664:	2f 93       	push	r18
     666:	3f 93       	push	r19
     668:	4f 93       	push	r20
     66a:	5f 93       	push	r21
     66c:	6f 93       	push	r22
     66e:	7f 93       	push	r23
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	af 93       	push	r26
     676:	bf 93       	push	r27
     678:	ef 93       	push	r30
     67a:	ff 93       	push	r31
	on_interupt();
     67c:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <on_interupt>
     680:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <on_interupt+0x1>
     684:	09 95       	icall
	cli();
     686:	f8 94       	cli
}
     688:	ff 91       	pop	r31
     68a:	ef 91       	pop	r30
     68c:	bf 91       	pop	r27
     68e:	af 91       	pop	r26
     690:	9f 91       	pop	r25
     692:	8f 91       	pop	r24
     694:	7f 91       	pop	r23
     696:	6f 91       	pop	r22
     698:	5f 91       	pop	r21
     69a:	4f 91       	pop	r20
     69c:	3f 91       	pop	r19
     69e:	2f 91       	pop	r18
     6a0:	0f 90       	pop	r0
     6a2:	0b be       	out	0x3b, r0	; 59
     6a4:	0f 90       	pop	r0
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	0f 90       	pop	r0
     6aa:	1f 90       	pop	r1
     6ac:	18 95       	reti

000006ae <setup_timer>:
	setup_timer(prescaler, limit);
	on_interupt = fun_ptr;
}

void setup_timer(int prescaler, int limit){
	OCR1A = limit;					// Setting calculated limit
     6ae:	7b bd       	out	0x2b, r23	; 43
     6b0:	6a bd       	out	0x2a, r22	; 42
	TIMSK |= (1 << 4);				// Setting on compare vect intr
     6b2:	97 b7       	in	r25, 0x37	; 55
     6b4:	90 61       	ori	r25, 0x10	; 16
     6b6:	97 bf       	out	0x37, r25	; 55
	sei();							// Turning on interupts
     6b8:	78 94       	sei
	TCCR1B |= prescaler_values[0];	// Clearing prescaler
     6ba:	9e b5       	in	r25, 0x2e	; 46
     6bc:	9e bd       	out	0x2e, r25	; 46
	TCCR1B |= prescaler;			// Setting new prescaler
     6be:	9e b5       	in	r25, 0x2e	; 46
     6c0:	89 2b       	or	r24, r25
     6c2:	8e bd       	out	0x2e, r24	; 46
     6c4:	08 95       	ret

000006c6 <set_timer>:
	cli();
}

void setup_timer(int prescaler, int limit);

void set_timer(int time_ms, void (*fun_ptr)(void)){
     6c6:	8f 92       	push	r8
     6c8:	9f 92       	push	r9
     6ca:	af 92       	push	r10
     6cc:	bf 92       	push	r11
     6ce:	cf 92       	push	r12
     6d0:	df 92       	push	r13
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	8c 01       	movw	r16, r24
     6e0:	6b 01       	movw	r12, r22
	int prescaler, limit;

	// Looping through prescalers
	for (int i = 1; i < Timer_PRESCALER_COUNT; i++)
     6e2:	c1 e0       	ldi	r28, 0x01	; 1
     6e4:	d0 e0       	ldi	r29, 0x00	; 0
     6e6:	25 c0       	rjmp	.+74     	; 0x732 <set_timer+0x6c>
	{
		// Calculating max allowed value of prescaler and if in limit then use.
		if ((1 / TIMER_CLOCK_RATE) * prescaler_values[i] < time_ms){
     6e8:	10 16       	cp	r1, r16
     6ea:	11 06       	cpc	r1, r17
     6ec:	0c f5       	brge	.+66     	; 0x730 <set_timer+0x6a>
			prescaler = prescaler_values[i];
     6ee:	fe 01       	movw	r30, r28
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	e1 57       	subi	r30, 0x71	; 113
     6f6:	fe 4f       	sbci	r31, 0xFE	; 254
     6f8:	e0 80       	ld	r14, Z
     6fa:	f1 80       	ldd	r15, Z+1	; 0x01
			limit = (int)((float)time_ms / (((float)1 / (float)TIMER_CLOCK_RATE) * (float)prescaler_values[i]));
     6fc:	b8 01       	movw	r22, r16
     6fe:	01 2e       	mov	r0, r17
     700:	00 0c       	add	r0, r0
     702:	88 0b       	sbc	r24, r24
     704:	99 0b       	sbc	r25, r25
     706:	ca d0       	rcall	.+404    	; 0x89c <__floatsisf>
     708:	4b 01       	movw	r8, r22
     70a:	5c 01       	movw	r10, r24
     70c:	b7 01       	movw	r22, r14
     70e:	0f 2c       	mov	r0, r15
     710:	00 0c       	add	r0, r0
     712:	88 0b       	sbc	r24, r24
     714:	99 0b       	sbc	r25, r25
     716:	c2 d0       	rcall	.+388    	; 0x89c <__floatsisf>
     718:	2f e6       	ldi	r18, 0x6F	; 111
     71a:	32 e1       	ldi	r19, 0x12	; 18
     71c:	43 e0       	ldi	r20, 0x03	; 3
     71e:	59 e3       	ldi	r21, 0x39	; 57
     720:	49 d1       	rcall	.+658    	; 0x9b4 <__mulsf3>
     722:	9b 01       	movw	r18, r22
     724:	ac 01       	movw	r20, r24
     726:	c5 01       	movw	r24, r10
     728:	b4 01       	movw	r22, r8
     72a:	1d d0       	rcall	.+58     	; 0x766 <__divsf3>
     72c:	84 d0       	rcall	.+264    	; 0x836 <__fixsfsi>
     72e:	9b 01       	movw	r18, r22

void set_timer(int time_ms, void (*fun_ptr)(void)){
	int prescaler, limit;

	// Looping through prescalers
	for (int i = 1; i < Timer_PRESCALER_COUNT; i++)
     730:	21 96       	adiw	r28, 0x01	; 1
     732:	c6 30       	cpi	r28, 0x06	; 6
     734:	d1 05       	cpc	r29, r1
			limit = (int)((float)time_ms / (((float)1 / (float)TIMER_CLOCK_RATE) * (float)prescaler_values[i]));
		}
	}

	// Setting up all timers and other things
	setup_timer(prescaler, limit);
     736:	c4 f2       	brlt	.-80     	; 0x6e8 <set_timer+0x22>
     738:	b9 01       	movw	r22, r18
     73a:	c7 01       	movw	r24, r14
     73c:	b8 df       	rcall	.-144    	; 0x6ae <setup_timer>
	on_interupt = fun_ptr;
     73e:	d0 92 a8 01 	sts	0x01A8, r13	; 0x8001a8 <on_interupt+0x1>
     742:	c0 92 a7 01 	sts	0x01A7, r12	; 0x8001a7 <on_interupt>
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	bf 90       	pop	r11
     758:	af 90       	pop	r10
     75a:	9f 90       	pop	r9
     75c:	8f 90       	pop	r8
     75e:	08 95       	ret

00000760 <main>:


// Main program
int main( void )
{
	GameLogic_Init();
     760:	34 dd       	rcall	.-1432   	; 0x1ca <GameLogic_Init>
	while (1)
	{
		// Reading measurement
		GameLogic_Round();
     762:	99 dd       	rcall	.-1230   	; 0x296 <GameLogic_Round>
     764:	fe cf       	rjmp	.-4      	; 0x762 <main+0x2>

00000766 <__divsf3>:
     766:	0c d0       	rcall	.+24     	; 0x780 <__divsf3x>
     768:	eb c0       	rjmp	.+470    	; 0x940 <__fp_round>
     76a:	e3 d0       	rcall	.+454    	; 0x932 <__fp_pscB>
     76c:	40 f0       	brcs	.+16     	; 0x77e <__divsf3+0x18>
     76e:	da d0       	rcall	.+436    	; 0x924 <__fp_pscA>
     770:	30 f0       	brcs	.+12     	; 0x77e <__divsf3+0x18>
     772:	21 f4       	brne	.+8      	; 0x77c <__divsf3+0x16>
     774:	5f 3f       	cpi	r21, 0xFF	; 255
     776:	19 f0       	breq	.+6      	; 0x77e <__divsf3+0x18>
     778:	cc c0       	rjmp	.+408    	; 0x912 <__fp_inf>
     77a:	51 11       	cpse	r21, r1
     77c:	15 c1       	rjmp	.+554    	; 0x9a8 <__fp_szero>
     77e:	cf c0       	rjmp	.+414    	; 0x91e <__fp_nan>

00000780 <__divsf3x>:
     780:	f0 d0       	rcall	.+480    	; 0x962 <__fp_split3>
     782:	98 f3       	brcs	.-26     	; 0x76a <__divsf3+0x4>

00000784 <__divsf3_pse>:
     784:	99 23       	and	r25, r25
     786:	c9 f3       	breq	.-14     	; 0x77a <__divsf3+0x14>
     788:	55 23       	and	r21, r21
     78a:	b1 f3       	breq	.-20     	; 0x778 <__divsf3+0x12>
     78c:	95 1b       	sub	r25, r21
     78e:	55 0b       	sbc	r21, r21
     790:	bb 27       	eor	r27, r27
     792:	aa 27       	eor	r26, r26
     794:	62 17       	cp	r22, r18
     796:	73 07       	cpc	r23, r19
     798:	84 07       	cpc	r24, r20
     79a:	38 f0       	brcs	.+14     	; 0x7aa <__divsf3_pse+0x26>
     79c:	9f 5f       	subi	r25, 0xFF	; 255
     79e:	5f 4f       	sbci	r21, 0xFF	; 255
     7a0:	22 0f       	add	r18, r18
     7a2:	33 1f       	adc	r19, r19
     7a4:	44 1f       	adc	r20, r20
     7a6:	aa 1f       	adc	r26, r26
     7a8:	a9 f3       	breq	.-22     	; 0x794 <__divsf3_pse+0x10>
     7aa:	33 d0       	rcall	.+102    	; 0x812 <__divsf3_pse+0x8e>
     7ac:	0e 2e       	mov	r0, r30
     7ae:	3a f0       	brmi	.+14     	; 0x7be <__divsf3_pse+0x3a>
     7b0:	e0 e8       	ldi	r30, 0x80	; 128
     7b2:	30 d0       	rcall	.+96     	; 0x814 <__divsf3_pse+0x90>
     7b4:	91 50       	subi	r25, 0x01	; 1
     7b6:	50 40       	sbci	r21, 0x00	; 0
     7b8:	e6 95       	lsr	r30
     7ba:	00 1c       	adc	r0, r0
     7bc:	ca f7       	brpl	.-14     	; 0x7b0 <__divsf3_pse+0x2c>
     7be:	29 d0       	rcall	.+82     	; 0x812 <__divsf3_pse+0x8e>
     7c0:	fe 2f       	mov	r31, r30
     7c2:	27 d0       	rcall	.+78     	; 0x812 <__divsf3_pse+0x8e>
     7c4:	66 0f       	add	r22, r22
     7c6:	77 1f       	adc	r23, r23
     7c8:	88 1f       	adc	r24, r24
     7ca:	bb 1f       	adc	r27, r27
     7cc:	26 17       	cp	r18, r22
     7ce:	37 07       	cpc	r19, r23
     7d0:	48 07       	cpc	r20, r24
     7d2:	ab 07       	cpc	r26, r27
     7d4:	b0 e8       	ldi	r27, 0x80	; 128
     7d6:	09 f0       	breq	.+2      	; 0x7da <__divsf3_pse+0x56>
     7d8:	bb 0b       	sbc	r27, r27
     7da:	80 2d       	mov	r24, r0
     7dc:	bf 01       	movw	r22, r30
     7de:	ff 27       	eor	r31, r31
     7e0:	93 58       	subi	r25, 0x83	; 131
     7e2:	5f 4f       	sbci	r21, 0xFF	; 255
     7e4:	2a f0       	brmi	.+10     	; 0x7f0 <__divsf3_pse+0x6c>
     7e6:	9e 3f       	cpi	r25, 0xFE	; 254
     7e8:	51 05       	cpc	r21, r1
     7ea:	68 f0       	brcs	.+26     	; 0x806 <__divsf3_pse+0x82>
     7ec:	92 c0       	rjmp	.+292    	; 0x912 <__fp_inf>
     7ee:	dc c0       	rjmp	.+440    	; 0x9a8 <__fp_szero>
     7f0:	5f 3f       	cpi	r21, 0xFF	; 255
     7f2:	ec f3       	brlt	.-6      	; 0x7ee <__divsf3_pse+0x6a>
     7f4:	98 3e       	cpi	r25, 0xE8	; 232
     7f6:	dc f3       	brlt	.-10     	; 0x7ee <__divsf3_pse+0x6a>
     7f8:	86 95       	lsr	r24
     7fa:	77 95       	ror	r23
     7fc:	67 95       	ror	r22
     7fe:	b7 95       	ror	r27
     800:	f7 95       	ror	r31
     802:	9f 5f       	subi	r25, 0xFF	; 255
     804:	c9 f7       	brne	.-14     	; 0x7f8 <__divsf3_pse+0x74>
     806:	88 0f       	add	r24, r24
     808:	91 1d       	adc	r25, r1
     80a:	96 95       	lsr	r25
     80c:	87 95       	ror	r24
     80e:	97 f9       	bld	r25, 7
     810:	08 95       	ret
     812:	e1 e0       	ldi	r30, 0x01	; 1
     814:	66 0f       	add	r22, r22
     816:	77 1f       	adc	r23, r23
     818:	88 1f       	adc	r24, r24
     81a:	bb 1f       	adc	r27, r27
     81c:	62 17       	cp	r22, r18
     81e:	73 07       	cpc	r23, r19
     820:	84 07       	cpc	r24, r20
     822:	ba 07       	cpc	r27, r26
     824:	20 f0       	brcs	.+8      	; 0x82e <__divsf3_pse+0xaa>
     826:	62 1b       	sub	r22, r18
     828:	73 0b       	sbc	r23, r19
     82a:	84 0b       	sbc	r24, r20
     82c:	ba 0b       	sbc	r27, r26
     82e:	ee 1f       	adc	r30, r30
     830:	88 f7       	brcc	.-30     	; 0x814 <__divsf3_pse+0x90>
     832:	e0 95       	com	r30
     834:	08 95       	ret

00000836 <__fixsfsi>:
     836:	04 d0       	rcall	.+8      	; 0x840 <__fixunssfsi>
     838:	68 94       	set
     83a:	b1 11       	cpse	r27, r1
     83c:	b5 c0       	rjmp	.+362    	; 0x9a8 <__fp_szero>
     83e:	08 95       	ret

00000840 <__fixunssfsi>:
     840:	98 d0       	rcall	.+304    	; 0x972 <__fp_splitA>
     842:	88 f0       	brcs	.+34     	; 0x866 <__fixunssfsi+0x26>
     844:	9f 57       	subi	r25, 0x7F	; 127
     846:	90 f0       	brcs	.+36     	; 0x86c <__fixunssfsi+0x2c>
     848:	b9 2f       	mov	r27, r25
     84a:	99 27       	eor	r25, r25
     84c:	b7 51       	subi	r27, 0x17	; 23
     84e:	a0 f0       	brcs	.+40     	; 0x878 <__fixunssfsi+0x38>
     850:	d1 f0       	breq	.+52     	; 0x886 <__fixunssfsi+0x46>
     852:	66 0f       	add	r22, r22
     854:	77 1f       	adc	r23, r23
     856:	88 1f       	adc	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	1a f0       	brmi	.+6      	; 0x862 <__fixunssfsi+0x22>
     85c:	ba 95       	dec	r27
     85e:	c9 f7       	brne	.-14     	; 0x852 <__fixunssfsi+0x12>
     860:	12 c0       	rjmp	.+36     	; 0x886 <__fixunssfsi+0x46>
     862:	b1 30       	cpi	r27, 0x01	; 1
     864:	81 f0       	breq	.+32     	; 0x886 <__fixunssfsi+0x46>
     866:	9f d0       	rcall	.+318    	; 0x9a6 <__fp_zero>
     868:	b1 e0       	ldi	r27, 0x01	; 1
     86a:	08 95       	ret
     86c:	9c c0       	rjmp	.+312    	; 0x9a6 <__fp_zero>
     86e:	67 2f       	mov	r22, r23
     870:	78 2f       	mov	r23, r24
     872:	88 27       	eor	r24, r24
     874:	b8 5f       	subi	r27, 0xF8	; 248
     876:	39 f0       	breq	.+14     	; 0x886 <__fixunssfsi+0x46>
     878:	b9 3f       	cpi	r27, 0xF9	; 249
     87a:	cc f3       	brlt	.-14     	; 0x86e <__fixunssfsi+0x2e>
     87c:	86 95       	lsr	r24
     87e:	77 95       	ror	r23
     880:	67 95       	ror	r22
     882:	b3 95       	inc	r27
     884:	d9 f7       	brne	.-10     	; 0x87c <__fixunssfsi+0x3c>
     886:	3e f4       	brtc	.+14     	; 0x896 <__fixunssfsi+0x56>
     888:	90 95       	com	r25
     88a:	80 95       	com	r24
     88c:	70 95       	com	r23
     88e:	61 95       	neg	r22
     890:	7f 4f       	sbci	r23, 0xFF	; 255
     892:	8f 4f       	sbci	r24, 0xFF	; 255
     894:	9f 4f       	sbci	r25, 0xFF	; 255
     896:	08 95       	ret

00000898 <__floatunsisf>:
     898:	e8 94       	clt
     89a:	09 c0       	rjmp	.+18     	; 0x8ae <__floatsisf+0x12>

0000089c <__floatsisf>:
     89c:	97 fb       	bst	r25, 7
     89e:	3e f4       	brtc	.+14     	; 0x8ae <__floatsisf+0x12>
     8a0:	90 95       	com	r25
     8a2:	80 95       	com	r24
     8a4:	70 95       	com	r23
     8a6:	61 95       	neg	r22
     8a8:	7f 4f       	sbci	r23, 0xFF	; 255
     8aa:	8f 4f       	sbci	r24, 0xFF	; 255
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	99 23       	and	r25, r25
     8b0:	a9 f0       	breq	.+42     	; 0x8dc <__floatsisf+0x40>
     8b2:	f9 2f       	mov	r31, r25
     8b4:	96 e9       	ldi	r25, 0x96	; 150
     8b6:	bb 27       	eor	r27, r27
     8b8:	93 95       	inc	r25
     8ba:	f6 95       	lsr	r31
     8bc:	87 95       	ror	r24
     8be:	77 95       	ror	r23
     8c0:	67 95       	ror	r22
     8c2:	b7 95       	ror	r27
     8c4:	f1 11       	cpse	r31, r1
     8c6:	f8 cf       	rjmp	.-16     	; 0x8b8 <__floatsisf+0x1c>
     8c8:	fa f4       	brpl	.+62     	; 0x908 <__floatsisf+0x6c>
     8ca:	bb 0f       	add	r27, r27
     8cc:	11 f4       	brne	.+4      	; 0x8d2 <__floatsisf+0x36>
     8ce:	60 ff       	sbrs	r22, 0
     8d0:	1b c0       	rjmp	.+54     	; 0x908 <__floatsisf+0x6c>
     8d2:	6f 5f       	subi	r22, 0xFF	; 255
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	8f 4f       	sbci	r24, 0xFF	; 255
     8d8:	9f 4f       	sbci	r25, 0xFF	; 255
     8da:	16 c0       	rjmp	.+44     	; 0x908 <__floatsisf+0x6c>
     8dc:	88 23       	and	r24, r24
     8de:	11 f0       	breq	.+4      	; 0x8e4 <__floatsisf+0x48>
     8e0:	96 e9       	ldi	r25, 0x96	; 150
     8e2:	11 c0       	rjmp	.+34     	; 0x906 <__floatsisf+0x6a>
     8e4:	77 23       	and	r23, r23
     8e6:	21 f0       	breq	.+8      	; 0x8f0 <__floatsisf+0x54>
     8e8:	9e e8       	ldi	r25, 0x8E	; 142
     8ea:	87 2f       	mov	r24, r23
     8ec:	76 2f       	mov	r23, r22
     8ee:	05 c0       	rjmp	.+10     	; 0x8fa <__floatsisf+0x5e>
     8f0:	66 23       	and	r22, r22
     8f2:	71 f0       	breq	.+28     	; 0x910 <__floatsisf+0x74>
     8f4:	96 e8       	ldi	r25, 0x86	; 134
     8f6:	86 2f       	mov	r24, r22
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	2a f0       	brmi	.+10     	; 0x908 <__floatsisf+0x6c>
     8fe:	9a 95       	dec	r25
     900:	66 0f       	add	r22, r22
     902:	77 1f       	adc	r23, r23
     904:	88 1f       	adc	r24, r24
     906:	da f7       	brpl	.-10     	; 0x8fe <__floatsisf+0x62>
     908:	88 0f       	add	r24, r24
     90a:	96 95       	lsr	r25
     90c:	87 95       	ror	r24
     90e:	97 f9       	bld	r25, 7
     910:	08 95       	ret

00000912 <__fp_inf>:
     912:	97 f9       	bld	r25, 7
     914:	9f 67       	ori	r25, 0x7F	; 127
     916:	80 e8       	ldi	r24, 0x80	; 128
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	08 95       	ret

0000091e <__fp_nan>:
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	80 ec       	ldi	r24, 0xC0	; 192
     922:	08 95       	ret

00000924 <__fp_pscA>:
     924:	00 24       	eor	r0, r0
     926:	0a 94       	dec	r0
     928:	16 16       	cp	r1, r22
     92a:	17 06       	cpc	r1, r23
     92c:	18 06       	cpc	r1, r24
     92e:	09 06       	cpc	r0, r25
     930:	08 95       	ret

00000932 <__fp_pscB>:
     932:	00 24       	eor	r0, r0
     934:	0a 94       	dec	r0
     936:	12 16       	cp	r1, r18
     938:	13 06       	cpc	r1, r19
     93a:	14 06       	cpc	r1, r20
     93c:	05 06       	cpc	r0, r21
     93e:	08 95       	ret

00000940 <__fp_round>:
     940:	09 2e       	mov	r0, r25
     942:	03 94       	inc	r0
     944:	00 0c       	add	r0, r0
     946:	11 f4       	brne	.+4      	; 0x94c <__fp_round+0xc>
     948:	88 23       	and	r24, r24
     94a:	52 f0       	brmi	.+20     	; 0x960 <__fp_round+0x20>
     94c:	bb 0f       	add	r27, r27
     94e:	40 f4       	brcc	.+16     	; 0x960 <__fp_round+0x20>
     950:	bf 2b       	or	r27, r31
     952:	11 f4       	brne	.+4      	; 0x958 <__fp_round+0x18>
     954:	60 ff       	sbrs	r22, 0
     956:	04 c0       	rjmp	.+8      	; 0x960 <__fp_round+0x20>
     958:	6f 5f       	subi	r22, 0xFF	; 255
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	8f 4f       	sbci	r24, 0xFF	; 255
     95e:	9f 4f       	sbci	r25, 0xFF	; 255
     960:	08 95       	ret

00000962 <__fp_split3>:
     962:	57 fd       	sbrc	r21, 7
     964:	90 58       	subi	r25, 0x80	; 128
     966:	44 0f       	add	r20, r20
     968:	55 1f       	adc	r21, r21
     96a:	59 f0       	breq	.+22     	; 0x982 <__fp_splitA+0x10>
     96c:	5f 3f       	cpi	r21, 0xFF	; 255
     96e:	71 f0       	breq	.+28     	; 0x98c <__fp_splitA+0x1a>
     970:	47 95       	ror	r20

00000972 <__fp_splitA>:
     972:	88 0f       	add	r24, r24
     974:	97 fb       	bst	r25, 7
     976:	99 1f       	adc	r25, r25
     978:	61 f0       	breq	.+24     	; 0x992 <__fp_splitA+0x20>
     97a:	9f 3f       	cpi	r25, 0xFF	; 255
     97c:	79 f0       	breq	.+30     	; 0x99c <__fp_splitA+0x2a>
     97e:	87 95       	ror	r24
     980:	08 95       	ret
     982:	12 16       	cp	r1, r18
     984:	13 06       	cpc	r1, r19
     986:	14 06       	cpc	r1, r20
     988:	55 1f       	adc	r21, r21
     98a:	f2 cf       	rjmp	.-28     	; 0x970 <__fp_split3+0xe>
     98c:	46 95       	lsr	r20
     98e:	f1 df       	rcall	.-30     	; 0x972 <__fp_splitA>
     990:	08 c0       	rjmp	.+16     	; 0x9a2 <__fp_splitA+0x30>
     992:	16 16       	cp	r1, r22
     994:	17 06       	cpc	r1, r23
     996:	18 06       	cpc	r1, r24
     998:	99 1f       	adc	r25, r25
     99a:	f1 cf       	rjmp	.-30     	; 0x97e <__fp_splitA+0xc>
     99c:	86 95       	lsr	r24
     99e:	71 05       	cpc	r23, r1
     9a0:	61 05       	cpc	r22, r1
     9a2:	08 94       	sec
     9a4:	08 95       	ret

000009a6 <__fp_zero>:
     9a6:	e8 94       	clt

000009a8 <__fp_szero>:
     9a8:	bb 27       	eor	r27, r27
     9aa:	66 27       	eor	r22, r22
     9ac:	77 27       	eor	r23, r23
     9ae:	cb 01       	movw	r24, r22
     9b0:	97 f9       	bld	r25, 7
     9b2:	08 95       	ret

000009b4 <__mulsf3>:
     9b4:	0b d0       	rcall	.+22     	; 0x9cc <__mulsf3x>
     9b6:	c4 cf       	rjmp	.-120    	; 0x940 <__fp_round>
     9b8:	b5 df       	rcall	.-150    	; 0x924 <__fp_pscA>
     9ba:	28 f0       	brcs	.+10     	; 0x9c6 <__mulsf3+0x12>
     9bc:	ba df       	rcall	.-140    	; 0x932 <__fp_pscB>
     9be:	18 f0       	brcs	.+6      	; 0x9c6 <__mulsf3+0x12>
     9c0:	95 23       	and	r25, r21
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <__mulsf3+0x12>
     9c4:	a6 cf       	rjmp	.-180    	; 0x912 <__fp_inf>
     9c6:	ab cf       	rjmp	.-170    	; 0x91e <__fp_nan>
     9c8:	11 24       	eor	r1, r1
     9ca:	ee cf       	rjmp	.-36     	; 0x9a8 <__fp_szero>

000009cc <__mulsf3x>:
     9cc:	ca df       	rcall	.-108    	; 0x962 <__fp_split3>
     9ce:	a0 f3       	brcs	.-24     	; 0x9b8 <__mulsf3+0x4>

000009d0 <__mulsf3_pse>:
     9d0:	95 9f       	mul	r25, r21
     9d2:	d1 f3       	breq	.-12     	; 0x9c8 <__mulsf3+0x14>
     9d4:	95 0f       	add	r25, r21
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	55 1f       	adc	r21, r21
     9da:	62 9f       	mul	r22, r18
     9dc:	f0 01       	movw	r30, r0
     9de:	72 9f       	mul	r23, r18
     9e0:	bb 27       	eor	r27, r27
     9e2:	f0 0d       	add	r31, r0
     9e4:	b1 1d       	adc	r27, r1
     9e6:	63 9f       	mul	r22, r19
     9e8:	aa 27       	eor	r26, r26
     9ea:	f0 0d       	add	r31, r0
     9ec:	b1 1d       	adc	r27, r1
     9ee:	aa 1f       	adc	r26, r26
     9f0:	64 9f       	mul	r22, r20
     9f2:	66 27       	eor	r22, r22
     9f4:	b0 0d       	add	r27, r0
     9f6:	a1 1d       	adc	r26, r1
     9f8:	66 1f       	adc	r22, r22
     9fa:	82 9f       	mul	r24, r18
     9fc:	22 27       	eor	r18, r18
     9fe:	b0 0d       	add	r27, r0
     a00:	a1 1d       	adc	r26, r1
     a02:	62 1f       	adc	r22, r18
     a04:	73 9f       	mul	r23, r19
     a06:	b0 0d       	add	r27, r0
     a08:	a1 1d       	adc	r26, r1
     a0a:	62 1f       	adc	r22, r18
     a0c:	83 9f       	mul	r24, r19
     a0e:	a0 0d       	add	r26, r0
     a10:	61 1d       	adc	r22, r1
     a12:	22 1f       	adc	r18, r18
     a14:	74 9f       	mul	r23, r20
     a16:	33 27       	eor	r19, r19
     a18:	a0 0d       	add	r26, r0
     a1a:	61 1d       	adc	r22, r1
     a1c:	23 1f       	adc	r18, r19
     a1e:	84 9f       	mul	r24, r20
     a20:	60 0d       	add	r22, r0
     a22:	21 1d       	adc	r18, r1
     a24:	82 2f       	mov	r24, r18
     a26:	76 2f       	mov	r23, r22
     a28:	6a 2f       	mov	r22, r26
     a2a:	11 24       	eor	r1, r1
     a2c:	9f 57       	subi	r25, 0x7F	; 127
     a2e:	50 40       	sbci	r21, 0x00	; 0
     a30:	8a f0       	brmi	.+34     	; 0xa54 <__mulsf3_pse+0x84>
     a32:	e1 f0       	breq	.+56     	; 0xa6c <__mulsf3_pse+0x9c>
     a34:	88 23       	and	r24, r24
     a36:	4a f0       	brmi	.+18     	; 0xa4a <__mulsf3_pse+0x7a>
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	bb 1f       	adc	r27, r27
     a3e:	66 1f       	adc	r22, r22
     a40:	77 1f       	adc	r23, r23
     a42:	88 1f       	adc	r24, r24
     a44:	91 50       	subi	r25, 0x01	; 1
     a46:	50 40       	sbci	r21, 0x00	; 0
     a48:	a9 f7       	brne	.-22     	; 0xa34 <__mulsf3_pse+0x64>
     a4a:	9e 3f       	cpi	r25, 0xFE	; 254
     a4c:	51 05       	cpc	r21, r1
     a4e:	70 f0       	brcs	.+28     	; 0xa6c <__mulsf3_pse+0x9c>
     a50:	60 cf       	rjmp	.-320    	; 0x912 <__fp_inf>
     a52:	aa cf       	rjmp	.-172    	; 0x9a8 <__fp_szero>
     a54:	5f 3f       	cpi	r21, 0xFF	; 255
     a56:	ec f3       	brlt	.-6      	; 0xa52 <__mulsf3_pse+0x82>
     a58:	98 3e       	cpi	r25, 0xE8	; 232
     a5a:	dc f3       	brlt	.-10     	; 0xa52 <__mulsf3_pse+0x82>
     a5c:	86 95       	lsr	r24
     a5e:	77 95       	ror	r23
     a60:	67 95       	ror	r22
     a62:	b7 95       	ror	r27
     a64:	f7 95       	ror	r31
     a66:	e7 95       	ror	r30
     a68:	9f 5f       	subi	r25, 0xFF	; 255
     a6a:	c1 f7       	brne	.-16     	; 0xa5c <__mulsf3_pse+0x8c>
     a6c:	fe 2b       	or	r31, r30
     a6e:	88 0f       	add	r24, r24
     a70:	91 1d       	adc	r25, r1
     a72:	96 95       	lsr	r25
     a74:	87 95       	ror	r24
     a76:	97 f9       	bld	r25, 7
     a78:	08 95       	ret

00000a7a <__divmodhi4>:
     a7a:	97 fb       	bst	r25, 7
     a7c:	07 2e       	mov	r0, r23
     a7e:	16 f4       	brtc	.+4      	; 0xa84 <__divmodhi4+0xa>
     a80:	00 94       	com	r0
     a82:	06 d0       	rcall	.+12     	; 0xa90 <__divmodhi4_neg1>
     a84:	77 fd       	sbrc	r23, 7
     a86:	08 d0       	rcall	.+16     	; 0xa98 <__divmodhi4_neg2>
     a88:	0b d0       	rcall	.+22     	; 0xaa0 <__udivmodhi4>
     a8a:	07 fc       	sbrc	r0, 7
     a8c:	05 d0       	rcall	.+10     	; 0xa98 <__divmodhi4_neg2>
     a8e:	3e f4       	brtc	.+14     	; 0xa9e <__divmodhi4_exit>

00000a90 <__divmodhi4_neg1>:
     a90:	90 95       	com	r25
     a92:	81 95       	neg	r24
     a94:	9f 4f       	sbci	r25, 0xFF	; 255
     a96:	08 95       	ret

00000a98 <__divmodhi4_neg2>:
     a98:	70 95       	com	r23
     a9a:	61 95       	neg	r22
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a9e <__divmodhi4_exit>:
     a9e:	08 95       	ret

00000aa0 <__udivmodhi4>:
     aa0:	aa 1b       	sub	r26, r26
     aa2:	bb 1b       	sub	r27, r27
     aa4:	51 e1       	ldi	r21, 0x11	; 17
     aa6:	07 c0       	rjmp	.+14     	; 0xab6 <__udivmodhi4_ep>

00000aa8 <__udivmodhi4_loop>:
     aa8:	aa 1f       	adc	r26, r26
     aaa:	bb 1f       	adc	r27, r27
     aac:	a6 17       	cp	r26, r22
     aae:	b7 07       	cpc	r27, r23
     ab0:	10 f0       	brcs	.+4      	; 0xab6 <__udivmodhi4_ep>
     ab2:	a6 1b       	sub	r26, r22
     ab4:	b7 0b       	sbc	r27, r23

00000ab6 <__udivmodhi4_ep>:
     ab6:	88 1f       	adc	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	5a 95       	dec	r21
     abc:	a9 f7       	brne	.-22     	; 0xaa8 <__udivmodhi4_loop>
     abe:	80 95       	com	r24
     ac0:	90 95       	com	r25
     ac2:	bc 01       	movw	r22, r24
     ac4:	cd 01       	movw	r24, r26
     ac6:	08 95       	ret

00000ac8 <do_rand>:
     ac8:	8f 92       	push	r8
     aca:	9f 92       	push	r9
     acc:	af 92       	push	r10
     ace:	bf 92       	push	r11
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	ec 01       	movw	r28, r24
     ade:	68 81       	ld	r22, Y
     ae0:	79 81       	ldd	r23, Y+1	; 0x01
     ae2:	8a 81       	ldd	r24, Y+2	; 0x02
     ae4:	9b 81       	ldd	r25, Y+3	; 0x03
     ae6:	61 15       	cp	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	81 05       	cpc	r24, r1
     aec:	91 05       	cpc	r25, r1
     aee:	21 f4       	brne	.+8      	; 0xaf8 <do_rand+0x30>
     af0:	64 e2       	ldi	r22, 0x24	; 36
     af2:	79 ed       	ldi	r23, 0xD9	; 217
     af4:	8b e5       	ldi	r24, 0x5B	; 91
     af6:	97 e0       	ldi	r25, 0x07	; 7
     af8:	2d e1       	ldi	r18, 0x1D	; 29
     afa:	33 ef       	ldi	r19, 0xF3	; 243
     afc:	41 e0       	ldi	r20, 0x01	; 1
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	13 d3       	rcall	.+1574   	; 0x1128 <__divmodsi4>
     b02:	49 01       	movw	r8, r18
     b04:	5a 01       	movw	r10, r20
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	a7 ea       	ldi	r26, 0xA7	; 167
     b0c:	b1 e4       	ldi	r27, 0x41	; 65
     b0e:	28 d3       	rcall	.+1616   	; 0x1160 <__muluhisi3>
     b10:	6b 01       	movw	r12, r22
     b12:	7c 01       	movw	r14, r24
     b14:	ac ee       	ldi	r26, 0xEC	; 236
     b16:	b4 ef       	ldi	r27, 0xF4	; 244
     b18:	a5 01       	movw	r20, r10
     b1a:	94 01       	movw	r18, r8
     b1c:	2d d3       	rcall	.+1626   	; 0x1178 <__mulohisi3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	8c 0d       	add	r24, r12
     b24:	9d 1d       	adc	r25, r13
     b26:	ae 1d       	adc	r26, r14
     b28:	bf 1d       	adc	r27, r15
     b2a:	b7 ff       	sbrs	r27, 7
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <do_rand+0x6c>
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	a1 09       	sbc	r26, r1
     b32:	b0 48       	sbci	r27, 0x80	; 128
     b34:	88 83       	st	Y, r24
     b36:	99 83       	std	Y+1, r25	; 0x01
     b38:	aa 83       	std	Y+2, r26	; 0x02
     b3a:	bb 83       	std	Y+3, r27	; 0x03
     b3c:	9f 77       	andi	r25, 0x7F	; 127
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	cf 90       	pop	r12
     b4a:	bf 90       	pop	r11
     b4c:	af 90       	pop	r10
     b4e:	9f 90       	pop	r9
     b50:	8f 90       	pop	r8
     b52:	08 95       	ret

00000b54 <rand_r>:
     b54:	b9 cf       	rjmp	.-142    	; 0xac8 <do_rand>

00000b56 <rand>:
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	b6 cf       	rjmp	.-148    	; 0xac8 <do_rand>

00000b5c <srand>:
     b5c:	a0 e0       	ldi	r26, 0x00	; 0
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     b64:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     b68:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     b6c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     b70:	08 95       	ret

00000b72 <sprintf>:
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	2e 97       	sbiw	r28, 0x0e	; 14
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	0d 89       	ldd	r16, Y+21	; 0x15
     b8c:	1e 89       	ldd	r17, Y+22	; 0x16
     b8e:	86 e0       	ldi	r24, 0x06	; 6
     b90:	8c 83       	std	Y+4, r24	; 0x04
     b92:	1a 83       	std	Y+2, r17	; 0x02
     b94:	09 83       	std	Y+1, r16	; 0x01
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	9f e7       	ldi	r25, 0x7F	; 127
     b9a:	9e 83       	std	Y+6, r25	; 0x06
     b9c:	8d 83       	std	Y+5, r24	; 0x05
     b9e:	ae 01       	movw	r20, r28
     ba0:	47 5e       	subi	r20, 0xE7	; 231
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
     ba4:	6f 89       	ldd	r22, Y+23	; 0x17
     ba6:	78 8d       	ldd	r23, Y+24	; 0x18
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	10 d0       	rcall	.+32     	; 0xbce <vfprintf>
     bae:	ef 81       	ldd	r30, Y+7	; 0x07
     bb0:	f8 85       	ldd	r31, Y+8	; 0x08
     bb2:	e0 0f       	add	r30, r16
     bb4:	f1 1f       	adc	r31, r17
     bb6:	10 82       	st	Z, r1
     bb8:	2e 96       	adiw	r28, 0x0e	; 14
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	08 95       	ret

00000bce <vfprintf>:
     bce:	2f 92       	push	r2
     bd0:	3f 92       	push	r3
     bd2:	4f 92       	push	r4
     bd4:	5f 92       	push	r5
     bd6:	6f 92       	push	r6
     bd8:	7f 92       	push	r7
     bda:	8f 92       	push	r8
     bdc:	9f 92       	push	r9
     bde:	af 92       	push	r10
     be0:	bf 92       	push	r11
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	2b 97       	sbiw	r28, 0x0b	; 11
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	6c 01       	movw	r12, r24
     c04:	7b 01       	movw	r14, r22
     c06:	8a 01       	movw	r16, r20
     c08:	fc 01       	movw	r30, r24
     c0a:	17 82       	std	Z+7, r1	; 0x07
     c0c:	16 82       	std	Z+6, r1	; 0x06
     c0e:	83 81       	ldd	r24, Z+3	; 0x03
     c10:	81 ff       	sbrs	r24, 1
     c12:	bf c1       	rjmp	.+894    	; 0xf92 <vfprintf+0x3c4>
     c14:	ce 01       	movw	r24, r28
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	3c 01       	movw	r6, r24
     c1a:	f6 01       	movw	r30, r12
     c1c:	93 81       	ldd	r25, Z+3	; 0x03
     c1e:	f7 01       	movw	r30, r14
     c20:	93 fd       	sbrc	r25, 3
     c22:	85 91       	lpm	r24, Z+
     c24:	93 ff       	sbrs	r25, 3
     c26:	81 91       	ld	r24, Z+
     c28:	7f 01       	movw	r14, r30
     c2a:	88 23       	and	r24, r24
     c2c:	09 f4       	brne	.+2      	; 0xc30 <vfprintf+0x62>
     c2e:	ad c1       	rjmp	.+858    	; 0xf8a <vfprintf+0x3bc>
     c30:	85 32       	cpi	r24, 0x25	; 37
     c32:	39 f4       	brne	.+14     	; 0xc42 <vfprintf+0x74>
     c34:	93 fd       	sbrc	r25, 3
     c36:	85 91       	lpm	r24, Z+
     c38:	93 ff       	sbrs	r25, 3
     c3a:	81 91       	ld	r24, Z+
     c3c:	7f 01       	movw	r14, r30
     c3e:	85 32       	cpi	r24, 0x25	; 37
     c40:	21 f4       	brne	.+8      	; 0xc4a <vfprintf+0x7c>
     c42:	b6 01       	movw	r22, r12
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	d6 d1       	rcall	.+940    	; 0xff4 <fputc>
     c48:	e8 cf       	rjmp	.-48     	; 0xc1a <vfprintf+0x4c>
     c4a:	91 2c       	mov	r9, r1
     c4c:	21 2c       	mov	r2, r1
     c4e:	31 2c       	mov	r3, r1
     c50:	ff e1       	ldi	r31, 0x1F	; 31
     c52:	f3 15       	cp	r31, r3
     c54:	d8 f0       	brcs	.+54     	; 0xc8c <vfprintf+0xbe>
     c56:	8b 32       	cpi	r24, 0x2B	; 43
     c58:	79 f0       	breq	.+30     	; 0xc78 <vfprintf+0xaa>
     c5a:	38 f4       	brcc	.+14     	; 0xc6a <vfprintf+0x9c>
     c5c:	80 32       	cpi	r24, 0x20	; 32
     c5e:	79 f0       	breq	.+30     	; 0xc7e <vfprintf+0xb0>
     c60:	83 32       	cpi	r24, 0x23	; 35
     c62:	a1 f4       	brne	.+40     	; 0xc8c <vfprintf+0xbe>
     c64:	23 2d       	mov	r18, r3
     c66:	20 61       	ori	r18, 0x10	; 16
     c68:	1d c0       	rjmp	.+58     	; 0xca4 <vfprintf+0xd6>
     c6a:	8d 32       	cpi	r24, 0x2D	; 45
     c6c:	61 f0       	breq	.+24     	; 0xc86 <vfprintf+0xb8>
     c6e:	80 33       	cpi	r24, 0x30	; 48
     c70:	69 f4       	brne	.+26     	; 0xc8c <vfprintf+0xbe>
     c72:	23 2d       	mov	r18, r3
     c74:	21 60       	ori	r18, 0x01	; 1
     c76:	16 c0       	rjmp	.+44     	; 0xca4 <vfprintf+0xd6>
     c78:	83 2d       	mov	r24, r3
     c7a:	82 60       	ori	r24, 0x02	; 2
     c7c:	38 2e       	mov	r3, r24
     c7e:	e3 2d       	mov	r30, r3
     c80:	e4 60       	ori	r30, 0x04	; 4
     c82:	3e 2e       	mov	r3, r30
     c84:	2a c0       	rjmp	.+84     	; 0xcda <vfprintf+0x10c>
     c86:	f3 2d       	mov	r31, r3
     c88:	f8 60       	ori	r31, 0x08	; 8
     c8a:	1d c0       	rjmp	.+58     	; 0xcc6 <vfprintf+0xf8>
     c8c:	37 fc       	sbrc	r3, 7
     c8e:	2d c0       	rjmp	.+90     	; 0xcea <vfprintf+0x11c>
     c90:	20 ed       	ldi	r18, 0xD0	; 208
     c92:	28 0f       	add	r18, r24
     c94:	2a 30       	cpi	r18, 0x0A	; 10
     c96:	40 f0       	brcs	.+16     	; 0xca8 <vfprintf+0xda>
     c98:	8e 32       	cpi	r24, 0x2E	; 46
     c9a:	b9 f4       	brne	.+46     	; 0xcca <vfprintf+0xfc>
     c9c:	36 fc       	sbrc	r3, 6
     c9e:	75 c1       	rjmp	.+746    	; 0xf8a <vfprintf+0x3bc>
     ca0:	23 2d       	mov	r18, r3
     ca2:	20 64       	ori	r18, 0x40	; 64
     ca4:	32 2e       	mov	r3, r18
     ca6:	19 c0       	rjmp	.+50     	; 0xcda <vfprintf+0x10c>
     ca8:	36 fe       	sbrs	r3, 6
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <vfprintf+0xea>
     cac:	8a e0       	ldi	r24, 0x0A	; 10
     cae:	98 9e       	mul	r9, r24
     cb0:	20 0d       	add	r18, r0
     cb2:	11 24       	eor	r1, r1
     cb4:	92 2e       	mov	r9, r18
     cb6:	11 c0       	rjmp	.+34     	; 0xcda <vfprintf+0x10c>
     cb8:	ea e0       	ldi	r30, 0x0A	; 10
     cba:	2e 9e       	mul	r2, r30
     cbc:	20 0d       	add	r18, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	22 2e       	mov	r2, r18
     cc2:	f3 2d       	mov	r31, r3
     cc4:	f0 62       	ori	r31, 0x20	; 32
     cc6:	3f 2e       	mov	r3, r31
     cc8:	08 c0       	rjmp	.+16     	; 0xcda <vfprintf+0x10c>
     cca:	8c 36       	cpi	r24, 0x6C	; 108
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <vfprintf+0x108>
     cce:	83 2d       	mov	r24, r3
     cd0:	80 68       	ori	r24, 0x80	; 128
     cd2:	38 2e       	mov	r3, r24
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x10c>
     cd6:	88 36       	cpi	r24, 0x68	; 104
     cd8:	41 f4       	brne	.+16     	; 0xcea <vfprintf+0x11c>
     cda:	f7 01       	movw	r30, r14
     cdc:	93 fd       	sbrc	r25, 3
     cde:	85 91       	lpm	r24, Z+
     ce0:	93 ff       	sbrs	r25, 3
     ce2:	81 91       	ld	r24, Z+
     ce4:	7f 01       	movw	r14, r30
     ce6:	81 11       	cpse	r24, r1
     ce8:	b3 cf       	rjmp	.-154    	; 0xc50 <vfprintf+0x82>
     cea:	98 2f       	mov	r25, r24
     cec:	9f 7d       	andi	r25, 0xDF	; 223
     cee:	95 54       	subi	r25, 0x45	; 69
     cf0:	93 30       	cpi	r25, 0x03	; 3
     cf2:	28 f4       	brcc	.+10     	; 0xcfe <vfprintf+0x130>
     cf4:	0c 5f       	subi	r16, 0xFC	; 252
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	9f e3       	ldi	r25, 0x3F	; 63
     cfa:	99 83       	std	Y+1, r25	; 0x01
     cfc:	0d c0       	rjmp	.+26     	; 0xd18 <vfprintf+0x14a>
     cfe:	83 36       	cpi	r24, 0x63	; 99
     d00:	31 f0       	breq	.+12     	; 0xd0e <vfprintf+0x140>
     d02:	83 37       	cpi	r24, 0x73	; 115
     d04:	71 f0       	breq	.+28     	; 0xd22 <vfprintf+0x154>
     d06:	83 35       	cpi	r24, 0x53	; 83
     d08:	09 f0       	breq	.+2      	; 0xd0c <vfprintf+0x13e>
     d0a:	55 c0       	rjmp	.+170    	; 0xdb6 <vfprintf+0x1e8>
     d0c:	20 c0       	rjmp	.+64     	; 0xd4e <vfprintf+0x180>
     d0e:	f8 01       	movw	r30, r16
     d10:	80 81       	ld	r24, Z
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	0e 5f       	subi	r16, 0xFE	; 254
     d16:	1f 4f       	sbci	r17, 0xFF	; 255
     d18:	88 24       	eor	r8, r8
     d1a:	83 94       	inc	r8
     d1c:	91 2c       	mov	r9, r1
     d1e:	53 01       	movw	r10, r6
     d20:	12 c0       	rjmp	.+36     	; 0xd46 <vfprintf+0x178>
     d22:	28 01       	movw	r4, r16
     d24:	f2 e0       	ldi	r31, 0x02	; 2
     d26:	4f 0e       	add	r4, r31
     d28:	51 1c       	adc	r5, r1
     d2a:	f8 01       	movw	r30, r16
     d2c:	a0 80       	ld	r10, Z
     d2e:	b1 80       	ldd	r11, Z+1	; 0x01
     d30:	36 fe       	sbrs	r3, 6
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <vfprintf+0x16c>
     d34:	69 2d       	mov	r22, r9
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0x170>
     d3a:	6f ef       	ldi	r22, 0xFF	; 255
     d3c:	7f ef       	ldi	r23, 0xFF	; 255
     d3e:	c5 01       	movw	r24, r10
     d40:	4e d1       	rcall	.+668    	; 0xfde <strnlen>
     d42:	4c 01       	movw	r8, r24
     d44:	82 01       	movw	r16, r4
     d46:	f3 2d       	mov	r31, r3
     d48:	ff 77       	andi	r31, 0x7F	; 127
     d4a:	3f 2e       	mov	r3, r31
     d4c:	15 c0       	rjmp	.+42     	; 0xd78 <vfprintf+0x1aa>
     d4e:	28 01       	movw	r4, r16
     d50:	22 e0       	ldi	r18, 0x02	; 2
     d52:	42 0e       	add	r4, r18
     d54:	51 1c       	adc	r5, r1
     d56:	f8 01       	movw	r30, r16
     d58:	a0 80       	ld	r10, Z
     d5a:	b1 80       	ldd	r11, Z+1	; 0x01
     d5c:	36 fe       	sbrs	r3, 6
     d5e:	03 c0       	rjmp	.+6      	; 0xd66 <vfprintf+0x198>
     d60:	69 2d       	mov	r22, r9
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <vfprintf+0x19c>
     d66:	6f ef       	ldi	r22, 0xFF	; 255
     d68:	7f ef       	ldi	r23, 0xFF	; 255
     d6a:	c5 01       	movw	r24, r10
     d6c:	2d d1       	rcall	.+602    	; 0xfc8 <strnlen_P>
     d6e:	4c 01       	movw	r8, r24
     d70:	f3 2d       	mov	r31, r3
     d72:	f0 68       	ori	r31, 0x80	; 128
     d74:	3f 2e       	mov	r3, r31
     d76:	82 01       	movw	r16, r4
     d78:	33 fc       	sbrc	r3, 3
     d7a:	19 c0       	rjmp	.+50     	; 0xdae <vfprintf+0x1e0>
     d7c:	82 2d       	mov	r24, r2
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	88 16       	cp	r8, r24
     d82:	99 06       	cpc	r9, r25
     d84:	a0 f4       	brcc	.+40     	; 0xdae <vfprintf+0x1e0>
     d86:	b6 01       	movw	r22, r12
     d88:	80 e2       	ldi	r24, 0x20	; 32
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	33 d1       	rcall	.+614    	; 0xff4 <fputc>
     d8e:	2a 94       	dec	r2
     d90:	f5 cf       	rjmp	.-22     	; 0xd7c <vfprintf+0x1ae>
     d92:	f5 01       	movw	r30, r10
     d94:	37 fc       	sbrc	r3, 7
     d96:	85 91       	lpm	r24, Z+
     d98:	37 fe       	sbrs	r3, 7
     d9a:	81 91       	ld	r24, Z+
     d9c:	5f 01       	movw	r10, r30
     d9e:	b6 01       	movw	r22, r12
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	28 d1       	rcall	.+592    	; 0xff4 <fputc>
     da4:	21 10       	cpse	r2, r1
     da6:	2a 94       	dec	r2
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	82 1a       	sub	r8, r18
     dac:	91 08       	sbc	r9, r1
     dae:	81 14       	cp	r8, r1
     db0:	91 04       	cpc	r9, r1
     db2:	79 f7       	brne	.-34     	; 0xd92 <vfprintf+0x1c4>
     db4:	e1 c0       	rjmp	.+450    	; 0xf78 <vfprintf+0x3aa>
     db6:	84 36       	cpi	r24, 0x64	; 100
     db8:	11 f0       	breq	.+4      	; 0xdbe <vfprintf+0x1f0>
     dba:	89 36       	cpi	r24, 0x69	; 105
     dbc:	39 f5       	brne	.+78     	; 0xe0c <vfprintf+0x23e>
     dbe:	f8 01       	movw	r30, r16
     dc0:	37 fe       	sbrs	r3, 7
     dc2:	07 c0       	rjmp	.+14     	; 0xdd2 <vfprintf+0x204>
     dc4:	60 81       	ld	r22, Z
     dc6:	71 81       	ldd	r23, Z+1	; 0x01
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	93 81       	ldd	r25, Z+3	; 0x03
     dcc:	0c 5f       	subi	r16, 0xFC	; 252
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	08 c0       	rjmp	.+16     	; 0xde2 <vfprintf+0x214>
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	07 2e       	mov	r0, r23
     dd8:	00 0c       	add	r0, r0
     dda:	88 0b       	sbc	r24, r24
     ddc:	99 0b       	sbc	r25, r25
     dde:	0e 5f       	subi	r16, 0xFE	; 254
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	f3 2d       	mov	r31, r3
     de4:	ff 76       	andi	r31, 0x6F	; 111
     de6:	3f 2e       	mov	r3, r31
     de8:	97 ff       	sbrs	r25, 7
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <vfprintf+0x230>
     dec:	90 95       	com	r25
     dee:	80 95       	com	r24
     df0:	70 95       	com	r23
     df2:	61 95       	neg	r22
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	8f 4f       	sbci	r24, 0xFF	; 255
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	f0 68       	ori	r31, 0x80	; 128
     dfc:	3f 2e       	mov	r3, r31
     dfe:	2a e0       	ldi	r18, 0x0A	; 10
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	a3 01       	movw	r20, r6
     e04:	33 d1       	rcall	.+614    	; 0x106c <__ultoa_invert>
     e06:	88 2e       	mov	r8, r24
     e08:	86 18       	sub	r8, r6
     e0a:	44 c0       	rjmp	.+136    	; 0xe94 <vfprintf+0x2c6>
     e0c:	85 37       	cpi	r24, 0x75	; 117
     e0e:	31 f4       	brne	.+12     	; 0xe1c <vfprintf+0x24e>
     e10:	23 2d       	mov	r18, r3
     e12:	2f 7e       	andi	r18, 0xEF	; 239
     e14:	b2 2e       	mov	r11, r18
     e16:	2a e0       	ldi	r18, 0x0A	; 10
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	25 c0       	rjmp	.+74     	; 0xe66 <vfprintf+0x298>
     e1c:	93 2d       	mov	r25, r3
     e1e:	99 7f       	andi	r25, 0xF9	; 249
     e20:	b9 2e       	mov	r11, r25
     e22:	8f 36       	cpi	r24, 0x6F	; 111
     e24:	c1 f0       	breq	.+48     	; 0xe56 <vfprintf+0x288>
     e26:	18 f4       	brcc	.+6      	; 0xe2e <vfprintf+0x260>
     e28:	88 35       	cpi	r24, 0x58	; 88
     e2a:	79 f0       	breq	.+30     	; 0xe4a <vfprintf+0x27c>
     e2c:	ae c0       	rjmp	.+348    	; 0xf8a <vfprintf+0x3bc>
     e2e:	80 37       	cpi	r24, 0x70	; 112
     e30:	19 f0       	breq	.+6      	; 0xe38 <vfprintf+0x26a>
     e32:	88 37       	cpi	r24, 0x78	; 120
     e34:	21 f0       	breq	.+8      	; 0xe3e <vfprintf+0x270>
     e36:	a9 c0       	rjmp	.+338    	; 0xf8a <vfprintf+0x3bc>
     e38:	e9 2f       	mov	r30, r25
     e3a:	e0 61       	ori	r30, 0x10	; 16
     e3c:	be 2e       	mov	r11, r30
     e3e:	b4 fe       	sbrs	r11, 4
     e40:	0d c0       	rjmp	.+26     	; 0xe5c <vfprintf+0x28e>
     e42:	fb 2d       	mov	r31, r11
     e44:	f4 60       	ori	r31, 0x04	; 4
     e46:	bf 2e       	mov	r11, r31
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <vfprintf+0x28e>
     e4a:	34 fe       	sbrs	r3, 4
     e4c:	0a c0       	rjmp	.+20     	; 0xe62 <vfprintf+0x294>
     e4e:	29 2f       	mov	r18, r25
     e50:	26 60       	ori	r18, 0x06	; 6
     e52:	b2 2e       	mov	r11, r18
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <vfprintf+0x294>
     e56:	28 e0       	ldi	r18, 0x08	; 8
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <vfprintf+0x298>
     e5c:	20 e1       	ldi	r18, 0x10	; 16
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <vfprintf+0x298>
     e62:	20 e1       	ldi	r18, 0x10	; 16
     e64:	32 e0       	ldi	r19, 0x02	; 2
     e66:	f8 01       	movw	r30, r16
     e68:	b7 fe       	sbrs	r11, 7
     e6a:	07 c0       	rjmp	.+14     	; 0xe7a <vfprintf+0x2ac>
     e6c:	60 81       	ld	r22, Z
     e6e:	71 81       	ldd	r23, Z+1	; 0x01
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	93 81       	ldd	r25, Z+3	; 0x03
     e74:	0c 5f       	subi	r16, 0xFC	; 252
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <vfprintf+0x2b8>
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 5f       	subi	r16, 0xFE	; 254
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	a3 01       	movw	r20, r6
     e88:	f1 d0       	rcall	.+482    	; 0x106c <__ultoa_invert>
     e8a:	88 2e       	mov	r8, r24
     e8c:	86 18       	sub	r8, r6
     e8e:	fb 2d       	mov	r31, r11
     e90:	ff 77       	andi	r31, 0x7F	; 127
     e92:	3f 2e       	mov	r3, r31
     e94:	36 fe       	sbrs	r3, 6
     e96:	0d c0       	rjmp	.+26     	; 0xeb2 <vfprintf+0x2e4>
     e98:	23 2d       	mov	r18, r3
     e9a:	2e 7f       	andi	r18, 0xFE	; 254
     e9c:	a2 2e       	mov	r10, r18
     e9e:	89 14       	cp	r8, r9
     ea0:	58 f4       	brcc	.+22     	; 0xeb8 <vfprintf+0x2ea>
     ea2:	34 fe       	sbrs	r3, 4
     ea4:	0b c0       	rjmp	.+22     	; 0xebc <vfprintf+0x2ee>
     ea6:	32 fc       	sbrc	r3, 2
     ea8:	09 c0       	rjmp	.+18     	; 0xebc <vfprintf+0x2ee>
     eaa:	83 2d       	mov	r24, r3
     eac:	8e 7e       	andi	r24, 0xEE	; 238
     eae:	a8 2e       	mov	r10, r24
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <vfprintf+0x2ee>
     eb2:	b8 2c       	mov	r11, r8
     eb4:	a3 2c       	mov	r10, r3
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <vfprintf+0x2f0>
     eb8:	b8 2c       	mov	r11, r8
     eba:	01 c0       	rjmp	.+2      	; 0xebe <vfprintf+0x2f0>
     ebc:	b9 2c       	mov	r11, r9
     ebe:	a4 fe       	sbrs	r10, 4
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <vfprintf+0x312>
     ec2:	fe 01       	movw	r30, r28
     ec4:	e8 0d       	add	r30, r8
     ec6:	f1 1d       	adc	r31, r1
     ec8:	80 81       	ld	r24, Z
     eca:	80 33       	cpi	r24, 0x30	; 48
     ecc:	21 f4       	brne	.+8      	; 0xed6 <vfprintf+0x308>
     ece:	9a 2d       	mov	r25, r10
     ed0:	99 7e       	andi	r25, 0xE9	; 233
     ed2:	a9 2e       	mov	r10, r25
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <vfprintf+0x31a>
     ed6:	a2 fe       	sbrs	r10, 2
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <vfprintf+0x318>
     eda:	b3 94       	inc	r11
     edc:	b3 94       	inc	r11
     ede:	04 c0       	rjmp	.+8      	; 0xee8 <vfprintf+0x31a>
     ee0:	8a 2d       	mov	r24, r10
     ee2:	86 78       	andi	r24, 0x86	; 134
     ee4:	09 f0       	breq	.+2      	; 0xee8 <vfprintf+0x31a>
     ee6:	b3 94       	inc	r11
     ee8:	a3 fc       	sbrc	r10, 3
     eea:	10 c0       	rjmp	.+32     	; 0xf0c <vfprintf+0x33e>
     eec:	a0 fe       	sbrs	r10, 0
     eee:	06 c0       	rjmp	.+12     	; 0xefc <vfprintf+0x32e>
     ef0:	b2 14       	cp	r11, r2
     ef2:	80 f4       	brcc	.+32     	; 0xf14 <vfprintf+0x346>
     ef4:	28 0c       	add	r2, r8
     ef6:	92 2c       	mov	r9, r2
     ef8:	9b 18       	sub	r9, r11
     efa:	0d c0       	rjmp	.+26     	; 0xf16 <vfprintf+0x348>
     efc:	b2 14       	cp	r11, r2
     efe:	58 f4       	brcc	.+22     	; 0xf16 <vfprintf+0x348>
     f00:	b6 01       	movw	r22, r12
     f02:	80 e2       	ldi	r24, 0x20	; 32
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	76 d0       	rcall	.+236    	; 0xff4 <fputc>
     f08:	b3 94       	inc	r11
     f0a:	f8 cf       	rjmp	.-16     	; 0xefc <vfprintf+0x32e>
     f0c:	b2 14       	cp	r11, r2
     f0e:	18 f4       	brcc	.+6      	; 0xf16 <vfprintf+0x348>
     f10:	2b 18       	sub	r2, r11
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <vfprintf+0x34a>
     f14:	98 2c       	mov	r9, r8
     f16:	21 2c       	mov	r2, r1
     f18:	a4 fe       	sbrs	r10, 4
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <vfprintf+0x36c>
     f1c:	b6 01       	movw	r22, r12
     f1e:	80 e3       	ldi	r24, 0x30	; 48
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	68 d0       	rcall	.+208    	; 0xff4 <fputc>
     f24:	a2 fe       	sbrs	r10, 2
     f26:	16 c0       	rjmp	.+44     	; 0xf54 <vfprintf+0x386>
     f28:	a1 fc       	sbrc	r10, 1
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <vfprintf+0x364>
     f2c:	88 e7       	ldi	r24, 0x78	; 120
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <vfprintf+0x368>
     f32:	88 e5       	ldi	r24, 0x58	; 88
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	b6 01       	movw	r22, r12
     f38:	0c c0       	rjmp	.+24     	; 0xf52 <vfprintf+0x384>
     f3a:	8a 2d       	mov	r24, r10
     f3c:	86 78       	andi	r24, 0x86	; 134
     f3e:	51 f0       	breq	.+20     	; 0xf54 <vfprintf+0x386>
     f40:	a1 fe       	sbrs	r10, 1
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <vfprintf+0x37a>
     f44:	8b e2       	ldi	r24, 0x2B	; 43
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <vfprintf+0x37c>
     f48:	80 e2       	ldi	r24, 0x20	; 32
     f4a:	a7 fc       	sbrc	r10, 7
     f4c:	8d e2       	ldi	r24, 0x2D	; 45
     f4e:	b6 01       	movw	r22, r12
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	50 d0       	rcall	.+160    	; 0xff4 <fputc>
     f54:	89 14       	cp	r8, r9
     f56:	30 f4       	brcc	.+12     	; 0xf64 <vfprintf+0x396>
     f58:	b6 01       	movw	r22, r12
     f5a:	80 e3       	ldi	r24, 0x30	; 48
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	4a d0       	rcall	.+148    	; 0xff4 <fputc>
     f60:	9a 94       	dec	r9
     f62:	f8 cf       	rjmp	.-16     	; 0xf54 <vfprintf+0x386>
     f64:	8a 94       	dec	r8
     f66:	f3 01       	movw	r30, r6
     f68:	e8 0d       	add	r30, r8
     f6a:	f1 1d       	adc	r31, r1
     f6c:	80 81       	ld	r24, Z
     f6e:	b6 01       	movw	r22, r12
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	40 d0       	rcall	.+128    	; 0xff4 <fputc>
     f74:	81 10       	cpse	r8, r1
     f76:	f6 cf       	rjmp	.-20     	; 0xf64 <vfprintf+0x396>
     f78:	22 20       	and	r2, r2
     f7a:	09 f4       	brne	.+2      	; 0xf7e <vfprintf+0x3b0>
     f7c:	4e ce       	rjmp	.-868    	; 0xc1a <vfprintf+0x4c>
     f7e:	b6 01       	movw	r22, r12
     f80:	80 e2       	ldi	r24, 0x20	; 32
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	37 d0       	rcall	.+110    	; 0xff4 <fputc>
     f86:	2a 94       	dec	r2
     f88:	f7 cf       	rjmp	.-18     	; 0xf78 <vfprintf+0x3aa>
     f8a:	f6 01       	movw	r30, r12
     f8c:	86 81       	ldd	r24, Z+6	; 0x06
     f8e:	97 81       	ldd	r25, Z+7	; 0x07
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <vfprintf+0x3c8>
     f92:	8f ef       	ldi	r24, 0xFF	; 255
     f94:	9f ef       	ldi	r25, 0xFF	; 255
     f96:	2b 96       	adiw	r28, 0x0b	; 11
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	df 90       	pop	r13
     fb0:	cf 90       	pop	r12
     fb2:	bf 90       	pop	r11
     fb4:	af 90       	pop	r10
     fb6:	9f 90       	pop	r9
     fb8:	8f 90       	pop	r8
     fba:	7f 90       	pop	r7
     fbc:	6f 90       	pop	r6
     fbe:	5f 90       	pop	r5
     fc0:	4f 90       	pop	r4
     fc2:	3f 90       	pop	r3
     fc4:	2f 90       	pop	r2
     fc6:	08 95       	ret

00000fc8 <strnlen_P>:
     fc8:	fc 01       	movw	r30, r24
     fca:	05 90       	lpm	r0, Z+
     fcc:	61 50       	subi	r22, 0x01	; 1
     fce:	70 40       	sbci	r23, 0x00	; 0
     fd0:	01 10       	cpse	r0, r1
     fd2:	d8 f7       	brcc	.-10     	; 0xfca <strnlen_P+0x2>
     fd4:	80 95       	com	r24
     fd6:	90 95       	com	r25
     fd8:	8e 0f       	add	r24, r30
     fda:	9f 1f       	adc	r25, r31
     fdc:	08 95       	ret

00000fde <strnlen>:
     fde:	fc 01       	movw	r30, r24
     fe0:	61 50       	subi	r22, 0x01	; 1
     fe2:	70 40       	sbci	r23, 0x00	; 0
     fe4:	01 90       	ld	r0, Z+
     fe6:	01 10       	cpse	r0, r1
     fe8:	d8 f7       	brcc	.-10     	; 0xfe0 <strnlen+0x2>
     fea:	80 95       	com	r24
     fec:	90 95       	com	r25
     fee:	8e 0f       	add	r24, r30
     ff0:	9f 1f       	adc	r25, r31
     ff2:	08 95       	ret

00000ff4 <fputc>:
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	fb 01       	movw	r30, r22
     ffe:	23 81       	ldd	r18, Z+3	; 0x03
    1000:	21 fd       	sbrc	r18, 1
    1002:	03 c0       	rjmp	.+6      	; 0x100a <__DATA_REGION_LENGTH__+0xa>
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	9f ef       	ldi	r25, 0xFF	; 255
    1008:	2c c0       	rjmp	.+88     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    100a:	22 ff       	sbrs	r18, 2
    100c:	16 c0       	rjmp	.+44     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    100e:	46 81       	ldd	r20, Z+6	; 0x06
    1010:	57 81       	ldd	r21, Z+7	; 0x07
    1012:	24 81       	ldd	r18, Z+4	; 0x04
    1014:	35 81       	ldd	r19, Z+5	; 0x05
    1016:	42 17       	cp	r20, r18
    1018:	53 07       	cpc	r21, r19
    101a:	44 f4       	brge	.+16     	; 0x102c <__DATA_REGION_LENGTH__+0x2c>
    101c:	a0 81       	ld	r26, Z
    101e:	b1 81       	ldd	r27, Z+1	; 0x01
    1020:	9d 01       	movw	r18, r26
    1022:	2f 5f       	subi	r18, 0xFF	; 255
    1024:	3f 4f       	sbci	r19, 0xFF	; 255
    1026:	31 83       	std	Z+1, r19	; 0x01
    1028:	20 83       	st	Z, r18
    102a:	8c 93       	st	X, r24
    102c:	26 81       	ldd	r18, Z+6	; 0x06
    102e:	37 81       	ldd	r19, Z+7	; 0x07
    1030:	2f 5f       	subi	r18, 0xFF	; 255
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	37 83       	std	Z+7, r19	; 0x07
    1036:	26 83       	std	Z+6, r18	; 0x06
    1038:	14 c0       	rjmp	.+40     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    103a:	8b 01       	movw	r16, r22
    103c:	ec 01       	movw	r28, r24
    103e:	fb 01       	movw	r30, r22
    1040:	00 84       	ldd	r0, Z+8	; 0x08
    1042:	f1 85       	ldd	r31, Z+9	; 0x09
    1044:	e0 2d       	mov	r30, r0
    1046:	09 95       	icall
    1048:	89 2b       	or	r24, r25
    104a:	e1 f6       	brne	.-72     	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
    104c:	d8 01       	movw	r26, r16
    104e:	16 96       	adiw	r26, 0x06	; 6
    1050:	8d 91       	ld	r24, X+
    1052:	9c 91       	ld	r25, X
    1054:	17 97       	sbiw	r26, 0x07	; 7
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	17 96       	adiw	r26, 0x07	; 7
    105a:	9c 93       	st	X, r25
    105c:	8e 93       	st	-X, r24
    105e:	16 97       	sbiw	r26, 0x06	; 6
    1060:	ce 01       	movw	r24, r28
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	08 95       	ret

0000106c <__ultoa_invert>:
    106c:	fa 01       	movw	r30, r20
    106e:	aa 27       	eor	r26, r26
    1070:	28 30       	cpi	r18, 0x08	; 8
    1072:	51 f1       	breq	.+84     	; 0x10c8 <__ultoa_invert+0x5c>
    1074:	20 31       	cpi	r18, 0x10	; 16
    1076:	81 f1       	breq	.+96     	; 0x10d8 <__ultoa_invert+0x6c>
    1078:	e8 94       	clt
    107a:	6f 93       	push	r22
    107c:	6e 7f       	andi	r22, 0xFE	; 254
    107e:	6e 5f       	subi	r22, 0xFE	; 254
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	8f 4f       	sbci	r24, 0xFF	; 255
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	af 4f       	sbci	r26, 0xFF	; 255
    1088:	b1 e0       	ldi	r27, 0x01	; 1
    108a:	3e d0       	rcall	.+124    	; 0x1108 <__stack+0x9>
    108c:	b4 e0       	ldi	r27, 0x04	; 4
    108e:	3c d0       	rcall	.+120    	; 0x1108 <__stack+0x9>
    1090:	67 0f       	add	r22, r23
    1092:	78 1f       	adc	r23, r24
    1094:	89 1f       	adc	r24, r25
    1096:	9a 1f       	adc	r25, r26
    1098:	a1 1d       	adc	r26, r1
    109a:	68 0f       	add	r22, r24
    109c:	79 1f       	adc	r23, r25
    109e:	8a 1f       	adc	r24, r26
    10a0:	91 1d       	adc	r25, r1
    10a2:	a1 1d       	adc	r26, r1
    10a4:	6a 0f       	add	r22, r26
    10a6:	71 1d       	adc	r23, r1
    10a8:	81 1d       	adc	r24, r1
    10aa:	91 1d       	adc	r25, r1
    10ac:	a1 1d       	adc	r26, r1
    10ae:	20 d0       	rcall	.+64     	; 0x10f0 <__ultoa_invert+0x84>
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <__ultoa_invert+0x48>
    10b2:	68 94       	set
    10b4:	3f 91       	pop	r19
    10b6:	2a e0       	ldi	r18, 0x0A	; 10
    10b8:	26 9f       	mul	r18, r22
    10ba:	11 24       	eor	r1, r1
    10bc:	30 19       	sub	r19, r0
    10be:	30 5d       	subi	r19, 0xD0	; 208
    10c0:	31 93       	st	Z+, r19
    10c2:	de f6       	brtc	.-74     	; 0x107a <__ultoa_invert+0xe>
    10c4:	cf 01       	movw	r24, r30
    10c6:	08 95       	ret
    10c8:	46 2f       	mov	r20, r22
    10ca:	47 70       	andi	r20, 0x07	; 7
    10cc:	40 5d       	subi	r20, 0xD0	; 208
    10ce:	41 93       	st	Z+, r20
    10d0:	b3 e0       	ldi	r27, 0x03	; 3
    10d2:	0f d0       	rcall	.+30     	; 0x10f2 <__ultoa_invert+0x86>
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__ultoa_invert+0x5c>
    10d6:	f6 cf       	rjmp	.-20     	; 0x10c4 <__ultoa_invert+0x58>
    10d8:	46 2f       	mov	r20, r22
    10da:	4f 70       	andi	r20, 0x0F	; 15
    10dc:	40 5d       	subi	r20, 0xD0	; 208
    10de:	4a 33       	cpi	r20, 0x3A	; 58
    10e0:	18 f0       	brcs	.+6      	; 0x10e8 <__ultoa_invert+0x7c>
    10e2:	49 5d       	subi	r20, 0xD9	; 217
    10e4:	31 fd       	sbrc	r19, 1
    10e6:	40 52       	subi	r20, 0x20	; 32
    10e8:	41 93       	st	Z+, r20
    10ea:	02 d0       	rcall	.+4      	; 0x10f0 <__ultoa_invert+0x84>
    10ec:	a9 f7       	brne	.-22     	; 0x10d8 <__ultoa_invert+0x6c>
    10ee:	ea cf       	rjmp	.-44     	; 0x10c4 <__ultoa_invert+0x58>
    10f0:	b4 e0       	ldi	r27, 0x04	; 4
    10f2:	a6 95       	lsr	r26
    10f4:	97 95       	ror	r25
    10f6:	87 95       	ror	r24
    10f8:	77 95       	ror	r23
    10fa:	67 95       	ror	r22
    10fc:	ba 95       	dec	r27
    10fe:	c9 f7       	brne	.-14     	; 0x10f2 <__ultoa_invert+0x86>
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	61 05       	cpc	r22, r1
    1104:	71 05       	cpc	r23, r1
    1106:	08 95       	ret
    1108:	9b 01       	movw	r18, r22
    110a:	ac 01       	movw	r20, r24
    110c:	0a 2e       	mov	r0, r26
    110e:	06 94       	lsr	r0
    1110:	57 95       	ror	r21
    1112:	47 95       	ror	r20
    1114:	37 95       	ror	r19
    1116:	27 95       	ror	r18
    1118:	ba 95       	dec	r27
    111a:	c9 f7       	brne	.-14     	; 0x110e <__stack+0xf>
    111c:	62 0f       	add	r22, r18
    111e:	73 1f       	adc	r23, r19
    1120:	84 1f       	adc	r24, r20
    1122:	95 1f       	adc	r25, r21
    1124:	a0 1d       	adc	r26, r0
    1126:	08 95       	ret

00001128 <__divmodsi4>:
    1128:	05 2e       	mov	r0, r21
    112a:	97 fb       	bst	r25, 7
    112c:	16 f4       	brtc	.+4      	; 0x1132 <__divmodsi4+0xa>
    112e:	00 94       	com	r0
    1130:	0f d0       	rcall	.+30     	; 0x1150 <__negsi2>
    1132:	57 fd       	sbrc	r21, 7
    1134:	05 d0       	rcall	.+10     	; 0x1140 <__divmodsi4_neg2>
    1136:	24 d0       	rcall	.+72     	; 0x1180 <__udivmodsi4>
    1138:	07 fc       	sbrc	r0, 7
    113a:	02 d0       	rcall	.+4      	; 0x1140 <__divmodsi4_neg2>
    113c:	46 f4       	brtc	.+16     	; 0x114e <__divmodsi4_exit>
    113e:	08 c0       	rjmp	.+16     	; 0x1150 <__negsi2>

00001140 <__divmodsi4_neg2>:
    1140:	50 95       	com	r21
    1142:	40 95       	com	r20
    1144:	30 95       	com	r19
    1146:	21 95       	neg	r18
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	4f 4f       	sbci	r20, 0xFF	; 255
    114c:	5f 4f       	sbci	r21, 0xFF	; 255

0000114e <__divmodsi4_exit>:
    114e:	08 95       	ret

00001150 <__negsi2>:
    1150:	90 95       	com	r25
    1152:	80 95       	com	r24
    1154:	70 95       	com	r23
    1156:	61 95       	neg	r22
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	8f 4f       	sbci	r24, 0xFF	; 255
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	08 95       	ret

00001160 <__muluhisi3>:
    1160:	31 d0       	rcall	.+98     	; 0x11c4 <__umulhisi3>
    1162:	a5 9f       	mul	r26, r21
    1164:	90 0d       	add	r25, r0
    1166:	b4 9f       	mul	r27, r20
    1168:	90 0d       	add	r25, r0
    116a:	a4 9f       	mul	r26, r20
    116c:	80 0d       	add	r24, r0
    116e:	91 1d       	adc	r25, r1
    1170:	11 24       	eor	r1, r1
    1172:	08 95       	ret

00001174 <__mulshisi3>:
    1174:	b7 ff       	sbrs	r27, 7
    1176:	f4 cf       	rjmp	.-24     	; 0x1160 <__muluhisi3>

00001178 <__mulohisi3>:
    1178:	f3 df       	rcall	.-26     	; 0x1160 <__muluhisi3>
    117a:	82 1b       	sub	r24, r18
    117c:	93 0b       	sbc	r25, r19
    117e:	08 95       	ret

00001180 <__udivmodsi4>:
    1180:	a1 e2       	ldi	r26, 0x21	; 33
    1182:	1a 2e       	mov	r1, r26
    1184:	aa 1b       	sub	r26, r26
    1186:	bb 1b       	sub	r27, r27
    1188:	fd 01       	movw	r30, r26
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <__udivmodsi4_ep>

0000118c <__udivmodsi4_loop>:
    118c:	aa 1f       	adc	r26, r26
    118e:	bb 1f       	adc	r27, r27
    1190:	ee 1f       	adc	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	a2 17       	cp	r26, r18
    1196:	b3 07       	cpc	r27, r19
    1198:	e4 07       	cpc	r30, r20
    119a:	f5 07       	cpc	r31, r21
    119c:	20 f0       	brcs	.+8      	; 0x11a6 <__udivmodsi4_ep>
    119e:	a2 1b       	sub	r26, r18
    11a0:	b3 0b       	sbc	r27, r19
    11a2:	e4 0b       	sbc	r30, r20
    11a4:	f5 0b       	sbc	r31, r21

000011a6 <__udivmodsi4_ep>:
    11a6:	66 1f       	adc	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	1a 94       	dec	r1
    11b0:	69 f7       	brne	.-38     	; 0x118c <__udivmodsi4_loop>
    11b2:	60 95       	com	r22
    11b4:	70 95       	com	r23
    11b6:	80 95       	com	r24
    11b8:	90 95       	com	r25
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	bd 01       	movw	r22, r26
    11c0:	cf 01       	movw	r24, r30
    11c2:	08 95       	ret

000011c4 <__umulhisi3>:
    11c4:	a2 9f       	mul	r26, r18
    11c6:	b0 01       	movw	r22, r0
    11c8:	b3 9f       	mul	r27, r19
    11ca:	c0 01       	movw	r24, r0
    11cc:	a3 9f       	mul	r26, r19
    11ce:	70 0d       	add	r23, r0
    11d0:	81 1d       	adc	r24, r1
    11d2:	11 24       	eor	r1, r1
    11d4:	91 1d       	adc	r25, r1
    11d6:	b2 9f       	mul	r27, r18
    11d8:	70 0d       	add	r23, r0
    11da:	81 1d       	adc	r24, r1
    11dc:	11 24       	eor	r1, r1
    11de:	91 1d       	adc	r25, r1
    11e0:	08 95       	ret

000011e2 <_exit>:
    11e2:	f8 94       	cli

000011e4 <__stop_program>:
    11e4:	ff cf       	rjmp	.-2      	; 0x11e4 <__stop_program>
