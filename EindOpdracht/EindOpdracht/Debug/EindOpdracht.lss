
EindOpdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  00001358  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008001ca  008001ca  000014b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000186a  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e08  00000000  00000000  00002f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c12  00000000  00000000  00003d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  0000491c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085b  00000000  00000000  00004c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b8  00000000  00000000  000054e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005e9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	cb c3       	rjmp	.+1942   	; 0x7c8 <__vector_12>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e5       	ldi	r30, 0x58	; 88
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3c       	cpi	r26, 0xCA	; 202
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	aa ec       	ldi	r26, 0xCA	; 202
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3d       	cpi	r26, 0xD9	; 217
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	07 d4       	rcall	.+2062   	; 0x8d2 <main>
      c4:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <switch_channel>:
      ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channel.1627>
      ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channel.1627+0x1>
      d2:	8f 3f       	cpi	r24, 0xFF	; 255
      d4:	2f ef       	ldi	r18, 0xFF	; 255
      d6:	92 07       	cpc	r25, r18
      d8:	39 f4       	brne	.+14     	; 0xe8 <switch_channel+0x1e>
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
      e6:	0d c0       	rjmp	.+26     	; 0x102 <switch_channel+0x38>
      e8:	01 96       	adiw	r24, 0x01	; 1
      ea:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
      f2:	06 97       	sbiw	r24, 0x06	; 6
      f4:	34 f0       	brlt	.+12     	; 0x102 <switch_channel+0x38>
      f6:	83 e0       	ldi	r24, 0x03	; 3
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
     102:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channel.1627>
     106:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channel.1627+0x1>
     10a:	80 6c       	ori	r24, 0xC0	; 192
     10c:	87 b9       	out	0x07, r24	; 7
     10e:	08 95       	ret

00000110 <translate_to_geforce>:
     110:	08 95       	ret

00000112 <read_acc_direction>:
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	ec 01       	movw	r28, r24
     118:	d8 df       	rcall	.-80     	; 0xca <switch_channel>
     11a:	86 b1       	in	r24, 0x06	; 6
     11c:	80 64       	ori	r24, 0x40	; 64
     11e:	86 b9       	out	0x06, r24	; 6
     120:	36 99       	sbic	0x06, 6	; 6
     122:	fe cf       	rjmp	.-4      	; 0x120 <read_acc_direction+0xe>
     124:	24 b1       	in	r18, 0x04	; 4
     126:	85 b1       	in	r24, 0x05	; 5
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	98 2f       	mov	r25, r24
     12c:	88 27       	eor	r24, r24
     12e:	82 0f       	add	r24, r18
     130:	91 1d       	adc	r25, r1
     132:	ee df       	rcall	.-36     	; 0x110 <translate_to_geforce>
     134:	99 83       	std	Y+1, r25	; 0x01
     136:	88 83       	st	Y, r24
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <accelerometer_init>:
     13e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     142:	80 ec       	ldi	r24, 0xC0	; 192
     144:	87 b9       	out	0x07, r24	; 7
     146:	86 e8       	ldi	r24, 0x86	; 134
     148:	86 b9       	out	0x06, r24	; 6
     14a:	08 95       	ret

0000014c <accelerometer_read>:
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	2c 97       	sbiw	r28, 0x0c	; 12
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	ce 01       	movw	r24, r28
     162:	07 96       	adiw	r24, 0x07	; 7
     164:	d6 df       	rcall	.-84     	; 0x112 <read_acc_direction>
     166:	ce 01       	movw	r24, r28
     168:	09 96       	adiw	r24, 0x09	; 9
     16a:	d3 df       	rcall	.-90     	; 0x112 <read_acc_direction>
     16c:	ce 01       	movw	r24, r28
     16e:	0b 96       	adiw	r24, 0x0b	; 11
     170:	d0 df       	rcall	.-96     	; 0x112 <read_acc_direction>
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	fe 01       	movw	r30, r28
     176:	37 96       	adiw	r30, 0x07	; 7
     178:	de 01       	movw	r26, r28
     17a:	11 96       	adiw	r26, 0x01	; 1
     17c:	01 90       	ld	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	8a 95       	dec	r24
     182:	e1 f7       	brne	.-8      	; 0x17c <accelerometer_read+0x30>
     184:	29 81       	ldd	r18, Y+1	; 0x01
     186:	3a 81       	ldd	r19, Y+2	; 0x02
     188:	4b 81       	ldd	r20, Y+3	; 0x03
     18a:	5c 81       	ldd	r21, Y+4	; 0x04
     18c:	6d 81       	ldd	r22, Y+5	; 0x05
     18e:	7e 81       	ldd	r23, Y+6	; 0x06
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	2c 96       	adiw	r28, 0x0c	; 12
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	cd bf       	out	0x3d, r28	; 61
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <time_passed>:
{
    return directions[randomNumber()];
}

void time_passed(){
	isroundstarted = false;
     1a6:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__data_end>
     1aa:	08 95       	ret

000001ac <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b2:	ef ec       	ldi	r30, 0xCF	; 207
     1b4:	f7 e0       	ldi	r31, 0x07	; 7
     1b6:	31 97       	sbiw	r30, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <wait+0xa>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <wait+0x10>
     1bc:	00 00       	nop
     1be:	2f 5f       	subi	r18, 0xFF	; 255
     1c0:	3f 4f       	sbci	r19, 0xFF	; 255
     1c2:	28 17       	cp	r18, r24
     1c4:	39 07       	cpc	r19, r25
     1c6:	ac f3       	brlt	.-22     	; 0x1b2 <wait+0x6>
	{
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
     1c8:	08 95       	ret

000001ca <GameLogic_Init>:

GAMELOGIC_ERROR GameLogic_Init()
{
	display_init();
     1ca:	da d2       	rcall	.+1460   	; 0x780 <display_init>
	accelerometer_init();
     1cc:	b8 df       	rcall	.-144    	; 0x13e <accelerometer_init>
     1ce:	1a ba       	out	0x1a, r1	; 26
	
	DDRA = 0x0;
     1d0:	8e e1       	ldi	r24, 0x1E	; 30
	display_text("Starting up game");
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	7f d2       	rcall	.+1278   	; 0x6d4 <display_text>
     1d6:	61 e0       	ldi	r22, 0x01	; 1
	display_set_cursor(0,1);
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	96 d2       	rcall	.+1324   	; 0x70c <display_set_cursor>
	display_text("Press PA7...");
     1e0:	8f e2       	ldi	r24, 0x2F	; 47
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	77 d2       	rcall	.+1262   	; 0x6d4 <display_text>
	while(PINA != 0b10000000);//Waiting to press button
     1e6:	89 b3       	in	r24, 0x19	; 25
     1e8:	80 38       	cpi	r24, 0x80	; 128
     1ea:	e9 f7       	brne	.-6      	; 0x1e6 <GameLogic_Init+0x1c>
	TRESHOLD_MEASURMENT = accelerometer_read();
     1ec:	af df       	rcall	.-162    	; 0x14c <accelerometer_read>
     1ee:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <TRESHOLD_MEASURMENT>
     1f2:	30 93 cc 01 	sts	0x01CC, r19	; 0x8001cc <TRESHOLD_MEASURMENT+0x1>
     1f6:	40 93 cd 01 	sts	0x01CD, r20	; 0x8001cd <TRESHOLD_MEASURMENT+0x2>
     1fa:	50 93 ce 01 	sts	0x01CE, r21	; 0x8001ce <TRESHOLD_MEASURMENT+0x3>
     1fe:	60 93 cf 01 	sts	0x01CF, r22	; 0x8001cf <TRESHOLD_MEASURMENT+0x4>
     202:	70 93 d0 01 	sts	0x01D0, r23	; 0x8001d0 <TRESHOLD_MEASURMENT+0x5>
     206:	83 e0       	ldi	r24, 0x03	; 3
	
	return UNKNOWN;
}
     208:	08 95       	ret

0000020a <randomNumber>:
     20a:	ef 92       	push	r14

int randomNumber()
{
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	62 97       	sbiw	r28, 0x12	; 18
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	de bf       	out	0x3e, r29	; 62
     222:	0f be       	out	0x3f, r0	; 63
     224:	cd bf       	out	0x3d, r28	; 61
    int rand_num;
    srand(accelerometer_read().x_geforce * accelerometer_read().y_geforce * accelerometer_read().z_geforce);
     226:	92 df       	rcall	.-220    	; 0x14c <accelerometer_read>
     228:	2d 87       	std	Y+13, r18	; 0x0d
     22a:	3e 87       	std	Y+14, r19	; 0x0e
     22c:	ed 84       	ldd	r14, Y+13	; 0x0d
     22e:	fe 84       	ldd	r15, Y+14	; 0x0e
     230:	8d df       	rcall	.-230    	; 0x14c <accelerometer_read>
     232:	49 87       	std	Y+9, r20	; 0x09
     234:	5a 87       	std	Y+10, r21	; 0x0a
     236:	89 85       	ldd	r24, Y+9	; 0x09
     238:	9a 85       	ldd	r25, Y+10	; 0x0a
     23a:	e8 9e       	mul	r14, r24
     23c:	80 01       	movw	r16, r0
     23e:	e9 9e       	mul	r14, r25
     240:	10 0d       	add	r17, r0
     242:	f8 9e       	mul	r15, r24
     244:	10 0d       	add	r17, r0
     246:	11 24       	eor	r1, r1
     248:	81 df       	rcall	.-254    	; 0x14c <accelerometer_read>
     24a:	6d 83       	std	Y+5, r22	; 0x05
     24c:	7e 83       	std	Y+6, r23	; 0x06
     24e:	8d 81       	ldd	r24, Y+5	; 0x05
     250:	9e 81       	ldd	r25, Y+6	; 0x06
     252:	9c 01       	movw	r18, r24
     254:	02 9f       	mul	r16, r18
     256:	c0 01       	movw	r24, r0
     258:	03 9f       	mul	r16, r19
     25a:	90 0d       	add	r25, r0
     25c:	12 9f       	mul	r17, r18
     25e:	90 0d       	add	r25, r0
     260:	11 24       	eor	r1, r1
     262:	35 d5       	rcall	.+2666   	; 0xcce <srand>
    // Will generate a random number between 0-5
    rand_num = rand() % 6;
     264:	31 d5       	rcall	.+2658   	; 0xcc8 <rand>
     266:	66 e0       	ldi	r22, 0x06	; 6
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	c0 d4       	rcall	.+2432   	; 0xbec <__divmodhi4>
     26c:	62 96       	adiw	r28, 0x12	; 18
     26e:	0f b6       	in	r0, 0x3f	; 63

    return rand_num;
}
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <randomDirection>:
     286:	c1 df       	rcall	.-126    	; 0x20a <randomNumber>
     288:	88 5f       	subi	r24, 0xF8	; 248

DIRECTION randomDirection()
{
    return directions[randomNumber()];
     28a:	9e 4f       	sbci	r25, 0xFE	; 254
}
     28c:	fc 01       	movw	r30, r24
     28e:	80 81       	ld	r24, Z
     290:	08 95       	ret

00000292 <GameLogic_draw_hearts>:

void time_passed(){
	isroundstarted = false;
}

void GameLogic_draw_hearts(){
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <GameLogic_draw_hearts+0xe>
     2a0:	1f 92       	push	r1
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
	// Setting logic for numbers
	char lives[3];
	int cursor_pos = 15;

	for (int i = 3; i> 0; i-- )
     2a6:	03 e0       	ldi	r16, 0x03	; 3
     2a8:	10 e0       	ldi	r17, 0x00	; 0
}

void GameLogic_draw_hearts(){
	// Setting logic for numbers
	char lives[3];
	int cursor_pos = 15;
     2aa:	0f 2e       	mov	r0, r31
     2ac:	ff e0       	ldi	r31, 0x0F	; 15
     2ae:	ef 2e       	mov	r14, r31
     2b0:	f1 2c       	mov	r15, r1
     2b2:	f0 2d       	mov	r31, r0

	for (int i = 3; i> 0; i-- )
     2b4:	25 c0       	rjmp	.+74     	; 0x300 <GameLogic_draw_hearts+0x6e>
	{
		// Setting correct cursor pos
		display_set_cursor(cursor_pos, 0);
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	c7 01       	movw	r24, r14
     2bc:	27 d2       	rcall	.+1102   	; 0x70c <display_set_cursor>
		cursor_pos--;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	e8 1a       	sub	r14, r24
     2c2:	f1 08       	sbc	r15, r1
		
		// Setting hearts
		if (i <= lives_left){
     2c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lives_left>
     2c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lives_left+0x1>
     2cc:	80 17       	cp	r24, r16
     2ce:	91 07       	cpc	r25, r17
     2d0:	5c f0       	brlt	.+22     	; 0x2e8 <GameLogic_draw_hearts+0x56>
			lives[i-1] = 1;
     2d2:	f8 01       	movw	r30, r16
     2d4:	31 97       	sbiw	r30, 0x01	; 1
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	8c 0f       	add	r24, r28
     2dc:	9d 1f       	adc	r25, r29
     2de:	e8 0f       	add	r30, r24
     2e0:	f9 1f       	adc	r31, r25
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 83       	st	Z, r24
     2e6:	0a c0       	rjmp	.+20     	; 0x2fc <GameLogic_draw_hearts+0x6a>
		} else {
			lives[i-1] = 2;
     2e8:	f8 01       	movw	r30, r16
     2ea:	31 97       	sbiw	r30, 0x01	; 1
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	8c 0f       	add	r24, r28
     2f2:	9d 1f       	adc	r25, r29
     2f4:	e8 0f       	add	r30, r24
     2f6:	f9 1f       	adc	r31, r25
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	80 83       	st	Z, r24
void GameLogic_draw_hearts(){
	// Setting logic for numbers
	char lives[3];
	int cursor_pos = 15;

	for (int i = 3; i> 0; i-- )
     2fc:	01 50       	subi	r16, 0x01	; 1
     2fe:	11 09       	sbc	r17, r1
     300:	10 16       	cp	r1, r16
     302:	11 06       	cpc	r1, r17
     304:	c4 f2       	brlt	.-80     	; 0x2b6 <GameLogic_draw_hearts+0x24>
			lives[i-1] = 2;
		}
	}
	
	// Displaying hearts
	display_text(lives);
     306:	ce 01       	movw	r24, r28
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	e4 d1       	rcall	.+968    	; 0x6d4 <display_text>
}
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <GameLogic_Draw_Dir>:

void GameLogic_Draw_Dir(DIRECTION dir){
     320:	cf 93       	push	r28
     322:	c8 2f       	mov	r28, r24
	display_clear();
     324:	07 d2       	rcall	.+1038   	; 0x734 <display_clear>
	switch (dir)
     326:	c2 30       	cpi	r28, 0x02	; 2
     328:	a1 f0       	breq	.+40     	; 0x352 <GameLogic_Draw_Dir+0x32>
     32a:	28 f4       	brcc	.+10     	; 0x336 <GameLogic_Draw_Dir+0x16>
     32c:	cc 23       	and	r28, r28
     32e:	49 f0       	breq	.+18     	; 0x342 <GameLogic_Draw_Dir+0x22>
     330:	c1 30       	cpi	r28, 0x01	; 1
     332:	59 f0       	breq	.+22     	; 0x34a <GameLogic_Draw_Dir+0x2a>
     334:	1d c0       	rjmp	.+58     	; 0x370 <GameLogic_Draw_Dir+0x50>
     336:	c4 30       	cpi	r28, 0x04	; 4
     338:	a1 f0       	breq	.+40     	; 0x362 <GameLogic_Draw_Dir+0x42>
     33a:	78 f0       	brcs	.+30     	; 0x35a <GameLogic_Draw_Dir+0x3a>
     33c:	c5 30       	cpi	r28, 0x05	; 5
     33e:	a9 f0       	breq	.+42     	; 0x36a <GameLogic_Draw_Dir+0x4a>
     340:	17 c0       	rjmp	.+46     	; 0x370 <GameLogic_Draw_Dir+0x50>
	{
		case UP:
			display_text("Go upwards");
     342:	8c e3       	ldi	r24, 0x3C	; 60
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	c6 d1       	rcall	.+908    	; 0x6d4 <display_text>
			break;
     348:	13 c0       	rjmp	.+38     	; 0x370 <GameLogic_Draw_Dir+0x50>
		case DOWN:
			display_text("Go downwards");
     34a:	87 e4       	ldi	r24, 0x47	; 71
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	c2 d1       	rcall	.+900    	; 0x6d4 <display_text>
			break;
		case LEFT:
			display_text("Go left");
     350:	0f c0       	rjmp	.+30     	; 0x370 <GameLogic_Draw_Dir+0x50>
     352:	84 e5       	ldi	r24, 0x54	; 84
     354:	91 e0       	ldi	r25, 0x01	; 1
			break;
     356:	be d1       	rcall	.+892    	; 0x6d4 <display_text>
		case RIGHT:
			display_text("Go right");
     358:	0b c0       	rjmp	.+22     	; 0x370 <GameLogic_Draw_Dir+0x50>
     35a:	8c e5       	ldi	r24, 0x5C	; 92
     35c:	91 e0       	ldi	r25, 0x01	; 1
			break;
     35e:	ba d1       	rcall	.+884    	; 0x6d4 <display_text>
		case FORWARD:
			display_text("Go forward");
     360:	07 c0       	rjmp	.+14     	; 0x370 <GameLogic_Draw_Dir+0x50>
     362:	85 e6       	ldi	r24, 0x65	; 101
     364:	91 e0       	ldi	r25, 0x01	; 1
			break;
     366:	b6 d1       	rcall	.+876    	; 0x6d4 <display_text>
		case BACKWARD:
			display_text("Go backward");
     368:	03 c0       	rjmp	.+6      	; 0x370 <GameLogic_Draw_Dir+0x50>
     36a:	80 e7       	ldi	r24, 0x70	; 112
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	b2 d1       	rcall	.+868    	; 0x6d4 <display_text>
			break;
	}
}
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <GameLogic_Round>:

void GameLogic_Round()
{
     374:	8f 92       	push	r8
     376:	9f 92       	push	r9
     378:	af 92       	push	r10
     37a:	bf 92       	push	r11
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	ca 56       	subi	r28, 0x6A	; 106
     392:	d1 09       	sbc	r29, r1
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
	// Setup of handling
    DIRECTION dir = randomDirection();
     39e:	73 df       	rcall	.-282    	; 0x286 <randomDirection>
     3a0:	18 2f       	mov	r17, r24
	set_timer(2000, time_passed);
     3a2:	63 ed       	ldi	r22, 0xD3	; 211
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 ed       	ldi	r24, 0xD0	; 208
     3a8:	97 e0       	ldi	r25, 0x07	; 7
     3aa:	46 d2       	rcall	.+1164   	; 0x838 <set_timer>
	isroundstarted = true;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	display_clear();
	GameLogic_Draw_Dir(dir);
     3b2:	c0 d1       	rcall	.+896    	; 0x734 <display_clear>
     3b4:	81 2f       	mov	r24, r17
	GameLogic_draw_hearts();
     3b6:	b4 df       	rcall	.-152    	; 0x320 <GameLogic_Draw_Dir>
     3b8:	6c df       	rcall	.-296    	; 0x292 <GameLogic_draw_hearts>

	// Starting handling
	while(isroundstarted) {
     3ba:	d1 c0       	rjmp	.+418    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
		accelerometer_measurment_t measurement = accelerometer_read();
     3bc:	c7 de       	rcall	.-626    	; 0x14c <accelerometer_read>
     3be:	a6 96       	adiw	r28, 0x26	; 38
     3c0:	2f af       	std	Y+63, r18	; 0x3f
     3c2:	a6 97       	sbiw	r28, 0x26	; 38
     3c4:	a7 96       	adiw	r28, 0x27	; 39
     3c6:	3f af       	std	Y+63, r19	; 0x3f
     3c8:	a7 97       	sbiw	r28, 0x27	; 39
     3ca:	a8 96       	adiw	r28, 0x28	; 40
     3cc:	4f af       	std	Y+63, r20	; 0x3f
     3ce:	a8 97       	sbiw	r28, 0x28	; 40
     3d0:	a9 96       	adiw	r28, 0x29	; 41
     3d2:	5f af       	std	Y+63, r21	; 0x3f
     3d4:	a9 97       	sbiw	r28, 0x29	; 41
     3d6:	aa 96       	adiw	r28, 0x2a	; 42
     3d8:	6f af       	std	Y+63, r22	; 0x3f
     3da:	aa 97       	sbiw	r28, 0x2a	; 42
     3dc:	ab 96       	adiw	r28, 0x2b	; 43
     3de:	7f af       	std	Y+63, r23	; 0x3f
     3e0:	ab 97       	sbiw	r28, 0x2b	; 43
		display_set_cursor(0, 1);
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	90 d1       	rcall	.+800    	; 0x70c <display_set_cursor>
     3ec:	ab 96       	adiw	r28, 0x2b	; 43
		char debugout[100];
		sprintf(debugout, "%d;%d;%d,%d,%d", measurement.x_geforce, measurement.y_geforce, measurement.z_geforce, correctCount, totalCount);
     3ee:	ae ac       	ldd	r10, Y+62	; 0x3e
     3f0:	bf ac       	ldd	r11, Y+63	; 0x3f
     3f2:	ab 97       	sbiw	r28, 0x2b	; 43
     3f4:	a9 96       	adiw	r28, 0x29	; 41
     3f6:	ce ac       	ldd	r12, Y+62	; 0x3e
     3f8:	df ac       	ldd	r13, Y+63	; 0x3f
     3fa:	a9 97       	sbiw	r28, 0x29	; 41
     3fc:	a7 96       	adiw	r28, 0x27	; 39
     3fe:	ee ac       	ldd	r14, Y+62	; 0x3e
     400:	ff ac       	ldd	r15, Y+63	; 0x3f
     402:	a7 97       	sbiw	r28, 0x27	; 39
     404:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <totalCount+0x1>
     408:	8f 93       	push	r24
     40a:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <totalCount>
     40e:	8f 93       	push	r24
     410:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <correctCount+0x1>
     414:	8f 93       	push	r24
     416:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
     41a:	8f 93       	push	r24
     41c:	bf 92       	push	r11
     41e:	af 92       	push	r10
     420:	df 92       	push	r13
     422:	cf 92       	push	r12
     424:	ff 92       	push	r15
     426:	ef 92       	push	r14
     428:	8c e7       	ldi	r24, 0x7C	; 124
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	9f 93       	push	r25
     42e:	8f 93       	push	r24
     430:	ce 01       	movw	r24, r28
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	4c 01       	movw	r8, r24
     436:	9f 93       	push	r25
     438:	8f 93       	push	r24
     43a:	54 d4       	rcall	.+2216   	; 0xce4 <sprintf>
		display_text(debugout);
     43c:	c4 01       	movw	r24, r8
     43e:	4a d1       	rcall	.+660    	; 0x6d4 <display_text>
     440:	0f b6       	in	r0, 0x3f	; 63
		switch (dir)
     442:	f8 94       	cli
     444:	de bf       	out	0x3e, r29	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	12 30       	cpi	r17, 0x02	; 2
     44c:	a1 f1       	breq	.+104    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     44e:	28 f4       	brcc	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     450:	11 23       	and	r17, r17
     452:	59 f0       	breq	.+22     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     454:	11 30       	cpi	r17, 0x01	; 1
     456:	e1 f0       	breq	.+56     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     458:	76 c0       	rjmp	.+236    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     45a:	14 30       	cpi	r17, 0x04	; 4
     45c:	09 f4       	brne	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	50 c0       	rjmp	.+160    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     460:	e8 f1       	brcs	.+122    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     462:	15 30       	cpi	r17, 0x05	; 5
     464:	09 f4       	brne	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     466:	5e c0       	rjmp	.+188    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     468:	6e c0       	rjmp	.+220    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     46a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TRESHOLD_MEASURMENT+0x4>
		{
			case UP:
				if(measurement.z_geforce <= TRESHOLD_MEASURMENT.z_geforce - MEASURMENT_OFSETT)
     46e:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <TRESHOLD_MEASURMENT+0x5>
     472:	02 97       	sbiw	r24, 0x02	; 2
     474:	8a 15       	cp	r24, r10
     476:	9b 05       	cpc	r25, r11
     478:	0c f4       	brge	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	65 c0       	rjmp	.+202    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     47c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     480:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     48a:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     48e:	5b c0       	rjmp	.+182    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     490:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TRESHOLD_MEASURMENT+0x4>
				}
				break;
			case DOWN:
				if(measurement.z_geforce >= TRESHOLD_MEASURMENT.z_geforce + MEASURMENT_OFSETT)
     494:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <TRESHOLD_MEASURMENT+0x5>
     498:	02 96       	adiw	r24, 0x02	; 2
     49a:	a8 16       	cp	r10, r24
     49c:	b9 06       	cpc	r11, r25
     49e:	0c f4       	brge	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a0:	52 c0       	rjmp	.+164    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4a2:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     4a6:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     4b0:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     4b4:	48 c0       	rjmp	.+144    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4b6:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <TRESHOLD_MEASURMENT+0x2>
				}
				break;

			case LEFT:
				if(measurement.y_geforce <= TRESHOLD_MEASURMENT.y_geforce - MEASURMENT_OFSETT)
     4ba:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <TRESHOLD_MEASURMENT+0x3>
     4be:	02 97       	sbiw	r24, 0x02	; 2
     4c0:	8c 15       	cp	r24, r12
     4c2:	9d 05       	cpc	r25, r13
     4c4:	0c f4       	brge	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c6:	3f c0       	rjmp	.+126    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4c8:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     4cc:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     4d6:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     4da:	35 c0       	rjmp	.+106    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4dc:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <TRESHOLD_MEASURMENT+0x2>
				}
				break;
			case RIGHT:
				if(measurement.y_geforce >= TRESHOLD_MEASURMENT.y_geforce + MEASURMENT_OFSETT)
     4e0:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <TRESHOLD_MEASURMENT+0x3>
     4e4:	02 96       	adiw	r24, 0x02	; 2
     4e6:	c8 16       	cp	r12, r24
     4e8:	d9 06       	cpc	r13, r25
     4ea:	6c f1       	brlt	.+90     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4ec:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     4f0:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     4fa:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     4fe:	23 c0       	rjmp	.+70     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     500:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <TRESHOLD_MEASURMENT>
				}
				break;
			case FORWARD:
				if(measurement.x_geforce <= TRESHOLD_MEASURMENT.x_geforce - MEASURMENT_OFSETT)
     504:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <TRESHOLD_MEASURMENT+0x1>
     508:	02 97       	sbiw	r24, 0x02	; 2
     50a:	8e 15       	cp	r24, r14
     50c:	9f 05       	cpc	r25, r15
     50e:	dc f0       	brlt	.+54     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     510:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     514:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     51e:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     522:	11 c0       	rjmp	.+34     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     524:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <TRESHOLD_MEASURMENT>
				}
				break;
			case BACKWARD:
				if(measurement.x_geforce >= TRESHOLD_MEASURMENT.x_geforce + MEASURMENT_OFSETT)
     528:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <TRESHOLD_MEASURMENT+0x1>
     52c:	02 96       	adiw	r24, 0x02	; 2
     52e:	e8 16       	cp	r14, r24
     530:	f9 06       	cpc	r15, r25
     532:	4c f0       	brlt	.+18     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     534:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     538:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     542:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     546:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <totalCount>
				}
				break;
		}
		totalCount++;
     54a:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <totalCount+0x1>
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <totalCount+0x1>
     554:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <totalCount>
		wait(100);
     558:	84 e6       	ldi	r24, 0x64	; 100
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	27 de       	rcall	.-946    	; 0x1ac <wait>
     55e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
	display_clear();
	GameLogic_Draw_Dir(dir);
	GameLogic_draw_hearts();

	// Starting handling
	while(isroundstarted) {
     562:	81 11       	cpse	r24, r1
     564:	2b cf       	rjmp	.-426    	; 0x3bc <GameLogic_Round+0x48>
		}
		totalCount++;
		wait(100);
	}
	
	float percentage = ((float)correctCount / (float)totalCount) * 100.0;
     566:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <correctCount>
     56a:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <correctCount+0x1>
     56e:	07 2e       	mov	r0, r23
     570:	00 0c       	add	r0, r0
     572:	88 0b       	sbc	r24, r24
     574:	99 0b       	sbc	r25, r25
     576:	4b d2       	rcall	.+1174   	; 0xa0e <__floatsisf>
     578:	6b 01       	movw	r12, r22
     57a:	7c 01       	movw	r14, r24
     57c:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <totalCount>
     580:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <totalCount+0x1>
     584:	07 2e       	mov	r0, r23
     586:	00 0c       	add	r0, r0
     588:	88 0b       	sbc	r24, r24
     58a:	99 0b       	sbc	r25, r25
     58c:	40 d2       	rcall	.+1152   	; 0xa0e <__floatsisf>
     58e:	9b 01       	movw	r18, r22
     590:	ac 01       	movw	r20, r24
     592:	c7 01       	movw	r24, r14
     594:	b6 01       	movw	r22, r12
     596:	a0 d1       	rcall	.+832    	; 0x8d8 <__divsf3>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	48 ec       	ldi	r20, 0xC8	; 200
    bool inputCorrect = (int)percentage > CORRECTTHRESHOLD;
     59e:	52 e4       	ldi	r21, 0x42	; 66
     5a0:	c2 d2       	rcall	.+1412   	; 0xb26 <__mulsf3>

	display_clear();
     5a2:	02 d2       	rcall	.+1028   	; 0x9a8 <__fixsfsi>
     5a4:	7b 01       	movw	r14, r22
	display_set_cursor(0,1);
     5a6:	c6 d0       	rcall	.+396    	; 0x734 <display_clear>
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	ad d0       	rcall	.+346    	; 0x70c <display_set_cursor>
    if(inputCorrect) {
     5b2:	9b e0       	ldi	r25, 0x0B	; 11
     5b4:	e9 16       	cp	r14, r25
     5b6:	f1 04       	cpc	r15, r1
	    display_text(" Input Correct! ");
     5b8:	6c f0       	brlt	.+26     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     5ba:	8b e8       	ldi	r24, 0x8B	; 139
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	8a d0       	rcall	.+276    	; 0x6d4 <display_text>
		totalScore++;
     5c0:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <totalScore>
     5c4:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <totalScore+0x1>
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <totalScore+0x1>
     5ce:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <totalScore>
	} else {
	    display_text("Input Incorrect!");
     5d2:	3d c0       	rjmp	.+122    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     5d4:	8c e9       	ldi	r24, 0x9C	; 156
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	7d d0       	rcall	.+250    	; 0x6d4 <display_text>
		lives_left--;
     5da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lives_left>
     5de:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lives_left+0x1>
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lives_left+0x1>
     5e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lives_left>
		if(lives_left <= 0) {
     5ec:	18 16       	cp	r1, r24
     5ee:	19 06       	cpc	r1, r25
			display_clear();
     5f0:	74 f1       	brlt	.+92     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     5f2:	a0 d0       	rcall	.+320    	; 0x734 <display_clear>
			char gameoverString[20];
			sprintf(gameoverString, "Game Over! S:%d", totalScore);
     5f4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <totalScore+0x1>
     5f8:	8f 93       	push	r24
     5fa:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <totalScore>
     5fe:	8f 93       	push	r24
     600:	8d ea       	ldi	r24, 0xAD	; 173
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	8e 01       	movw	r16, r28
     60a:	0f 5f       	subi	r16, 0xFF	; 255
     60c:	1f 4f       	sbci	r17, 0xFF	; 255
     60e:	1f 93       	push	r17
     610:	0f 93       	push	r16
			lives_left = 3;
     612:	68 d3       	rcall	.+1744   	; 0xce4 <sprintf>
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lives_left+0x1>
     61c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lives_left>
			totalScore = 0;
     620:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <totalScore+0x1>
			display_text(gameoverString);
     624:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <totalScore>
     628:	c8 01       	movw	r24, r16
			display_set_cursor(0,1);
     62a:	54 d0       	rcall	.+168    	; 0x6d4 <display_text>
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	6b d0       	rcall	.+214    	; 0x70c <display_set_cursor>
			display_text("Press PA7...");
     636:	8f e2       	ldi	r24, 0x2F	; 47
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	4c d0       	rcall	.+152    	; 0x6d4 <display_text>
			while(PINA != 0b10000000);
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	89 b3       	in	r24, 0x19	; 25
     64a:	80 38       	cpi	r24, 0x80	; 128
     64c:	e9 f7       	brne	.-6      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
		}
    }
	GameLogic_draw_hearts();
     64e:	21 de       	rcall	.-958    	; 0x292 <GameLogic_draw_hearts>
     650:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <correctCount+0x1>


	correctCount = 0;
     654:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <correctCount>
     658:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <totalCount+0x1>
	totalCount = 0;
     65c:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <totalCount>
     660:	88 ee       	ldi	r24, 0xE8	; 232


	wait(1000);
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	a3 dd       	rcall	.-1210   	; 0x1ac <wait>
     666:	c6 59       	subi	r28, 0x96	; 150
     668:	df 4f       	sbci	r29, 0xFF	; 255
}
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	df 90       	pop	r13
     682:	cf 90       	pop	r12
     684:	bf 90       	pop	r11
     686:	af 90       	pop	r10
     688:	9f 90       	pop	r9
     68a:	8f 90       	pop	r8
     68c:	08 95       	ret

0000068e <switch_E>:
unsigned char fullheart[8] = {0x00,0x0A,0x1F,0x1F,0x0E,0x04,0x00,0x00};
unsigned char emptyheart[8] = {0x00,0x0A,0x15,0x11,0x0A,0x04,0x00,0x00};


void switch_E() {
	PORTC |= (1<<E);
     68e:	85 b3       	in	r24, 0x15	; 21
     690:	88 60       	ori	r24, 0x08	; 8
     692:	85 bb       	out	0x15, r24	; 21
     694:	8f ec       	ldi	r24, 0xCF	; 207
     696:	97 e0       	ldi	r25, 0x07	; 7
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <switch_E+0xa>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <switch_E+0x10>
     69e:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<E);
     6a0:	85 b3       	in	r24, 0x15	; 21
     6a2:	87 7f       	andi	r24, 0xF7	; 247
     6a4:	85 bb       	out	0x15, r24	; 21
     6a6:	8f ec       	ldi	r24, 0xCF	; 207
     6a8:	97 e0       	ldi	r25, 0x07	; 7
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <switch_E+0x1c>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <switch_E+0x22>
     6b0:	00 00       	nop
     6b2:	08 95       	ret

000006b4 <lcd_write_data>:
	_delay_ms(1);
}



void lcd_write_data(unsigned char byte) {
     6b4:	cf 93       	push	r28
     6b6:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     6b8:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<RS);
     6ba:	85 b3       	in	r24, 0x15	; 21
     6bc:	84 60       	ori	r24, 0x04	; 4
     6be:	85 bb       	out	0x15, r24	; 21
	switch_E();
     6c0:	e6 df       	rcall	.-52     	; 0x68e <switch_E>

	// Second nibble
	PORTC = (byte<<4);
     6c2:	c2 95       	swap	r28
     6c4:	c0 7f       	andi	r28, 0xF0	; 240
     6c6:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<RS);
     6c8:	85 b3       	in	r24, 0x15	; 21
     6ca:	84 60       	ori	r24, 0x04	; 4
	switch_E();
     6cc:	85 bb       	out	0x15, r24	; 21
     6ce:	df df       	rcall	.-66     	; 0x68e <switch_E>
}
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <display_text>:

void display_text(char *str) {
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	ec 01       	movw	r28, r24
	while (*str) {
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <display_text+0xc>
		lcd_write_data(*str++);
     6dc:	21 96       	adiw	r28, 0x01	; 1
     6de:	ea df       	rcall	.-44     	; 0x6b4 <lcd_write_data>
	PORTC |= (1<<RS);
	switch_E();
}

void display_text(char *str) {
	while (*str) {
     6e0:	88 81       	ld	r24, Y
     6e2:	81 11       	cpse	r24, r1
     6e4:	fb cf       	rjmp	.-10     	; 0x6dc <display_text+0x8>
		lcd_write_data(*str++);
	}
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <lcd_write_command>:

void lcd_write_command(unsigned char byte)
{
     6ec:	cf 93       	push	r28
     6ee:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     6f0:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<RS);
     6f2:	85 b3       	in	r24, 0x15	; 21
     6f4:	8b 7f       	andi	r24, 0xFB	; 251
     6f6:	85 bb       	out	0x15, r24	; 21
	switch_E();
     6f8:	ca df       	rcall	.-108    	; 0x68e <switch_E>

	// Second nibble
	PORTC = (byte<<4);
     6fa:	c2 95       	swap	r28
     6fc:	c0 7f       	andi	r28, 0xF0	; 240
     6fe:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<RS);
     700:	85 b3       	in	r24, 0x15	; 21
     702:	8b 7f       	andi	r24, 0xFB	; 251
	switch_E();
     704:	85 bb       	out	0x15, r24	; 21
     706:	c3 df       	rcall	.-122    	; 0x68e <switch_E>
}
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <display_set_cursor>:


// 0x0c for turning cursor of.
void display_set_cursor(int position, int line) {
	if (line == 0){
     70c:	67 2b       	or	r22, r23
     70e:	49 f4       	brne	.+18     	; 0x722 <display_set_cursor+0x16>
		lcd_write_command((position * 0x1) + 0x80);
     710:	80 58       	subi	r24, 0x80	; 128
     712:	ec df       	rcall	.-40     	; 0x6ec <lcd_write_command>
     714:	8f e9       	ldi	r24, 0x9F	; 159
     716:	9f e0       	ldi	r25, 0x0F	; 15
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <display_set_cursor+0xc>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <display_set_cursor+0x12>
     71e:	00 00       	nop
     720:	08 95       	ret
		_delay_ms(2);
	} else {
		lcd_write_command((position * 0x1) + 0xc0);
     722:	80 54       	subi	r24, 0x40	; 64
     724:	e3 df       	rcall	.-58     	; 0x6ec <lcd_write_command>
     726:	8f e9       	ldi	r24, 0x9F	; 159
     728:	9f e0       	ldi	r25, 0x0F	; 15
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <display_set_cursor+0x1e>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <display_set_cursor+0x24>
     730:	00 00       	nop
     732:	08 95       	ret

00000734 <display_clear>:
		_delay_ms(2);
	}
}

void display_clear(){
	lcd_write_command(0x01);
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	da df       	rcall	.-76     	; 0x6ec <lcd_write_command>
     738:	8f e9       	ldi	r24, 0x9F	; 159
     73a:	9f e0       	ldi	r25, 0x0F	; 15
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <display_clear+0x8>
     740:	00 c0       	rjmp	.+0      	; 0x742 <display_clear+0xe>
     742:	00 00       	nop
	_delay_ms(2);
	lcd_write_command(0x80);
     744:	80 e8       	ldi	r24, 0x80	; 128
     746:	d2 cf       	rjmp	.-92     	; 0x6ec <lcd_write_command>
     748:	08 95       	ret

0000074a <LCD_Custom_Char>:
}

void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	8b 01       	movw	r16, r22
	unsigned char i;
	if(loc<8)
     752:	88 30       	cpi	r24, 0x08	; 8
     754:	80 f4       	brcc	.+32     	; 0x776 <LCD_Custom_Char+0x2c>
	{
		lcd_write_command(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	08 96       	adiw	r24, 0x08	; 8
     75a:	88 0f       	add	r24, r24
     75c:	88 0f       	add	r24, r24
     75e:	88 0f       	add	r24, r24
     760:	c5 df       	rcall	.-118    	; 0x6ec <lcd_write_command>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
     762:	c0 e0       	ldi	r28, 0x00	; 0
     764:	06 c0       	rjmp	.+12     	; 0x772 <LCD_Custom_Char+0x28>
		lcd_write_data(msg[i]);
     766:	f8 01       	movw	r30, r16
     768:	ec 0f       	add	r30, r28
     76a:	f1 1d       	adc	r31, r1
     76c:	80 81       	ld	r24, Z
     76e:	a2 df       	rcall	.-188    	; 0x6b4 <lcd_write_data>
{
	unsigned char i;
	if(loc<8)
	{
		lcd_write_command(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
     770:	cf 5f       	subi	r28, 0xFF	; 255
     772:	c8 30       	cpi	r28, 0x08	; 8
		lcd_write_data(msg[i]);
	}
	display_clear();
     774:	c0 f3       	brcs	.-16     	; 0x766 <LCD_Custom_Char+0x1c>
     776:	de df       	rcall	.-68     	; 0x734 <display_clear>
}
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	08 95       	ret

00000780 <display_init>:
void display_init() {
     780:	cf 93       	push	r28
	// See table 13 from the HD44780U datasheet.
	DDRC = 0xFF;
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
     786:	15 ba       	out	0x15, r1	; 21
	
	// Step 2 Function set
	PORTC = 0x20;
     788:	c0 e2       	ldi	r28, 0x20	; 32
     78a:	c5 bb       	out	0x15, r28	; 21
	switch_E();
     78c:	80 df       	rcall	.-256    	; 0x68e <switch_E>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	switch_E();
     78e:	c5 bb       	out	0x15, r28	; 21
     790:	7e df       	rcall	.-260    	; 0x68e <switch_E>
	PORTC = 0x80;
     792:	80 e8       	ldi	r24, 0x80	; 128
	switch_E();
     794:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
     796:	7b df       	rcall	.-266    	; 0x68e <switch_E>
	switch_E();
     798:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
     79a:	79 df       	rcall	.-270    	; 0x68e <switch_E>
	switch_E();
     79c:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
     79e:	85 bb       	out	0x15, r24	; 21
	switch_E();
     7a0:	76 df       	rcall	.-276    	; 0x68e <switch_E>
	PORTC = 0x60;
     7a2:	15 ba       	out	0x15, r1	; 21
	switch_E();
     7a4:	74 df       	rcall	.-280    	; 0x68e <switch_E>
     7a6:	80 e6       	ldi	r24, 0x60	; 96
	
	// Set cursor to position 0 on first row.
	lcd_write_command(0x0c);
     7a8:	85 bb       	out	0x15, r24	; 21
     7aa:	71 df       	rcall	.-286    	; 0x68e <switch_E>
	lcd_write_command(0x02);
     7ac:	8c e0       	ldi	r24, 0x0C	; 12
     7ae:	9e df       	rcall	.-196    	; 0x6ec <lcd_write_command>

	// Adding custom chars
	LCD_Custom_Char(1, fullheart);
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	9c df       	rcall	.-200    	; 0x6ec <lcd_write_command>
     7b4:	66 e1       	ldi	r22, 0x16	; 22
     7b6:	71 e0       	ldi	r23, 0x01	; 1
     7b8:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Custom_Char(2, emptyheart);
     7ba:	c7 df       	rcall	.-114    	; 0x74a <LCD_Custom_Char>
     7bc:	6e e0       	ldi	r22, 0x0E	; 14
     7be:	71 e0       	ldi	r23, 0x01	; 1
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	c3 df       	rcall	.-122    	; 0x74a <LCD_Custom_Char>
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <__vector_12>:
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	0b b6       	in	r0, 0x3b	; 59
     7d4:	0f 92       	push	r0
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
     7ee:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <on_interupt>
     7f2:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <on_interupt+0x1>
     7f6:	09 95       	icall
     7f8:	f8 94       	cli
     7fa:	ff 91       	pop	r31
     7fc:	ef 91       	pop	r30
     7fe:	bf 91       	pop	r27
     800:	af 91       	pop	r26
     802:	9f 91       	pop	r25
     804:	8f 91       	pop	r24
     806:	7f 91       	pop	r23
     808:	6f 91       	pop	r22
     80a:	5f 91       	pop	r21
     80c:	4f 91       	pop	r20
     80e:	3f 91       	pop	r19
     810:	2f 91       	pop	r18
     812:	0f 90       	pop	r0
     814:	0b be       	out	0x3b, r0	; 59
     816:	0f 90       	pop	r0
     818:	0f be       	out	0x3f, r0	; 63
     81a:	0f 90       	pop	r0
     81c:	1f 90       	pop	r1
     81e:	18 95       	reti

00000820 <setup_timer>:
     820:	7b bd       	out	0x2b, r23	; 43
     822:	6a bd       	out	0x2a, r22	; 42
     824:	97 b7       	in	r25, 0x37	; 55
     826:	90 61       	ori	r25, 0x10	; 16
     828:	97 bf       	out	0x37, r25	; 55
     82a:	78 94       	sei
     82c:	9e b5       	in	r25, 0x2e	; 46
     82e:	9e bd       	out	0x2e, r25	; 46
     830:	9e b5       	in	r25, 0x2e	; 46
     832:	89 2b       	or	r24, r25
     834:	8e bd       	out	0x2e, r24	; 46
     836:	08 95       	ret

00000838 <set_timer>:
     838:	8f 92       	push	r8
     83a:	9f 92       	push	r9
     83c:	af 92       	push	r10
     83e:	bf 92       	push	r11
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	8c 01       	movw	r16, r24
     852:	6b 01       	movw	r12, r22
     854:	c1 e0       	ldi	r28, 0x01	; 1
     856:	d0 e0       	ldi	r29, 0x00	; 0
     858:	25 c0       	rjmp	.+74     	; 0x8a4 <set_timer+0x6c>
     85a:	10 16       	cp	r1, r16
     85c:	11 06       	cpc	r1, r17
     85e:	0c f5       	brge	.+66     	; 0x8a2 <set_timer+0x6a>
     860:	fe 01       	movw	r30, r28
     862:	ee 0f       	add	r30, r30
     864:	ff 1f       	adc	r31, r31
     866:	e3 54       	subi	r30, 0x43	; 67
     868:	fe 4f       	sbci	r31, 0xFE	; 254
     86a:	e0 80       	ld	r14, Z
     86c:	f1 80       	ldd	r15, Z+1	; 0x01
     86e:	b8 01       	movw	r22, r16
     870:	01 2e       	mov	r0, r17
     872:	00 0c       	add	r0, r0
     874:	88 0b       	sbc	r24, r24
     876:	99 0b       	sbc	r25, r25
     878:	ca d0       	rcall	.+404    	; 0xa0e <__floatsisf>
     87a:	4b 01       	movw	r8, r22
     87c:	5c 01       	movw	r10, r24
     87e:	b7 01       	movw	r22, r14
     880:	0f 2c       	mov	r0, r15
     882:	00 0c       	add	r0, r0
     884:	88 0b       	sbc	r24, r24
     886:	99 0b       	sbc	r25, r25
     888:	c2 d0       	rcall	.+388    	; 0xa0e <__floatsisf>
     88a:	2f e6       	ldi	r18, 0x6F	; 111
     88c:	32 e1       	ldi	r19, 0x12	; 18
     88e:	43 e0       	ldi	r20, 0x03	; 3
     890:	59 e3       	ldi	r21, 0x39	; 57
     892:	49 d1       	rcall	.+658    	; 0xb26 <__mulsf3>
     894:	9b 01       	movw	r18, r22
     896:	ac 01       	movw	r20, r24
     898:	c5 01       	movw	r24, r10
     89a:	b4 01       	movw	r22, r8
     89c:	1d d0       	rcall	.+58     	; 0x8d8 <__divsf3>
     89e:	84 d0       	rcall	.+264    	; 0x9a8 <__fixsfsi>
     8a0:	9b 01       	movw	r18, r22
     8a2:	21 96       	adiw	r28, 0x01	; 1
     8a4:	c6 30       	cpi	r28, 0x06	; 6
     8a6:	d1 05       	cpc	r29, r1
     8a8:	c4 f2       	brlt	.-80     	; 0x85a <set_timer+0x22>
     8aa:	b9 01       	movw	r22, r18
     8ac:	c7 01       	movw	r24, r14
     8ae:	b8 df       	rcall	.-144    	; 0x820 <setup_timer>
     8b0:	d0 92 d8 01 	sts	0x01D8, r13	; 0x8001d8 <on_interupt+0x1>
     8b4:	c0 92 d7 01 	sts	0x01D7, r12	; 0x8001d7 <on_interupt>
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	bf 90       	pop	r11
     8ca:	af 90       	pop	r10
     8cc:	9f 90       	pop	r9
     8ce:	8f 90       	pop	r8
     8d0:	08 95       	ret

000008d2 <main>:


// Main program
int main( void )
{
	GameLogic_Init();
     8d2:	7b dc       	rcall	.-1802   	; 0x1ca <GameLogic_Init>
	while (1)
	{
		// Reading measurement
		GameLogic_Round();
     8d4:	4f dd       	rcall	.-1378   	; 0x374 <GameLogic_Round>
     8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <main+0x2>

000008d8 <__divsf3>:
     8d8:	0c d0       	rcall	.+24     	; 0x8f2 <__divsf3x>
     8da:	eb c0       	rjmp	.+470    	; 0xab2 <__fp_round>
     8dc:	e3 d0       	rcall	.+454    	; 0xaa4 <__fp_pscB>
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__divsf3+0x18>
     8e0:	da d0       	rcall	.+436    	; 0xa96 <__fp_pscA>
     8e2:	30 f0       	brcs	.+12     	; 0x8f0 <__divsf3+0x18>
     8e4:	21 f4       	brne	.+8      	; 0x8ee <__divsf3+0x16>
     8e6:	5f 3f       	cpi	r21, 0xFF	; 255
     8e8:	19 f0       	breq	.+6      	; 0x8f0 <__divsf3+0x18>
     8ea:	cc c0       	rjmp	.+408    	; 0xa84 <__fp_inf>
     8ec:	51 11       	cpse	r21, r1
     8ee:	15 c1       	rjmp	.+554    	; 0xb1a <__fp_szero>
     8f0:	cf c0       	rjmp	.+414    	; 0xa90 <__fp_nan>

000008f2 <__divsf3x>:
     8f2:	f0 d0       	rcall	.+480    	; 0xad4 <__fp_split3>
     8f4:	98 f3       	brcs	.-26     	; 0x8dc <__divsf3+0x4>

000008f6 <__divsf3_pse>:
     8f6:	99 23       	and	r25, r25
     8f8:	c9 f3       	breq	.-14     	; 0x8ec <__divsf3+0x14>
     8fa:	55 23       	and	r21, r21
     8fc:	b1 f3       	breq	.-20     	; 0x8ea <__divsf3+0x12>
     8fe:	95 1b       	sub	r25, r21
     900:	55 0b       	sbc	r21, r21
     902:	bb 27       	eor	r27, r27
     904:	aa 27       	eor	r26, r26
     906:	62 17       	cp	r22, r18
     908:	73 07       	cpc	r23, r19
     90a:	84 07       	cpc	r24, r20
     90c:	38 f0       	brcs	.+14     	; 0x91c <__divsf3_pse+0x26>
     90e:	9f 5f       	subi	r25, 0xFF	; 255
     910:	5f 4f       	sbci	r21, 0xFF	; 255
     912:	22 0f       	add	r18, r18
     914:	33 1f       	adc	r19, r19
     916:	44 1f       	adc	r20, r20
     918:	aa 1f       	adc	r26, r26
     91a:	a9 f3       	breq	.-22     	; 0x906 <__divsf3_pse+0x10>
     91c:	33 d0       	rcall	.+102    	; 0x984 <__divsf3_pse+0x8e>
     91e:	0e 2e       	mov	r0, r30
     920:	3a f0       	brmi	.+14     	; 0x930 <__divsf3_pse+0x3a>
     922:	e0 e8       	ldi	r30, 0x80	; 128
     924:	30 d0       	rcall	.+96     	; 0x986 <__divsf3_pse+0x90>
     926:	91 50       	subi	r25, 0x01	; 1
     928:	50 40       	sbci	r21, 0x00	; 0
     92a:	e6 95       	lsr	r30
     92c:	00 1c       	adc	r0, r0
     92e:	ca f7       	brpl	.-14     	; 0x922 <__divsf3_pse+0x2c>
     930:	29 d0       	rcall	.+82     	; 0x984 <__divsf3_pse+0x8e>
     932:	fe 2f       	mov	r31, r30
     934:	27 d0       	rcall	.+78     	; 0x984 <__divsf3_pse+0x8e>
     936:	66 0f       	add	r22, r22
     938:	77 1f       	adc	r23, r23
     93a:	88 1f       	adc	r24, r24
     93c:	bb 1f       	adc	r27, r27
     93e:	26 17       	cp	r18, r22
     940:	37 07       	cpc	r19, r23
     942:	48 07       	cpc	r20, r24
     944:	ab 07       	cpc	r26, r27
     946:	b0 e8       	ldi	r27, 0x80	; 128
     948:	09 f0       	breq	.+2      	; 0x94c <__divsf3_pse+0x56>
     94a:	bb 0b       	sbc	r27, r27
     94c:	80 2d       	mov	r24, r0
     94e:	bf 01       	movw	r22, r30
     950:	ff 27       	eor	r31, r31
     952:	93 58       	subi	r25, 0x83	; 131
     954:	5f 4f       	sbci	r21, 0xFF	; 255
     956:	2a f0       	brmi	.+10     	; 0x962 <__divsf3_pse+0x6c>
     958:	9e 3f       	cpi	r25, 0xFE	; 254
     95a:	51 05       	cpc	r21, r1
     95c:	68 f0       	brcs	.+26     	; 0x978 <__divsf3_pse+0x82>
     95e:	92 c0       	rjmp	.+292    	; 0xa84 <__fp_inf>
     960:	dc c0       	rjmp	.+440    	; 0xb1a <__fp_szero>
     962:	5f 3f       	cpi	r21, 0xFF	; 255
     964:	ec f3       	brlt	.-6      	; 0x960 <__divsf3_pse+0x6a>
     966:	98 3e       	cpi	r25, 0xE8	; 232
     968:	dc f3       	brlt	.-10     	; 0x960 <__divsf3_pse+0x6a>
     96a:	86 95       	lsr	r24
     96c:	77 95       	ror	r23
     96e:	67 95       	ror	r22
     970:	b7 95       	ror	r27
     972:	f7 95       	ror	r31
     974:	9f 5f       	subi	r25, 0xFF	; 255
     976:	c9 f7       	brne	.-14     	; 0x96a <__divsf3_pse+0x74>
     978:	88 0f       	add	r24, r24
     97a:	91 1d       	adc	r25, r1
     97c:	96 95       	lsr	r25
     97e:	87 95       	ror	r24
     980:	97 f9       	bld	r25, 7
     982:	08 95       	ret
     984:	e1 e0       	ldi	r30, 0x01	; 1
     986:	66 0f       	add	r22, r22
     988:	77 1f       	adc	r23, r23
     98a:	88 1f       	adc	r24, r24
     98c:	bb 1f       	adc	r27, r27
     98e:	62 17       	cp	r22, r18
     990:	73 07       	cpc	r23, r19
     992:	84 07       	cpc	r24, r20
     994:	ba 07       	cpc	r27, r26
     996:	20 f0       	brcs	.+8      	; 0x9a0 <__divsf3_pse+0xaa>
     998:	62 1b       	sub	r22, r18
     99a:	73 0b       	sbc	r23, r19
     99c:	84 0b       	sbc	r24, r20
     99e:	ba 0b       	sbc	r27, r26
     9a0:	ee 1f       	adc	r30, r30
     9a2:	88 f7       	brcc	.-30     	; 0x986 <__divsf3_pse+0x90>
     9a4:	e0 95       	com	r30
     9a6:	08 95       	ret

000009a8 <__fixsfsi>:
     9a8:	04 d0       	rcall	.+8      	; 0x9b2 <__fixunssfsi>
     9aa:	68 94       	set
     9ac:	b1 11       	cpse	r27, r1
     9ae:	b5 c0       	rjmp	.+362    	; 0xb1a <__fp_szero>
     9b0:	08 95       	ret

000009b2 <__fixunssfsi>:
     9b2:	98 d0       	rcall	.+304    	; 0xae4 <__fp_splitA>
     9b4:	88 f0       	brcs	.+34     	; 0x9d8 <__fixunssfsi+0x26>
     9b6:	9f 57       	subi	r25, 0x7F	; 127
     9b8:	90 f0       	brcs	.+36     	; 0x9de <__fixunssfsi+0x2c>
     9ba:	b9 2f       	mov	r27, r25
     9bc:	99 27       	eor	r25, r25
     9be:	b7 51       	subi	r27, 0x17	; 23
     9c0:	a0 f0       	brcs	.+40     	; 0x9ea <__fixunssfsi+0x38>
     9c2:	d1 f0       	breq	.+52     	; 0x9f8 <__fixunssfsi+0x46>
     9c4:	66 0f       	add	r22, r22
     9c6:	77 1f       	adc	r23, r23
     9c8:	88 1f       	adc	r24, r24
     9ca:	99 1f       	adc	r25, r25
     9cc:	1a f0       	brmi	.+6      	; 0x9d4 <__fixunssfsi+0x22>
     9ce:	ba 95       	dec	r27
     9d0:	c9 f7       	brne	.-14     	; 0x9c4 <__fixunssfsi+0x12>
     9d2:	12 c0       	rjmp	.+36     	; 0x9f8 <__fixunssfsi+0x46>
     9d4:	b1 30       	cpi	r27, 0x01	; 1
     9d6:	81 f0       	breq	.+32     	; 0x9f8 <__fixunssfsi+0x46>
     9d8:	9f d0       	rcall	.+318    	; 0xb18 <__fp_zero>
     9da:	b1 e0       	ldi	r27, 0x01	; 1
     9dc:	08 95       	ret
     9de:	9c c0       	rjmp	.+312    	; 0xb18 <__fp_zero>
     9e0:	67 2f       	mov	r22, r23
     9e2:	78 2f       	mov	r23, r24
     9e4:	88 27       	eor	r24, r24
     9e6:	b8 5f       	subi	r27, 0xF8	; 248
     9e8:	39 f0       	breq	.+14     	; 0x9f8 <__fixunssfsi+0x46>
     9ea:	b9 3f       	cpi	r27, 0xF9	; 249
     9ec:	cc f3       	brlt	.-14     	; 0x9e0 <__fixunssfsi+0x2e>
     9ee:	86 95       	lsr	r24
     9f0:	77 95       	ror	r23
     9f2:	67 95       	ror	r22
     9f4:	b3 95       	inc	r27
     9f6:	d9 f7       	brne	.-10     	; 0x9ee <__fixunssfsi+0x3c>
     9f8:	3e f4       	brtc	.+14     	; 0xa08 <__fixunssfsi+0x56>
     9fa:	90 95       	com	r25
     9fc:	80 95       	com	r24
     9fe:	70 95       	com	r23
     a00:	61 95       	neg	r22
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	8f 4f       	sbci	r24, 0xFF	; 255
     a06:	9f 4f       	sbci	r25, 0xFF	; 255
     a08:	08 95       	ret

00000a0a <__floatunsisf>:
     a0a:	e8 94       	clt
     a0c:	09 c0       	rjmp	.+18     	; 0xa20 <__floatsisf+0x12>

00000a0e <__floatsisf>:
     a0e:	97 fb       	bst	r25, 7
     a10:	3e f4       	brtc	.+14     	; 0xa20 <__floatsisf+0x12>
     a12:	90 95       	com	r25
     a14:	80 95       	com	r24
     a16:	70 95       	com	r23
     a18:	61 95       	neg	r22
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	8f 4f       	sbci	r24, 0xFF	; 255
     a1e:	9f 4f       	sbci	r25, 0xFF	; 255
     a20:	99 23       	and	r25, r25
     a22:	a9 f0       	breq	.+42     	; 0xa4e <__floatsisf+0x40>
     a24:	f9 2f       	mov	r31, r25
     a26:	96 e9       	ldi	r25, 0x96	; 150
     a28:	bb 27       	eor	r27, r27
     a2a:	93 95       	inc	r25
     a2c:	f6 95       	lsr	r31
     a2e:	87 95       	ror	r24
     a30:	77 95       	ror	r23
     a32:	67 95       	ror	r22
     a34:	b7 95       	ror	r27
     a36:	f1 11       	cpse	r31, r1
     a38:	f8 cf       	rjmp	.-16     	; 0xa2a <__floatsisf+0x1c>
     a3a:	fa f4       	brpl	.+62     	; 0xa7a <__floatsisf+0x6c>
     a3c:	bb 0f       	add	r27, r27
     a3e:	11 f4       	brne	.+4      	; 0xa44 <__floatsisf+0x36>
     a40:	60 ff       	sbrs	r22, 0
     a42:	1b c0       	rjmp	.+54     	; 0xa7a <__floatsisf+0x6c>
     a44:	6f 5f       	subi	r22, 0xFF	; 255
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	8f 4f       	sbci	r24, 0xFF	; 255
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	16 c0       	rjmp	.+44     	; 0xa7a <__floatsisf+0x6c>
     a4e:	88 23       	and	r24, r24
     a50:	11 f0       	breq	.+4      	; 0xa56 <__floatsisf+0x48>
     a52:	96 e9       	ldi	r25, 0x96	; 150
     a54:	11 c0       	rjmp	.+34     	; 0xa78 <__floatsisf+0x6a>
     a56:	77 23       	and	r23, r23
     a58:	21 f0       	breq	.+8      	; 0xa62 <__floatsisf+0x54>
     a5a:	9e e8       	ldi	r25, 0x8E	; 142
     a5c:	87 2f       	mov	r24, r23
     a5e:	76 2f       	mov	r23, r22
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__floatsisf+0x5e>
     a62:	66 23       	and	r22, r22
     a64:	71 f0       	breq	.+28     	; 0xa82 <__floatsisf+0x74>
     a66:	96 e8       	ldi	r25, 0x86	; 134
     a68:	86 2f       	mov	r24, r22
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	2a f0       	brmi	.+10     	; 0xa7a <__floatsisf+0x6c>
     a70:	9a 95       	dec	r25
     a72:	66 0f       	add	r22, r22
     a74:	77 1f       	adc	r23, r23
     a76:	88 1f       	adc	r24, r24
     a78:	da f7       	brpl	.-10     	; 0xa70 <__floatsisf+0x62>
     a7a:	88 0f       	add	r24, r24
     a7c:	96 95       	lsr	r25
     a7e:	87 95       	ror	r24
     a80:	97 f9       	bld	r25, 7
     a82:	08 95       	ret

00000a84 <__fp_inf>:
     a84:	97 f9       	bld	r25, 7
     a86:	9f 67       	ori	r25, 0x7F	; 127
     a88:	80 e8       	ldi	r24, 0x80	; 128
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	08 95       	ret

00000a90 <__fp_nan>:
     a90:	9f ef       	ldi	r25, 0xFF	; 255
     a92:	80 ec       	ldi	r24, 0xC0	; 192
     a94:	08 95       	ret

00000a96 <__fp_pscA>:
     a96:	00 24       	eor	r0, r0
     a98:	0a 94       	dec	r0
     a9a:	16 16       	cp	r1, r22
     a9c:	17 06       	cpc	r1, r23
     a9e:	18 06       	cpc	r1, r24
     aa0:	09 06       	cpc	r0, r25
     aa2:	08 95       	ret

00000aa4 <__fp_pscB>:
     aa4:	00 24       	eor	r0, r0
     aa6:	0a 94       	dec	r0
     aa8:	12 16       	cp	r1, r18
     aaa:	13 06       	cpc	r1, r19
     aac:	14 06       	cpc	r1, r20
     aae:	05 06       	cpc	r0, r21
     ab0:	08 95       	ret

00000ab2 <__fp_round>:
     ab2:	09 2e       	mov	r0, r25
     ab4:	03 94       	inc	r0
     ab6:	00 0c       	add	r0, r0
     ab8:	11 f4       	brne	.+4      	; 0xabe <__fp_round+0xc>
     aba:	88 23       	and	r24, r24
     abc:	52 f0       	brmi	.+20     	; 0xad2 <__fp_round+0x20>
     abe:	bb 0f       	add	r27, r27
     ac0:	40 f4       	brcc	.+16     	; 0xad2 <__fp_round+0x20>
     ac2:	bf 2b       	or	r27, r31
     ac4:	11 f4       	brne	.+4      	; 0xaca <__fp_round+0x18>
     ac6:	60 ff       	sbrs	r22, 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__fp_round+0x20>
     aca:	6f 5f       	subi	r22, 0xFF	; 255
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	8f 4f       	sbci	r24, 0xFF	; 255
     ad0:	9f 4f       	sbci	r25, 0xFF	; 255
     ad2:	08 95       	ret

00000ad4 <__fp_split3>:
     ad4:	57 fd       	sbrc	r21, 7
     ad6:	90 58       	subi	r25, 0x80	; 128
     ad8:	44 0f       	add	r20, r20
     ada:	55 1f       	adc	r21, r21
     adc:	59 f0       	breq	.+22     	; 0xaf4 <__fp_splitA+0x10>
     ade:	5f 3f       	cpi	r21, 0xFF	; 255
     ae0:	71 f0       	breq	.+28     	; 0xafe <__fp_splitA+0x1a>
     ae2:	47 95       	ror	r20

00000ae4 <__fp_splitA>:
     ae4:	88 0f       	add	r24, r24
     ae6:	97 fb       	bst	r25, 7
     ae8:	99 1f       	adc	r25, r25
     aea:	61 f0       	breq	.+24     	; 0xb04 <__fp_splitA+0x20>
     aec:	9f 3f       	cpi	r25, 0xFF	; 255
     aee:	79 f0       	breq	.+30     	; 0xb0e <__fp_splitA+0x2a>
     af0:	87 95       	ror	r24
     af2:	08 95       	ret
     af4:	12 16       	cp	r1, r18
     af6:	13 06       	cpc	r1, r19
     af8:	14 06       	cpc	r1, r20
     afa:	55 1f       	adc	r21, r21
     afc:	f2 cf       	rjmp	.-28     	; 0xae2 <__fp_split3+0xe>
     afe:	46 95       	lsr	r20
     b00:	f1 df       	rcall	.-30     	; 0xae4 <__fp_splitA>
     b02:	08 c0       	rjmp	.+16     	; 0xb14 <__fp_splitA+0x30>
     b04:	16 16       	cp	r1, r22
     b06:	17 06       	cpc	r1, r23
     b08:	18 06       	cpc	r1, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	f1 cf       	rjmp	.-30     	; 0xaf0 <__fp_splitA+0xc>
     b0e:	86 95       	lsr	r24
     b10:	71 05       	cpc	r23, r1
     b12:	61 05       	cpc	r22, r1
     b14:	08 94       	sec
     b16:	08 95       	ret

00000b18 <__fp_zero>:
     b18:	e8 94       	clt

00000b1a <__fp_szero>:
     b1a:	bb 27       	eor	r27, r27
     b1c:	66 27       	eor	r22, r22
     b1e:	77 27       	eor	r23, r23
     b20:	cb 01       	movw	r24, r22
     b22:	97 f9       	bld	r25, 7
     b24:	08 95       	ret

00000b26 <__mulsf3>:
     b26:	0b d0       	rcall	.+22     	; 0xb3e <__mulsf3x>
     b28:	c4 cf       	rjmp	.-120    	; 0xab2 <__fp_round>
     b2a:	b5 df       	rcall	.-150    	; 0xa96 <__fp_pscA>
     b2c:	28 f0       	brcs	.+10     	; 0xb38 <__mulsf3+0x12>
     b2e:	ba df       	rcall	.-140    	; 0xaa4 <__fp_pscB>
     b30:	18 f0       	brcs	.+6      	; 0xb38 <__mulsf3+0x12>
     b32:	95 23       	and	r25, r21
     b34:	09 f0       	breq	.+2      	; 0xb38 <__mulsf3+0x12>
     b36:	a6 cf       	rjmp	.-180    	; 0xa84 <__fp_inf>
     b38:	ab cf       	rjmp	.-170    	; 0xa90 <__fp_nan>
     b3a:	11 24       	eor	r1, r1
     b3c:	ee cf       	rjmp	.-36     	; 0xb1a <__fp_szero>

00000b3e <__mulsf3x>:
     b3e:	ca df       	rcall	.-108    	; 0xad4 <__fp_split3>
     b40:	a0 f3       	brcs	.-24     	; 0xb2a <__mulsf3+0x4>

00000b42 <__mulsf3_pse>:
     b42:	95 9f       	mul	r25, r21
     b44:	d1 f3       	breq	.-12     	; 0xb3a <__mulsf3+0x14>
     b46:	95 0f       	add	r25, r21
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	55 1f       	adc	r21, r21
     b4c:	62 9f       	mul	r22, r18
     b4e:	f0 01       	movw	r30, r0
     b50:	72 9f       	mul	r23, r18
     b52:	bb 27       	eor	r27, r27
     b54:	f0 0d       	add	r31, r0
     b56:	b1 1d       	adc	r27, r1
     b58:	63 9f       	mul	r22, r19
     b5a:	aa 27       	eor	r26, r26
     b5c:	f0 0d       	add	r31, r0
     b5e:	b1 1d       	adc	r27, r1
     b60:	aa 1f       	adc	r26, r26
     b62:	64 9f       	mul	r22, r20
     b64:	66 27       	eor	r22, r22
     b66:	b0 0d       	add	r27, r0
     b68:	a1 1d       	adc	r26, r1
     b6a:	66 1f       	adc	r22, r22
     b6c:	82 9f       	mul	r24, r18
     b6e:	22 27       	eor	r18, r18
     b70:	b0 0d       	add	r27, r0
     b72:	a1 1d       	adc	r26, r1
     b74:	62 1f       	adc	r22, r18
     b76:	73 9f       	mul	r23, r19
     b78:	b0 0d       	add	r27, r0
     b7a:	a1 1d       	adc	r26, r1
     b7c:	62 1f       	adc	r22, r18
     b7e:	83 9f       	mul	r24, r19
     b80:	a0 0d       	add	r26, r0
     b82:	61 1d       	adc	r22, r1
     b84:	22 1f       	adc	r18, r18
     b86:	74 9f       	mul	r23, r20
     b88:	33 27       	eor	r19, r19
     b8a:	a0 0d       	add	r26, r0
     b8c:	61 1d       	adc	r22, r1
     b8e:	23 1f       	adc	r18, r19
     b90:	84 9f       	mul	r24, r20
     b92:	60 0d       	add	r22, r0
     b94:	21 1d       	adc	r18, r1
     b96:	82 2f       	mov	r24, r18
     b98:	76 2f       	mov	r23, r22
     b9a:	6a 2f       	mov	r22, r26
     b9c:	11 24       	eor	r1, r1
     b9e:	9f 57       	subi	r25, 0x7F	; 127
     ba0:	50 40       	sbci	r21, 0x00	; 0
     ba2:	8a f0       	brmi	.+34     	; 0xbc6 <__mulsf3_pse+0x84>
     ba4:	e1 f0       	breq	.+56     	; 0xbde <__mulsf3_pse+0x9c>
     ba6:	88 23       	and	r24, r24
     ba8:	4a f0       	brmi	.+18     	; 0xbbc <__mulsf3_pse+0x7a>
     baa:	ee 0f       	add	r30, r30
     bac:	ff 1f       	adc	r31, r31
     bae:	bb 1f       	adc	r27, r27
     bb0:	66 1f       	adc	r22, r22
     bb2:	77 1f       	adc	r23, r23
     bb4:	88 1f       	adc	r24, r24
     bb6:	91 50       	subi	r25, 0x01	; 1
     bb8:	50 40       	sbci	r21, 0x00	; 0
     bba:	a9 f7       	brne	.-22     	; 0xba6 <__mulsf3_pse+0x64>
     bbc:	9e 3f       	cpi	r25, 0xFE	; 254
     bbe:	51 05       	cpc	r21, r1
     bc0:	70 f0       	brcs	.+28     	; 0xbde <__mulsf3_pse+0x9c>
     bc2:	60 cf       	rjmp	.-320    	; 0xa84 <__fp_inf>
     bc4:	aa cf       	rjmp	.-172    	; 0xb1a <__fp_szero>
     bc6:	5f 3f       	cpi	r21, 0xFF	; 255
     bc8:	ec f3       	brlt	.-6      	; 0xbc4 <__mulsf3_pse+0x82>
     bca:	98 3e       	cpi	r25, 0xE8	; 232
     bcc:	dc f3       	brlt	.-10     	; 0xbc4 <__mulsf3_pse+0x82>
     bce:	86 95       	lsr	r24
     bd0:	77 95       	ror	r23
     bd2:	67 95       	ror	r22
     bd4:	b7 95       	ror	r27
     bd6:	f7 95       	ror	r31
     bd8:	e7 95       	ror	r30
     bda:	9f 5f       	subi	r25, 0xFF	; 255
     bdc:	c1 f7       	brne	.-16     	; 0xbce <__mulsf3_pse+0x8c>
     bde:	fe 2b       	or	r31, r30
     be0:	88 0f       	add	r24, r24
     be2:	91 1d       	adc	r25, r1
     be4:	96 95       	lsr	r25
     be6:	87 95       	ror	r24
     be8:	97 f9       	bld	r25, 7
     bea:	08 95       	ret

00000bec <__divmodhi4>:
     bec:	97 fb       	bst	r25, 7
     bee:	07 2e       	mov	r0, r23
     bf0:	16 f4       	brtc	.+4      	; 0xbf6 <__divmodhi4+0xa>
     bf2:	00 94       	com	r0
     bf4:	06 d0       	rcall	.+12     	; 0xc02 <__divmodhi4_neg1>
     bf6:	77 fd       	sbrc	r23, 7
     bf8:	08 d0       	rcall	.+16     	; 0xc0a <__divmodhi4_neg2>
     bfa:	0b d0       	rcall	.+22     	; 0xc12 <__udivmodhi4>
     bfc:	07 fc       	sbrc	r0, 7
     bfe:	05 d0       	rcall	.+10     	; 0xc0a <__divmodhi4_neg2>
     c00:	3e f4       	brtc	.+14     	; 0xc10 <__divmodhi4_exit>

00000c02 <__divmodhi4_neg1>:
     c02:	90 95       	com	r25
     c04:	81 95       	neg	r24
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	08 95       	ret

00000c0a <__divmodhi4_neg2>:
     c0a:	70 95       	com	r23
     c0c:	61 95       	neg	r22
     c0e:	7f 4f       	sbci	r23, 0xFF	; 255

00000c10 <__divmodhi4_exit>:
     c10:	08 95       	ret

00000c12 <__udivmodhi4>:
     c12:	aa 1b       	sub	r26, r26
     c14:	bb 1b       	sub	r27, r27
     c16:	51 e1       	ldi	r21, 0x11	; 17
     c18:	07 c0       	rjmp	.+14     	; 0xc28 <__udivmodhi4_ep>

00000c1a <__udivmodhi4_loop>:
     c1a:	aa 1f       	adc	r26, r26
     c1c:	bb 1f       	adc	r27, r27
     c1e:	a6 17       	cp	r26, r22
     c20:	b7 07       	cpc	r27, r23
     c22:	10 f0       	brcs	.+4      	; 0xc28 <__udivmodhi4_ep>
     c24:	a6 1b       	sub	r26, r22
     c26:	b7 0b       	sbc	r27, r23

00000c28 <__udivmodhi4_ep>:
     c28:	88 1f       	adc	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	5a 95       	dec	r21
     c2e:	a9 f7       	brne	.-22     	; 0xc1a <__udivmodhi4_loop>
     c30:	80 95       	com	r24
     c32:	90 95       	com	r25
     c34:	bc 01       	movw	r22, r24
     c36:	cd 01       	movw	r24, r26
     c38:	08 95       	ret

00000c3a <do_rand>:
     c3a:	8f 92       	push	r8
     c3c:	9f 92       	push	r9
     c3e:	af 92       	push	r10
     c40:	bf 92       	push	r11
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	ec 01       	movw	r28, r24
     c50:	68 81       	ld	r22, Y
     c52:	79 81       	ldd	r23, Y+1	; 0x01
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	61 15       	cp	r22, r1
     c5a:	71 05       	cpc	r23, r1
     c5c:	81 05       	cpc	r24, r1
     c5e:	91 05       	cpc	r25, r1
     c60:	21 f4       	brne	.+8      	; 0xc6a <do_rand+0x30>
     c62:	64 e2       	ldi	r22, 0x24	; 36
     c64:	79 ed       	ldi	r23, 0xD9	; 217
     c66:	8b e5       	ldi	r24, 0x5B	; 91
     c68:	97 e0       	ldi	r25, 0x07	; 7
     c6a:	2d e1       	ldi	r18, 0x1D	; 29
     c6c:	33 ef       	ldi	r19, 0xF3	; 243
     c6e:	41 e0       	ldi	r20, 0x01	; 1
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	13 d3       	rcall	.+1574   	; 0x129a <__divmodsi4>
     c74:	49 01       	movw	r8, r18
     c76:	5a 01       	movw	r10, r20
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	a7 ea       	ldi	r26, 0xA7	; 167
     c7e:	b1 e4       	ldi	r27, 0x41	; 65
     c80:	28 d3       	rcall	.+1616   	; 0x12d2 <__muluhisi3>
     c82:	6b 01       	movw	r12, r22
     c84:	7c 01       	movw	r14, r24
     c86:	ac ee       	ldi	r26, 0xEC	; 236
     c88:	b4 ef       	ldi	r27, 0xF4	; 244
     c8a:	a5 01       	movw	r20, r10
     c8c:	94 01       	movw	r18, r8
     c8e:	2d d3       	rcall	.+1626   	; 0x12ea <__mulohisi3>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	8c 0d       	add	r24, r12
     c96:	9d 1d       	adc	r25, r13
     c98:	ae 1d       	adc	r26, r14
     c9a:	bf 1d       	adc	r27, r15
     c9c:	b7 ff       	sbrs	r27, 7
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <do_rand+0x6c>
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	a1 09       	sbc	r26, r1
     ca4:	b0 48       	sbci	r27, 0x80	; 128
     ca6:	88 83       	st	Y, r24
     ca8:	99 83       	std	Y+1, r25	; 0x01
     caa:	aa 83       	std	Y+2, r26	; 0x02
     cac:	bb 83       	std	Y+3, r27	; 0x03
     cae:	9f 77       	andi	r25, 0x7F	; 127
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	bf 90       	pop	r11
     cbe:	af 90       	pop	r10
     cc0:	9f 90       	pop	r9
     cc2:	8f 90       	pop	r8
     cc4:	08 95       	ret

00000cc6 <rand_r>:
     cc6:	b9 cf       	rjmp	.-142    	; 0xc3a <do_rand>

00000cc8 <rand>:
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	b6 cf       	rjmp	.-148    	; 0xc3a <do_rand>

00000cce <srand>:
     cce:	a0 e0       	ldi	r26, 0x00	; 0
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     cd6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cda:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     cde:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     ce2:	08 95       	ret

00000ce4 <sprintf>:
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	2e 97       	sbiw	r28, 0x0e	; 14
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	0d 89       	ldd	r16, Y+21	; 0x15
     cfe:	1e 89       	ldd	r17, Y+22	; 0x16
     d00:	86 e0       	ldi	r24, 0x06	; 6
     d02:	8c 83       	std	Y+4, r24	; 0x04
     d04:	1a 83       	std	Y+2, r17	; 0x02
     d06:	09 83       	std	Y+1, r16	; 0x01
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	9f e7       	ldi	r25, 0x7F	; 127
     d0c:	9e 83       	std	Y+6, r25	; 0x06
     d0e:	8d 83       	std	Y+5, r24	; 0x05
     d10:	ae 01       	movw	r20, r28
     d12:	47 5e       	subi	r20, 0xE7	; 231
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	6f 89       	ldd	r22, Y+23	; 0x17
     d18:	78 8d       	ldd	r23, Y+24	; 0x18
     d1a:	ce 01       	movw	r24, r28
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	10 d0       	rcall	.+32     	; 0xd40 <vfprintf>
     d20:	ef 81       	ldd	r30, Y+7	; 0x07
     d22:	f8 85       	ldd	r31, Y+8	; 0x08
     d24:	e0 0f       	add	r30, r16
     d26:	f1 1f       	adc	r31, r17
     d28:	10 82       	st	Z, r1
     d2a:	2e 96       	adiw	r28, 0x0e	; 14
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	08 95       	ret

00000d40 <vfprintf>:
     d40:	2f 92       	push	r2
     d42:	3f 92       	push	r3
     d44:	4f 92       	push	r4
     d46:	5f 92       	push	r5
     d48:	6f 92       	push	r6
     d4a:	7f 92       	push	r7
     d4c:	8f 92       	push	r8
     d4e:	9f 92       	push	r9
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	2b 97       	sbiw	r28, 0x0b	; 11
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	6c 01       	movw	r12, r24
     d76:	7b 01       	movw	r14, r22
     d78:	8a 01       	movw	r16, r20
     d7a:	fc 01       	movw	r30, r24
     d7c:	17 82       	std	Z+7, r1	; 0x07
     d7e:	16 82       	std	Z+6, r1	; 0x06
     d80:	83 81       	ldd	r24, Z+3	; 0x03
     d82:	81 ff       	sbrs	r24, 1
     d84:	bf c1       	rjmp	.+894    	; 0x1104 <__stack+0x5>
     d86:	ce 01       	movw	r24, r28
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	3c 01       	movw	r6, r24
     d8c:	f6 01       	movw	r30, r12
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	f7 01       	movw	r30, r14
     d92:	93 fd       	sbrc	r25, 3
     d94:	85 91       	lpm	r24, Z+
     d96:	93 ff       	sbrs	r25, 3
     d98:	81 91       	ld	r24, Z+
     d9a:	7f 01       	movw	r14, r30
     d9c:	88 23       	and	r24, r24
     d9e:	09 f4       	brne	.+2      	; 0xda2 <vfprintf+0x62>
     da0:	ad c1       	rjmp	.+858    	; 0x10fc <__DATA_REGION_LENGTH__+0xfc>
     da2:	85 32       	cpi	r24, 0x25	; 37
     da4:	39 f4       	brne	.+14     	; 0xdb4 <vfprintf+0x74>
     da6:	93 fd       	sbrc	r25, 3
     da8:	85 91       	lpm	r24, Z+
     daa:	93 ff       	sbrs	r25, 3
     dac:	81 91       	ld	r24, Z+
     dae:	7f 01       	movw	r14, r30
     db0:	85 32       	cpi	r24, 0x25	; 37
     db2:	21 f4       	brne	.+8      	; 0xdbc <vfprintf+0x7c>
     db4:	b6 01       	movw	r22, r12
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	d6 d1       	rcall	.+940    	; 0x1166 <fputc>
     dba:	e8 cf       	rjmp	.-48     	; 0xd8c <vfprintf+0x4c>
     dbc:	91 2c       	mov	r9, r1
     dbe:	21 2c       	mov	r2, r1
     dc0:	31 2c       	mov	r3, r1
     dc2:	ff e1       	ldi	r31, 0x1F	; 31
     dc4:	f3 15       	cp	r31, r3
     dc6:	d8 f0       	brcs	.+54     	; 0xdfe <vfprintf+0xbe>
     dc8:	8b 32       	cpi	r24, 0x2B	; 43
     dca:	79 f0       	breq	.+30     	; 0xdea <vfprintf+0xaa>
     dcc:	38 f4       	brcc	.+14     	; 0xddc <vfprintf+0x9c>
     dce:	80 32       	cpi	r24, 0x20	; 32
     dd0:	79 f0       	breq	.+30     	; 0xdf0 <vfprintf+0xb0>
     dd2:	83 32       	cpi	r24, 0x23	; 35
     dd4:	a1 f4       	brne	.+40     	; 0xdfe <vfprintf+0xbe>
     dd6:	23 2d       	mov	r18, r3
     dd8:	20 61       	ori	r18, 0x10	; 16
     dda:	1d c0       	rjmp	.+58     	; 0xe16 <vfprintf+0xd6>
     ddc:	8d 32       	cpi	r24, 0x2D	; 45
     dde:	61 f0       	breq	.+24     	; 0xdf8 <vfprintf+0xb8>
     de0:	80 33       	cpi	r24, 0x30	; 48
     de2:	69 f4       	brne	.+26     	; 0xdfe <vfprintf+0xbe>
     de4:	23 2d       	mov	r18, r3
     de6:	21 60       	ori	r18, 0x01	; 1
     de8:	16 c0       	rjmp	.+44     	; 0xe16 <vfprintf+0xd6>
     dea:	83 2d       	mov	r24, r3
     dec:	82 60       	ori	r24, 0x02	; 2
     dee:	38 2e       	mov	r3, r24
     df0:	e3 2d       	mov	r30, r3
     df2:	e4 60       	ori	r30, 0x04	; 4
     df4:	3e 2e       	mov	r3, r30
     df6:	2a c0       	rjmp	.+84     	; 0xe4c <vfprintf+0x10c>
     df8:	f3 2d       	mov	r31, r3
     dfa:	f8 60       	ori	r31, 0x08	; 8
     dfc:	1d c0       	rjmp	.+58     	; 0xe38 <vfprintf+0xf8>
     dfe:	37 fc       	sbrc	r3, 7
     e00:	2d c0       	rjmp	.+90     	; 0xe5c <vfprintf+0x11c>
     e02:	20 ed       	ldi	r18, 0xD0	; 208
     e04:	28 0f       	add	r18, r24
     e06:	2a 30       	cpi	r18, 0x0A	; 10
     e08:	40 f0       	brcs	.+16     	; 0xe1a <vfprintf+0xda>
     e0a:	8e 32       	cpi	r24, 0x2E	; 46
     e0c:	b9 f4       	brne	.+46     	; 0xe3c <vfprintf+0xfc>
     e0e:	36 fc       	sbrc	r3, 6
     e10:	75 c1       	rjmp	.+746    	; 0x10fc <__DATA_REGION_LENGTH__+0xfc>
     e12:	23 2d       	mov	r18, r3
     e14:	20 64       	ori	r18, 0x40	; 64
     e16:	32 2e       	mov	r3, r18
     e18:	19 c0       	rjmp	.+50     	; 0xe4c <vfprintf+0x10c>
     e1a:	36 fe       	sbrs	r3, 6
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <vfprintf+0xea>
     e1e:	8a e0       	ldi	r24, 0x0A	; 10
     e20:	98 9e       	mul	r9, r24
     e22:	20 0d       	add	r18, r0
     e24:	11 24       	eor	r1, r1
     e26:	92 2e       	mov	r9, r18
     e28:	11 c0       	rjmp	.+34     	; 0xe4c <vfprintf+0x10c>
     e2a:	ea e0       	ldi	r30, 0x0A	; 10
     e2c:	2e 9e       	mul	r2, r30
     e2e:	20 0d       	add	r18, r0
     e30:	11 24       	eor	r1, r1
     e32:	22 2e       	mov	r2, r18
     e34:	f3 2d       	mov	r31, r3
     e36:	f0 62       	ori	r31, 0x20	; 32
     e38:	3f 2e       	mov	r3, r31
     e3a:	08 c0       	rjmp	.+16     	; 0xe4c <vfprintf+0x10c>
     e3c:	8c 36       	cpi	r24, 0x6C	; 108
     e3e:	21 f4       	brne	.+8      	; 0xe48 <vfprintf+0x108>
     e40:	83 2d       	mov	r24, r3
     e42:	80 68       	ori	r24, 0x80	; 128
     e44:	38 2e       	mov	r3, r24
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <vfprintf+0x10c>
     e48:	88 36       	cpi	r24, 0x68	; 104
     e4a:	41 f4       	brne	.+16     	; 0xe5c <vfprintf+0x11c>
     e4c:	f7 01       	movw	r30, r14
     e4e:	93 fd       	sbrc	r25, 3
     e50:	85 91       	lpm	r24, Z+
     e52:	93 ff       	sbrs	r25, 3
     e54:	81 91       	ld	r24, Z+
     e56:	7f 01       	movw	r14, r30
     e58:	81 11       	cpse	r24, r1
     e5a:	b3 cf       	rjmp	.-154    	; 0xdc2 <vfprintf+0x82>
     e5c:	98 2f       	mov	r25, r24
     e5e:	9f 7d       	andi	r25, 0xDF	; 223
     e60:	95 54       	subi	r25, 0x45	; 69
     e62:	93 30       	cpi	r25, 0x03	; 3
     e64:	28 f4       	brcc	.+10     	; 0xe70 <vfprintf+0x130>
     e66:	0c 5f       	subi	r16, 0xFC	; 252
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	9f e3       	ldi	r25, 0x3F	; 63
     e6c:	99 83       	std	Y+1, r25	; 0x01
     e6e:	0d c0       	rjmp	.+26     	; 0xe8a <vfprintf+0x14a>
     e70:	83 36       	cpi	r24, 0x63	; 99
     e72:	31 f0       	breq	.+12     	; 0xe80 <vfprintf+0x140>
     e74:	83 37       	cpi	r24, 0x73	; 115
     e76:	71 f0       	breq	.+28     	; 0xe94 <vfprintf+0x154>
     e78:	83 35       	cpi	r24, 0x53	; 83
     e7a:	09 f0       	breq	.+2      	; 0xe7e <vfprintf+0x13e>
     e7c:	55 c0       	rjmp	.+170    	; 0xf28 <vfprintf+0x1e8>
     e7e:	20 c0       	rjmp	.+64     	; 0xec0 <vfprintf+0x180>
     e80:	f8 01       	movw	r30, r16
     e82:	80 81       	ld	r24, Z
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	0e 5f       	subi	r16, 0xFE	; 254
     e88:	1f 4f       	sbci	r17, 0xFF	; 255
     e8a:	88 24       	eor	r8, r8
     e8c:	83 94       	inc	r8
     e8e:	91 2c       	mov	r9, r1
     e90:	53 01       	movw	r10, r6
     e92:	12 c0       	rjmp	.+36     	; 0xeb8 <vfprintf+0x178>
     e94:	28 01       	movw	r4, r16
     e96:	f2 e0       	ldi	r31, 0x02	; 2
     e98:	4f 0e       	add	r4, r31
     e9a:	51 1c       	adc	r5, r1
     e9c:	f8 01       	movw	r30, r16
     e9e:	a0 80       	ld	r10, Z
     ea0:	b1 80       	ldd	r11, Z+1	; 0x01
     ea2:	36 fe       	sbrs	r3, 6
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <vfprintf+0x16c>
     ea6:	69 2d       	mov	r22, r9
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <vfprintf+0x170>
     eac:	6f ef       	ldi	r22, 0xFF	; 255
     eae:	7f ef       	ldi	r23, 0xFF	; 255
     eb0:	c5 01       	movw	r24, r10
     eb2:	4e d1       	rcall	.+668    	; 0x1150 <strnlen>
     eb4:	4c 01       	movw	r8, r24
     eb6:	82 01       	movw	r16, r4
     eb8:	f3 2d       	mov	r31, r3
     eba:	ff 77       	andi	r31, 0x7F	; 127
     ebc:	3f 2e       	mov	r3, r31
     ebe:	15 c0       	rjmp	.+42     	; 0xeea <vfprintf+0x1aa>
     ec0:	28 01       	movw	r4, r16
     ec2:	22 e0       	ldi	r18, 0x02	; 2
     ec4:	42 0e       	add	r4, r18
     ec6:	51 1c       	adc	r5, r1
     ec8:	f8 01       	movw	r30, r16
     eca:	a0 80       	ld	r10, Z
     ecc:	b1 80       	ldd	r11, Z+1	; 0x01
     ece:	36 fe       	sbrs	r3, 6
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <vfprintf+0x198>
     ed2:	69 2d       	mov	r22, r9
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <vfprintf+0x19c>
     ed8:	6f ef       	ldi	r22, 0xFF	; 255
     eda:	7f ef       	ldi	r23, 0xFF	; 255
     edc:	c5 01       	movw	r24, r10
     ede:	2d d1       	rcall	.+602    	; 0x113a <strnlen_P>
     ee0:	4c 01       	movw	r8, r24
     ee2:	f3 2d       	mov	r31, r3
     ee4:	f0 68       	ori	r31, 0x80	; 128
     ee6:	3f 2e       	mov	r3, r31
     ee8:	82 01       	movw	r16, r4
     eea:	33 fc       	sbrc	r3, 3
     eec:	19 c0       	rjmp	.+50     	; 0xf20 <vfprintf+0x1e0>
     eee:	82 2d       	mov	r24, r2
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	88 16       	cp	r8, r24
     ef4:	99 06       	cpc	r9, r25
     ef6:	a0 f4       	brcc	.+40     	; 0xf20 <vfprintf+0x1e0>
     ef8:	b6 01       	movw	r22, r12
     efa:	80 e2       	ldi	r24, 0x20	; 32
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	33 d1       	rcall	.+614    	; 0x1166 <fputc>
     f00:	2a 94       	dec	r2
     f02:	f5 cf       	rjmp	.-22     	; 0xeee <vfprintf+0x1ae>
     f04:	f5 01       	movw	r30, r10
     f06:	37 fc       	sbrc	r3, 7
     f08:	85 91       	lpm	r24, Z+
     f0a:	37 fe       	sbrs	r3, 7
     f0c:	81 91       	ld	r24, Z+
     f0e:	5f 01       	movw	r10, r30
     f10:	b6 01       	movw	r22, r12
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	28 d1       	rcall	.+592    	; 0x1166 <fputc>
     f16:	21 10       	cpse	r2, r1
     f18:	2a 94       	dec	r2
     f1a:	21 e0       	ldi	r18, 0x01	; 1
     f1c:	82 1a       	sub	r8, r18
     f1e:	91 08       	sbc	r9, r1
     f20:	81 14       	cp	r8, r1
     f22:	91 04       	cpc	r9, r1
     f24:	79 f7       	brne	.-34     	; 0xf04 <vfprintf+0x1c4>
     f26:	e1 c0       	rjmp	.+450    	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
     f28:	84 36       	cpi	r24, 0x64	; 100
     f2a:	11 f0       	breq	.+4      	; 0xf30 <vfprintf+0x1f0>
     f2c:	89 36       	cpi	r24, 0x69	; 105
     f2e:	39 f5       	brne	.+78     	; 0xf7e <vfprintf+0x23e>
     f30:	f8 01       	movw	r30, r16
     f32:	37 fe       	sbrs	r3, 7
     f34:	07 c0       	rjmp	.+14     	; 0xf44 <vfprintf+0x204>
     f36:	60 81       	ld	r22, Z
     f38:	71 81       	ldd	r23, Z+1	; 0x01
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	0c 5f       	subi	r16, 0xFC	; 252
     f40:	1f 4f       	sbci	r17, 0xFF	; 255
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <vfprintf+0x214>
     f44:	60 81       	ld	r22, Z
     f46:	71 81       	ldd	r23, Z+1	; 0x01
     f48:	07 2e       	mov	r0, r23
     f4a:	00 0c       	add	r0, r0
     f4c:	88 0b       	sbc	r24, r24
     f4e:	99 0b       	sbc	r25, r25
     f50:	0e 5f       	subi	r16, 0xFE	; 254
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	f3 2d       	mov	r31, r3
     f56:	ff 76       	andi	r31, 0x6F	; 111
     f58:	3f 2e       	mov	r3, r31
     f5a:	97 ff       	sbrs	r25, 7
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <vfprintf+0x230>
     f5e:	90 95       	com	r25
     f60:	80 95       	com	r24
     f62:	70 95       	com	r23
     f64:	61 95       	neg	r22
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	f0 68       	ori	r31, 0x80	; 128
     f6e:	3f 2e       	mov	r3, r31
     f70:	2a e0       	ldi	r18, 0x0A	; 10
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	a3 01       	movw	r20, r6
     f76:	33 d1       	rcall	.+614    	; 0x11de <__ultoa_invert>
     f78:	88 2e       	mov	r8, r24
     f7a:	86 18       	sub	r8, r6
     f7c:	44 c0       	rjmp	.+136    	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     f7e:	85 37       	cpi	r24, 0x75	; 117
     f80:	31 f4       	brne	.+12     	; 0xf8e <vfprintf+0x24e>
     f82:	23 2d       	mov	r18, r3
     f84:	2f 7e       	andi	r18, 0xEF	; 239
     f86:	b2 2e       	mov	r11, r18
     f88:	2a e0       	ldi	r18, 0x0A	; 10
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	25 c0       	rjmp	.+74     	; 0xfd8 <vfprintf+0x298>
     f8e:	93 2d       	mov	r25, r3
     f90:	99 7f       	andi	r25, 0xF9	; 249
     f92:	b9 2e       	mov	r11, r25
     f94:	8f 36       	cpi	r24, 0x6F	; 111
     f96:	c1 f0       	breq	.+48     	; 0xfc8 <vfprintf+0x288>
     f98:	18 f4       	brcc	.+6      	; 0xfa0 <vfprintf+0x260>
     f9a:	88 35       	cpi	r24, 0x58	; 88
     f9c:	79 f0       	breq	.+30     	; 0xfbc <vfprintf+0x27c>
     f9e:	ae c0       	rjmp	.+348    	; 0x10fc <__DATA_REGION_LENGTH__+0xfc>
     fa0:	80 37       	cpi	r24, 0x70	; 112
     fa2:	19 f0       	breq	.+6      	; 0xfaa <vfprintf+0x26a>
     fa4:	88 37       	cpi	r24, 0x78	; 120
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <vfprintf+0x270>
     fa8:	a9 c0       	rjmp	.+338    	; 0x10fc <__DATA_REGION_LENGTH__+0xfc>
     faa:	e9 2f       	mov	r30, r25
     fac:	e0 61       	ori	r30, 0x10	; 16
     fae:	be 2e       	mov	r11, r30
     fb0:	b4 fe       	sbrs	r11, 4
     fb2:	0d c0       	rjmp	.+26     	; 0xfce <vfprintf+0x28e>
     fb4:	fb 2d       	mov	r31, r11
     fb6:	f4 60       	ori	r31, 0x04	; 4
     fb8:	bf 2e       	mov	r11, r31
     fba:	09 c0       	rjmp	.+18     	; 0xfce <vfprintf+0x28e>
     fbc:	34 fe       	sbrs	r3, 4
     fbe:	0a c0       	rjmp	.+20     	; 0xfd4 <vfprintf+0x294>
     fc0:	29 2f       	mov	r18, r25
     fc2:	26 60       	ori	r18, 0x06	; 6
     fc4:	b2 2e       	mov	r11, r18
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <vfprintf+0x294>
     fc8:	28 e0       	ldi	r18, 0x08	; 8
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <vfprintf+0x298>
     fce:	20 e1       	ldi	r18, 0x10	; 16
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <vfprintf+0x298>
     fd4:	20 e1       	ldi	r18, 0x10	; 16
     fd6:	32 e0       	ldi	r19, 0x02	; 2
     fd8:	f8 01       	movw	r30, r16
     fda:	b7 fe       	sbrs	r11, 7
     fdc:	07 c0       	rjmp	.+14     	; 0xfec <vfprintf+0x2ac>
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	0c 5f       	subi	r16, 0xFC	; 252
     fe8:	1f 4f       	sbci	r17, 0xFF	; 255
     fea:	06 c0       	rjmp	.+12     	; 0xff8 <vfprintf+0x2b8>
     fec:	60 81       	ld	r22, Z
     fee:	71 81       	ldd	r23, Z+1	; 0x01
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 5f       	subi	r16, 0xFE	; 254
     ff6:	1f 4f       	sbci	r17, 0xFF	; 255
     ff8:	a3 01       	movw	r20, r6
     ffa:	f1 d0       	rcall	.+482    	; 0x11de <__ultoa_invert>
     ffc:	88 2e       	mov	r8, r24
     ffe:	86 18       	sub	r8, r6
    1000:	fb 2d       	mov	r31, r11
    1002:	ff 77       	andi	r31, 0x7F	; 127
    1004:	3f 2e       	mov	r3, r31
    1006:	36 fe       	sbrs	r3, 6
    1008:	0d c0       	rjmp	.+26     	; 0x1024 <__DATA_REGION_LENGTH__+0x24>
    100a:	23 2d       	mov	r18, r3
    100c:	2e 7f       	andi	r18, 0xFE	; 254
    100e:	a2 2e       	mov	r10, r18
    1010:	89 14       	cp	r8, r9
    1012:	58 f4       	brcc	.+22     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
    1014:	34 fe       	sbrs	r3, 4
    1016:	0b c0       	rjmp	.+22     	; 0x102e <__DATA_REGION_LENGTH__+0x2e>
    1018:	32 fc       	sbrc	r3, 2
    101a:	09 c0       	rjmp	.+18     	; 0x102e <__DATA_REGION_LENGTH__+0x2e>
    101c:	83 2d       	mov	r24, r3
    101e:	8e 7e       	andi	r24, 0xEE	; 238
    1020:	a8 2e       	mov	r10, r24
    1022:	05 c0       	rjmp	.+10     	; 0x102e <__DATA_REGION_LENGTH__+0x2e>
    1024:	b8 2c       	mov	r11, r8
    1026:	a3 2c       	mov	r10, r3
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    102a:	b8 2c       	mov	r11, r8
    102c:	01 c0       	rjmp	.+2      	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    102e:	b9 2c       	mov	r11, r9
    1030:	a4 fe       	sbrs	r10, 4
    1032:	0f c0       	rjmp	.+30     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    1034:	fe 01       	movw	r30, r28
    1036:	e8 0d       	add	r30, r8
    1038:	f1 1d       	adc	r31, r1
    103a:	80 81       	ld	r24, Z
    103c:	80 33       	cpi	r24, 0x30	; 48
    103e:	21 f4       	brne	.+8      	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
    1040:	9a 2d       	mov	r25, r10
    1042:	99 7e       	andi	r25, 0xE9	; 233
    1044:	a9 2e       	mov	r10, r25
    1046:	09 c0       	rjmp	.+18     	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
    1048:	a2 fe       	sbrs	r10, 2
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <__DATA_REGION_LENGTH__+0x58>
    104c:	b3 94       	inc	r11
    104e:	b3 94       	inc	r11
    1050:	04 c0       	rjmp	.+8      	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
    1052:	8a 2d       	mov	r24, r10
    1054:	86 78       	andi	r24, 0x86	; 134
    1056:	09 f0       	breq	.+2      	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
    1058:	b3 94       	inc	r11
    105a:	a3 fc       	sbrc	r10, 3
    105c:	10 c0       	rjmp	.+32     	; 0x107e <__DATA_REGION_LENGTH__+0x7e>
    105e:	a0 fe       	sbrs	r10, 0
    1060:	06 c0       	rjmp	.+12     	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    1062:	b2 14       	cp	r11, r2
    1064:	80 f4       	brcc	.+32     	; 0x1086 <__DATA_REGION_LENGTH__+0x86>
    1066:	28 0c       	add	r2, r8
    1068:	92 2c       	mov	r9, r2
    106a:	9b 18       	sub	r9, r11
    106c:	0d c0       	rjmp	.+26     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    106e:	b2 14       	cp	r11, r2
    1070:	58 f4       	brcc	.+22     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    1072:	b6 01       	movw	r22, r12
    1074:	80 e2       	ldi	r24, 0x20	; 32
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	76 d0       	rcall	.+236    	; 0x1166 <fputc>
    107a:	b3 94       	inc	r11
    107c:	f8 cf       	rjmp	.-16     	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    107e:	b2 14       	cp	r11, r2
    1080:	18 f4       	brcc	.+6      	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    1082:	2b 18       	sub	r2, r11
    1084:	02 c0       	rjmp	.+4      	; 0x108a <__DATA_REGION_LENGTH__+0x8a>
    1086:	98 2c       	mov	r9, r8
    1088:	21 2c       	mov	r2, r1
    108a:	a4 fe       	sbrs	r10, 4
    108c:	0f c0       	rjmp	.+30     	; 0x10ac <__DATA_REGION_LENGTH__+0xac>
    108e:	b6 01       	movw	r22, r12
    1090:	80 e3       	ldi	r24, 0x30	; 48
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	68 d0       	rcall	.+208    	; 0x1166 <fputc>
    1096:	a2 fe       	sbrs	r10, 2
    1098:	16 c0       	rjmp	.+44     	; 0x10c6 <__DATA_REGION_LENGTH__+0xc6>
    109a:	a1 fc       	sbrc	r10, 1
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
    109e:	88 e7       	ldi	r24, 0x78	; 120
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <__DATA_REGION_LENGTH__+0xa8>
    10a4:	88 e5       	ldi	r24, 0x58	; 88
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	b6 01       	movw	r22, r12
    10aa:	0c c0       	rjmp	.+24     	; 0x10c4 <__DATA_REGION_LENGTH__+0xc4>
    10ac:	8a 2d       	mov	r24, r10
    10ae:	86 78       	andi	r24, 0x86	; 134
    10b0:	51 f0       	breq	.+20     	; 0x10c6 <__DATA_REGION_LENGTH__+0xc6>
    10b2:	a1 fe       	sbrs	r10, 1
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <__DATA_REGION_LENGTH__+0xba>
    10b6:	8b e2       	ldi	r24, 0x2B	; 43
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <__DATA_REGION_LENGTH__+0xbc>
    10ba:	80 e2       	ldi	r24, 0x20	; 32
    10bc:	a7 fc       	sbrc	r10, 7
    10be:	8d e2       	ldi	r24, 0x2D	; 45
    10c0:	b6 01       	movw	r22, r12
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	50 d0       	rcall	.+160    	; 0x1166 <fputc>
    10c6:	89 14       	cp	r8, r9
    10c8:	30 f4       	brcc	.+12     	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
    10ca:	b6 01       	movw	r22, r12
    10cc:	80 e3       	ldi	r24, 0x30	; 48
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	4a d0       	rcall	.+148    	; 0x1166 <fputc>
    10d2:	9a 94       	dec	r9
    10d4:	f8 cf       	rjmp	.-16     	; 0x10c6 <__DATA_REGION_LENGTH__+0xc6>
    10d6:	8a 94       	dec	r8
    10d8:	f3 01       	movw	r30, r6
    10da:	e8 0d       	add	r30, r8
    10dc:	f1 1d       	adc	r31, r1
    10de:	80 81       	ld	r24, Z
    10e0:	b6 01       	movw	r22, r12
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	40 d0       	rcall	.+128    	; 0x1166 <fputc>
    10e6:	81 10       	cpse	r8, r1
    10e8:	f6 cf       	rjmp	.-20     	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
    10ea:	22 20       	and	r2, r2
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <__DATA_REGION_LENGTH__+0xf0>
    10ee:	4e ce       	rjmp	.-868    	; 0xd8c <vfprintf+0x4c>
    10f0:	b6 01       	movw	r22, r12
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	37 d0       	rcall	.+110    	; 0x1166 <fputc>
    10f8:	2a 94       	dec	r2
    10fa:	f7 cf       	rjmp	.-18     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10fc:	f6 01       	movw	r30, r12
    10fe:	86 81       	ldd	r24, Z+6	; 0x06
    1100:	97 81       	ldd	r25, Z+7	; 0x07
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <__stack+0x9>
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	9f ef       	ldi	r25, 0xFF	; 255
    1108:	2b 96       	adiw	r28, 0x0b	; 11
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	9f 90       	pop	r9
    112a:	8f 90       	pop	r8
    112c:	7f 90       	pop	r7
    112e:	6f 90       	pop	r6
    1130:	5f 90       	pop	r5
    1132:	4f 90       	pop	r4
    1134:	3f 90       	pop	r3
    1136:	2f 90       	pop	r2
    1138:	08 95       	ret

0000113a <strnlen_P>:
    113a:	fc 01       	movw	r30, r24
    113c:	05 90       	lpm	r0, Z+
    113e:	61 50       	subi	r22, 0x01	; 1
    1140:	70 40       	sbci	r23, 0x00	; 0
    1142:	01 10       	cpse	r0, r1
    1144:	d8 f7       	brcc	.-10     	; 0x113c <strnlen_P+0x2>
    1146:	80 95       	com	r24
    1148:	90 95       	com	r25
    114a:	8e 0f       	add	r24, r30
    114c:	9f 1f       	adc	r25, r31
    114e:	08 95       	ret

00001150 <strnlen>:
    1150:	fc 01       	movw	r30, r24
    1152:	61 50       	subi	r22, 0x01	; 1
    1154:	70 40       	sbci	r23, 0x00	; 0
    1156:	01 90       	ld	r0, Z+
    1158:	01 10       	cpse	r0, r1
    115a:	d8 f7       	brcc	.-10     	; 0x1152 <strnlen+0x2>
    115c:	80 95       	com	r24
    115e:	90 95       	com	r25
    1160:	8e 0f       	add	r24, r30
    1162:	9f 1f       	adc	r25, r31
    1164:	08 95       	ret

00001166 <fputc>:
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	fb 01       	movw	r30, r22
    1170:	23 81       	ldd	r18, Z+3	; 0x03
    1172:	21 fd       	sbrc	r18, 1
    1174:	03 c0       	rjmp	.+6      	; 0x117c <fputc+0x16>
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	9f ef       	ldi	r25, 0xFF	; 255
    117a:	2c c0       	rjmp	.+88     	; 0x11d4 <fputc+0x6e>
    117c:	22 ff       	sbrs	r18, 2
    117e:	16 c0       	rjmp	.+44     	; 0x11ac <fputc+0x46>
    1180:	46 81       	ldd	r20, Z+6	; 0x06
    1182:	57 81       	ldd	r21, Z+7	; 0x07
    1184:	24 81       	ldd	r18, Z+4	; 0x04
    1186:	35 81       	ldd	r19, Z+5	; 0x05
    1188:	42 17       	cp	r20, r18
    118a:	53 07       	cpc	r21, r19
    118c:	44 f4       	brge	.+16     	; 0x119e <fputc+0x38>
    118e:	a0 81       	ld	r26, Z
    1190:	b1 81       	ldd	r27, Z+1	; 0x01
    1192:	9d 01       	movw	r18, r26
    1194:	2f 5f       	subi	r18, 0xFF	; 255
    1196:	3f 4f       	sbci	r19, 0xFF	; 255
    1198:	31 83       	std	Z+1, r19	; 0x01
    119a:	20 83       	st	Z, r18
    119c:	8c 93       	st	X, r24
    119e:	26 81       	ldd	r18, Z+6	; 0x06
    11a0:	37 81       	ldd	r19, Z+7	; 0x07
    11a2:	2f 5f       	subi	r18, 0xFF	; 255
    11a4:	3f 4f       	sbci	r19, 0xFF	; 255
    11a6:	37 83       	std	Z+7, r19	; 0x07
    11a8:	26 83       	std	Z+6, r18	; 0x06
    11aa:	14 c0       	rjmp	.+40     	; 0x11d4 <fputc+0x6e>
    11ac:	8b 01       	movw	r16, r22
    11ae:	ec 01       	movw	r28, r24
    11b0:	fb 01       	movw	r30, r22
    11b2:	00 84       	ldd	r0, Z+8	; 0x08
    11b4:	f1 85       	ldd	r31, Z+9	; 0x09
    11b6:	e0 2d       	mov	r30, r0
    11b8:	09 95       	icall
    11ba:	89 2b       	or	r24, r25
    11bc:	e1 f6       	brne	.-72     	; 0x1176 <fputc+0x10>
    11be:	d8 01       	movw	r26, r16
    11c0:	16 96       	adiw	r26, 0x06	; 6
    11c2:	8d 91       	ld	r24, X+
    11c4:	9c 91       	ld	r25, X
    11c6:	17 97       	sbiw	r26, 0x07	; 7
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	17 96       	adiw	r26, 0x07	; 7
    11cc:	9c 93       	st	X, r25
    11ce:	8e 93       	st	-X, r24
    11d0:	16 97       	sbiw	r26, 0x06	; 6
    11d2:	ce 01       	movw	r24, r28
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	08 95       	ret

000011de <__ultoa_invert>:
    11de:	fa 01       	movw	r30, r20
    11e0:	aa 27       	eor	r26, r26
    11e2:	28 30       	cpi	r18, 0x08	; 8
    11e4:	51 f1       	breq	.+84     	; 0x123a <__ultoa_invert+0x5c>
    11e6:	20 31       	cpi	r18, 0x10	; 16
    11e8:	81 f1       	breq	.+96     	; 0x124a <__ultoa_invert+0x6c>
    11ea:	e8 94       	clt
    11ec:	6f 93       	push	r22
    11ee:	6e 7f       	andi	r22, 0xFE	; 254
    11f0:	6e 5f       	subi	r22, 0xFE	; 254
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	8f 4f       	sbci	r24, 0xFF	; 255
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	af 4f       	sbci	r26, 0xFF	; 255
    11fa:	b1 e0       	ldi	r27, 0x01	; 1
    11fc:	3e d0       	rcall	.+124    	; 0x127a <__ultoa_invert+0x9c>
    11fe:	b4 e0       	ldi	r27, 0x04	; 4
    1200:	3c d0       	rcall	.+120    	; 0x127a <__ultoa_invert+0x9c>
    1202:	67 0f       	add	r22, r23
    1204:	78 1f       	adc	r23, r24
    1206:	89 1f       	adc	r24, r25
    1208:	9a 1f       	adc	r25, r26
    120a:	a1 1d       	adc	r26, r1
    120c:	68 0f       	add	r22, r24
    120e:	79 1f       	adc	r23, r25
    1210:	8a 1f       	adc	r24, r26
    1212:	91 1d       	adc	r25, r1
    1214:	a1 1d       	adc	r26, r1
    1216:	6a 0f       	add	r22, r26
    1218:	71 1d       	adc	r23, r1
    121a:	81 1d       	adc	r24, r1
    121c:	91 1d       	adc	r25, r1
    121e:	a1 1d       	adc	r26, r1
    1220:	20 d0       	rcall	.+64     	; 0x1262 <__ultoa_invert+0x84>
    1222:	09 f4       	brne	.+2      	; 0x1226 <__ultoa_invert+0x48>
    1224:	68 94       	set
    1226:	3f 91       	pop	r19
    1228:	2a e0       	ldi	r18, 0x0A	; 10
    122a:	26 9f       	mul	r18, r22
    122c:	11 24       	eor	r1, r1
    122e:	30 19       	sub	r19, r0
    1230:	30 5d       	subi	r19, 0xD0	; 208
    1232:	31 93       	st	Z+, r19
    1234:	de f6       	brtc	.-74     	; 0x11ec <__ultoa_invert+0xe>
    1236:	cf 01       	movw	r24, r30
    1238:	08 95       	ret
    123a:	46 2f       	mov	r20, r22
    123c:	47 70       	andi	r20, 0x07	; 7
    123e:	40 5d       	subi	r20, 0xD0	; 208
    1240:	41 93       	st	Z+, r20
    1242:	b3 e0       	ldi	r27, 0x03	; 3
    1244:	0f d0       	rcall	.+30     	; 0x1264 <__ultoa_invert+0x86>
    1246:	c9 f7       	brne	.-14     	; 0x123a <__ultoa_invert+0x5c>
    1248:	f6 cf       	rjmp	.-20     	; 0x1236 <__ultoa_invert+0x58>
    124a:	46 2f       	mov	r20, r22
    124c:	4f 70       	andi	r20, 0x0F	; 15
    124e:	40 5d       	subi	r20, 0xD0	; 208
    1250:	4a 33       	cpi	r20, 0x3A	; 58
    1252:	18 f0       	brcs	.+6      	; 0x125a <__ultoa_invert+0x7c>
    1254:	49 5d       	subi	r20, 0xD9	; 217
    1256:	31 fd       	sbrc	r19, 1
    1258:	40 52       	subi	r20, 0x20	; 32
    125a:	41 93       	st	Z+, r20
    125c:	02 d0       	rcall	.+4      	; 0x1262 <__ultoa_invert+0x84>
    125e:	a9 f7       	brne	.-22     	; 0x124a <__ultoa_invert+0x6c>
    1260:	ea cf       	rjmp	.-44     	; 0x1236 <__ultoa_invert+0x58>
    1262:	b4 e0       	ldi	r27, 0x04	; 4
    1264:	a6 95       	lsr	r26
    1266:	97 95       	ror	r25
    1268:	87 95       	ror	r24
    126a:	77 95       	ror	r23
    126c:	67 95       	ror	r22
    126e:	ba 95       	dec	r27
    1270:	c9 f7       	brne	.-14     	; 0x1264 <__ultoa_invert+0x86>
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	61 05       	cpc	r22, r1
    1276:	71 05       	cpc	r23, r1
    1278:	08 95       	ret
    127a:	9b 01       	movw	r18, r22
    127c:	ac 01       	movw	r20, r24
    127e:	0a 2e       	mov	r0, r26
    1280:	06 94       	lsr	r0
    1282:	57 95       	ror	r21
    1284:	47 95       	ror	r20
    1286:	37 95       	ror	r19
    1288:	27 95       	ror	r18
    128a:	ba 95       	dec	r27
    128c:	c9 f7       	brne	.-14     	; 0x1280 <__ultoa_invert+0xa2>
    128e:	62 0f       	add	r22, r18
    1290:	73 1f       	adc	r23, r19
    1292:	84 1f       	adc	r24, r20
    1294:	95 1f       	adc	r25, r21
    1296:	a0 1d       	adc	r26, r0
    1298:	08 95       	ret

0000129a <__divmodsi4>:
    129a:	05 2e       	mov	r0, r21
    129c:	97 fb       	bst	r25, 7
    129e:	16 f4       	brtc	.+4      	; 0x12a4 <__divmodsi4+0xa>
    12a0:	00 94       	com	r0
    12a2:	0f d0       	rcall	.+30     	; 0x12c2 <__negsi2>
    12a4:	57 fd       	sbrc	r21, 7
    12a6:	05 d0       	rcall	.+10     	; 0x12b2 <__divmodsi4_neg2>
    12a8:	24 d0       	rcall	.+72     	; 0x12f2 <__udivmodsi4>
    12aa:	07 fc       	sbrc	r0, 7
    12ac:	02 d0       	rcall	.+4      	; 0x12b2 <__divmodsi4_neg2>
    12ae:	46 f4       	brtc	.+16     	; 0x12c0 <__divmodsi4_exit>
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <__negsi2>

000012b2 <__divmodsi4_neg2>:
    12b2:	50 95       	com	r21
    12b4:	40 95       	com	r20
    12b6:	30 95       	com	r19
    12b8:	21 95       	neg	r18
    12ba:	3f 4f       	sbci	r19, 0xFF	; 255
    12bc:	4f 4f       	sbci	r20, 0xFF	; 255
    12be:	5f 4f       	sbci	r21, 0xFF	; 255

000012c0 <__divmodsi4_exit>:
    12c0:	08 95       	ret

000012c2 <__negsi2>:
    12c2:	90 95       	com	r25
    12c4:	80 95       	com	r24
    12c6:	70 95       	com	r23
    12c8:	61 95       	neg	r22
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	8f 4f       	sbci	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	08 95       	ret

000012d2 <__muluhisi3>:
    12d2:	31 d0       	rcall	.+98     	; 0x1336 <__umulhisi3>
    12d4:	a5 9f       	mul	r26, r21
    12d6:	90 0d       	add	r25, r0
    12d8:	b4 9f       	mul	r27, r20
    12da:	90 0d       	add	r25, r0
    12dc:	a4 9f       	mul	r26, r20
    12de:	80 0d       	add	r24, r0
    12e0:	91 1d       	adc	r25, r1
    12e2:	11 24       	eor	r1, r1
    12e4:	08 95       	ret

000012e6 <__mulshisi3>:
    12e6:	b7 ff       	sbrs	r27, 7
    12e8:	f4 cf       	rjmp	.-24     	; 0x12d2 <__muluhisi3>

000012ea <__mulohisi3>:
    12ea:	f3 df       	rcall	.-26     	; 0x12d2 <__muluhisi3>
    12ec:	82 1b       	sub	r24, r18
    12ee:	93 0b       	sbc	r25, r19
    12f0:	08 95       	ret

000012f2 <__udivmodsi4>:
    12f2:	a1 e2       	ldi	r26, 0x21	; 33
    12f4:	1a 2e       	mov	r1, r26
    12f6:	aa 1b       	sub	r26, r26
    12f8:	bb 1b       	sub	r27, r27
    12fa:	fd 01       	movw	r30, r26
    12fc:	0d c0       	rjmp	.+26     	; 0x1318 <__udivmodsi4_ep>

000012fe <__udivmodsi4_loop>:
    12fe:	aa 1f       	adc	r26, r26
    1300:	bb 1f       	adc	r27, r27
    1302:	ee 1f       	adc	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	a2 17       	cp	r26, r18
    1308:	b3 07       	cpc	r27, r19
    130a:	e4 07       	cpc	r30, r20
    130c:	f5 07       	cpc	r31, r21
    130e:	20 f0       	brcs	.+8      	; 0x1318 <__udivmodsi4_ep>
    1310:	a2 1b       	sub	r26, r18
    1312:	b3 0b       	sbc	r27, r19
    1314:	e4 0b       	sbc	r30, r20
    1316:	f5 0b       	sbc	r31, r21

00001318 <__udivmodsi4_ep>:
    1318:	66 1f       	adc	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	1a 94       	dec	r1
    1322:	69 f7       	brne	.-38     	; 0x12fe <__udivmodsi4_loop>
    1324:	60 95       	com	r22
    1326:	70 95       	com	r23
    1328:	80 95       	com	r24
    132a:	90 95       	com	r25
    132c:	9b 01       	movw	r18, r22
    132e:	ac 01       	movw	r20, r24
    1330:	bd 01       	movw	r22, r26
    1332:	cf 01       	movw	r24, r30
    1334:	08 95       	ret

00001336 <__umulhisi3>:
    1336:	a2 9f       	mul	r26, r18
    1338:	b0 01       	movw	r22, r0
    133a:	b3 9f       	mul	r27, r19
    133c:	c0 01       	movw	r24, r0
    133e:	a3 9f       	mul	r26, r19
    1340:	70 0d       	add	r23, r0
    1342:	81 1d       	adc	r24, r1
    1344:	11 24       	eor	r1, r1
    1346:	91 1d       	adc	r25, r1
    1348:	b2 9f       	mul	r27, r18
    134a:	70 0d       	add	r23, r0
    134c:	81 1d       	adc	r24, r1
    134e:	11 24       	eor	r1, r1
    1350:	91 1d       	adc	r25, r1
    1352:	08 95       	ret

00001354 <_exit>:
    1354:	f8 94       	cli

00001356 <__stop_program>:
    1356:	ff cf       	rjmp	.-2      	; 0x1356 <__stop_program>
