
EindOpdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  000012f0  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  008001b8  008001b8  0000143c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c8  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e08  00000000  00000000  00002de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd1  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  000047c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000833  00000000  00000000  00004b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ab  00000000  00000000  0000535b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005d06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	97 c3       	rjmp	.+1838   	; 0x760 <__vector_12>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ef       	ldi	r30, 0xF0	; 240
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 3b       	cpi	r26, 0xB8	; 184
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a8 eb       	ldi	r26, 0xB8	; 184
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 3c       	cpi	r26, 0xC5	; 197
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	d3 d3       	rcall	.+1958   	; 0x86a <main>
      c4:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <switch_channel>:
      ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channel.1627>
      ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channel.1627+0x1>
      d2:	8f 3f       	cpi	r24, 0xFF	; 255
      d4:	2f ef       	ldi	r18, 0xFF	; 255
      d6:	92 07       	cpc	r25, r18
      d8:	39 f4       	brne	.+14     	; 0xe8 <switch_channel+0x1e>
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
      e6:	0d c0       	rjmp	.+26     	; 0x102 <switch_channel+0x38>
      e8:	01 96       	adiw	r24, 0x01	; 1
      ea:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
      f2:	06 97       	sbiw	r24, 0x06	; 6
      f4:	34 f0       	brlt	.+12     	; 0x102 <switch_channel+0x38>
      f6:	83 e0       	ldi	r24, 0x03	; 3
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
     102:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channel.1627>
     106:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channel.1627+0x1>
     10a:	80 6c       	ori	r24, 0xC0	; 192
     10c:	87 b9       	out	0x07, r24	; 7
     10e:	08 95       	ret

00000110 <translate_to_geforce>:
     110:	08 95       	ret

00000112 <read_acc_direction>:
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	ec 01       	movw	r28, r24
     118:	d8 df       	rcall	.-80     	; 0xca <switch_channel>
     11a:	86 b1       	in	r24, 0x06	; 6
     11c:	80 64       	ori	r24, 0x40	; 64
     11e:	86 b9       	out	0x06, r24	; 6
     120:	36 99       	sbic	0x06, 6	; 6
     122:	fe cf       	rjmp	.-4      	; 0x120 <read_acc_direction+0xe>
     124:	24 b1       	in	r18, 0x04	; 4
     126:	85 b1       	in	r24, 0x05	; 5
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	98 2f       	mov	r25, r24
     12c:	88 27       	eor	r24, r24
     12e:	82 0f       	add	r24, r18
     130:	91 1d       	adc	r25, r1
     132:	ee df       	rcall	.-36     	; 0x110 <translate_to_geforce>
     134:	99 83       	std	Y+1, r25	; 0x01
     136:	88 83       	st	Y, r24
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <accelerometer_init>:
     13e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     142:	80 ec       	ldi	r24, 0xC0	; 192
     144:	87 b9       	out	0x07, r24	; 7
     146:	86 e8       	ldi	r24, 0x86	; 134
     148:	86 b9       	out	0x06, r24	; 6
     14a:	08 95       	ret

0000014c <accelerometer_read>:
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	2c 97       	sbiw	r28, 0x0c	; 12
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	ce 01       	movw	r24, r28
     162:	07 96       	adiw	r24, 0x07	; 7
     164:	d6 df       	rcall	.-84     	; 0x112 <read_acc_direction>
     166:	ce 01       	movw	r24, r28
     168:	09 96       	adiw	r24, 0x09	; 9
     16a:	d3 df       	rcall	.-90     	; 0x112 <read_acc_direction>
     16c:	ce 01       	movw	r24, r28
     16e:	0b 96       	adiw	r24, 0x0b	; 11
     170:	d0 df       	rcall	.-96     	; 0x112 <read_acc_direction>
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	fe 01       	movw	r30, r28
     176:	37 96       	adiw	r30, 0x07	; 7
     178:	de 01       	movw	r26, r28
     17a:	11 96       	adiw	r26, 0x01	; 1
     17c:	01 90       	ld	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	8a 95       	dec	r24
     182:	e1 f7       	brne	.-8      	; 0x17c <accelerometer_read+0x30>
     184:	29 81       	ldd	r18, Y+1	; 0x01
     186:	3a 81       	ldd	r19, Y+2	; 0x02
     188:	4b 81       	ldd	r20, Y+3	; 0x03
     18a:	5c 81       	ldd	r21, Y+4	; 0x04
     18c:	6d 81       	ldd	r22, Y+5	; 0x05
     18e:	7e 81       	ldd	r23, Y+6	; 0x06
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	2c 96       	adiw	r28, 0x0c	; 12
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	cd bf       	out	0x3d, r28	; 61
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <time_passed>:
{
    return directions[randomNumber()];
}

void time_passed(){
	isroundstarted = false;
     1a6:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <__data_end>
     1aa:	08 95       	ret

000001ac <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b2:	ef ec       	ldi	r30, 0xCF	; 207
     1b4:	f7 e0       	ldi	r31, 0x07	; 7
     1b6:	31 97       	sbiw	r30, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <wait+0xa>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <wait+0x10>
     1bc:	00 00       	nop
     1be:	2f 5f       	subi	r18, 0xFF	; 255
     1c0:	3f 4f       	sbci	r19, 0xFF	; 255
     1c2:	28 17       	cp	r18, r24
     1c4:	39 07       	cpc	r19, r25
     1c6:	ac f3       	brlt	.-22     	; 0x1b2 <wait+0x6>
	{
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
     1c8:	08 95       	ret

000001ca <GameLogic_Init>:

GAMELOGIC_ERROR GameLogic_Init()
{
	display_init();
     1ca:	a8 d2       	rcall	.+1360   	; 0x71c <display_init>
	accelerometer_init();
     1cc:	b8 df       	rcall	.-144    	; 0x13e <accelerometer_init>

	TRESHOLD_MEASURMENT = accelerometer_read();
     1ce:	be df       	rcall	.-132    	; 0x14c <accelerometer_read>
     1d0:	20 93 b9 01 	sts	0x01B9, r18	; 0x8001b9 <TRESHOLD_MEASURMENT>
     1d4:	30 93 ba 01 	sts	0x01BA, r19	; 0x8001ba <TRESHOLD_MEASURMENT+0x1>
     1d8:	40 93 bb 01 	sts	0x01BB, r20	; 0x8001bb <TRESHOLD_MEASURMENT+0x2>
     1dc:	50 93 bc 01 	sts	0x01BC, r21	; 0x8001bc <TRESHOLD_MEASURMENT+0x3>
     1e0:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <TRESHOLD_MEASURMENT+0x4>
     1e4:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <TRESHOLD_MEASURMENT+0x5>
	display_text("Starting up game");
     1e8:	8e e1       	ldi	r24, 0x1E	; 30
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	41 d2       	rcall	.+1154   	; 0x670 <display_text>
	wait(500);
     1ee:	84 ef       	ldi	r24, 0xF4	; 244
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	dc df       	rcall	.-72     	; 0x1ac <wait>
     1f4:	83 e0       	ldi	r24, 0x03	; 3
	
	return UNKNOWN;
}
     1f6:	08 95       	ret

000001f8 <randomNumber>:
     1f8:	ef 92       	push	r14

int randomNumber()
{
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	62 97       	sbiw	r28, 0x12	; 18
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
    int rand_num;
    srand(accelerometer_read().x_geforce * accelerometer_read().y_geforce * accelerometer_read().z_geforce);
     214:	9b df       	rcall	.-202    	; 0x14c <accelerometer_read>
     216:	2d 87       	std	Y+13, r18	; 0x0d
     218:	3e 87       	std	Y+14, r19	; 0x0e
     21a:	ed 84       	ldd	r14, Y+13	; 0x0d
     21c:	fe 84       	ldd	r15, Y+14	; 0x0e
     21e:	96 df       	rcall	.-212    	; 0x14c <accelerometer_read>
     220:	49 87       	std	Y+9, r20	; 0x09
     222:	5a 87       	std	Y+10, r21	; 0x0a
     224:	89 85       	ldd	r24, Y+9	; 0x09
     226:	9a 85       	ldd	r25, Y+10	; 0x0a
     228:	e8 9e       	mul	r14, r24
     22a:	80 01       	movw	r16, r0
     22c:	e9 9e       	mul	r14, r25
     22e:	10 0d       	add	r17, r0
     230:	f8 9e       	mul	r15, r24
     232:	10 0d       	add	r17, r0
     234:	11 24       	eor	r1, r1
     236:	8a df       	rcall	.-236    	; 0x14c <accelerometer_read>
     238:	6d 83       	std	Y+5, r22	; 0x05
     23a:	7e 83       	std	Y+6, r23	; 0x06
     23c:	8d 81       	ldd	r24, Y+5	; 0x05
     23e:	9e 81       	ldd	r25, Y+6	; 0x06
     240:	9c 01       	movw	r18, r24
     242:	02 9f       	mul	r16, r18
     244:	c0 01       	movw	r24, r0
     246:	03 9f       	mul	r16, r19
     248:	90 0d       	add	r25, r0
     24a:	12 9f       	mul	r17, r18
     24c:	90 0d       	add	r25, r0
     24e:	11 24       	eor	r1, r1
     250:	0a d5       	rcall	.+2580   	; 0xc66 <srand>
    // Will generate a random number between 0-5
    rand_num = rand() % 6;
     252:	06 d5       	rcall	.+2572   	; 0xc60 <rand>
     254:	66 e0       	ldi	r22, 0x06	; 6
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	95 d4       	rcall	.+2346   	; 0xb84 <__divmodhi4>
     25a:	62 96       	adiw	r28, 0x12	; 18
     25c:	0f b6       	in	r0, 0x3f	; 63

    return rand_num;
}
     25e:	f8 94       	cli
     260:	de bf       	out	0x3e, r29	; 62
     262:	0f be       	out	0x3f, r0	; 63
     264:	cd bf       	out	0x3d, r28	; 61
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	08 95       	ret

00000274 <randomDirection>:
     274:	c1 df       	rcall	.-126    	; 0x1f8 <randomNumber>
     276:	88 5f       	subi	r24, 0xF8	; 248

DIRECTION randomDirection()
{
    return directions[randomNumber()];
     278:	9e 4f       	sbci	r25, 0xFE	; 254
}
     27a:	fc 01       	movw	r30, r24
     27c:	80 81       	ld	r24, Z
     27e:	08 95       	ret

00000280 <GameLogic_draw_hearts>:

void time_passed(){
	isroundstarted = false;
}

void GameLogic_draw_hearts(){
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	00 d0       	rcall	.+0      	; 0x28e <GameLogic_draw_hearts+0xe>
     28e:	1f 92       	push	r1
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
	// Setting logic for numbers
	char lives[3];
	int cursor_pos = 15;

	for (int i = 3; i> 0; i-- )
     294:	03 e0       	ldi	r16, 0x03	; 3
     296:	10 e0       	ldi	r17, 0x00	; 0
}

void GameLogic_draw_hearts(){
	// Setting logic for numbers
	char lives[3];
	int cursor_pos = 15;
     298:	0f 2e       	mov	r0, r31
     29a:	ff e0       	ldi	r31, 0x0F	; 15
     29c:	ef 2e       	mov	r14, r31
     29e:	f1 2c       	mov	r15, r1
     2a0:	f0 2d       	mov	r31, r0

	for (int i = 3; i> 0; i-- )
     2a2:	25 c0       	rjmp	.+74     	; 0x2ee <GameLogic_draw_hearts+0x6e>
	{
		// Setting correct cursor pos
		display_set_cursor(cursor_pos, 0);
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	c7 01       	movw	r24, r14
     2aa:	fe d1       	rcall	.+1020   	; 0x6a8 <display_set_cursor>
		cursor_pos--;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	e8 1a       	sub	r14, r24
     2b0:	f1 08       	sbc	r15, r1
		
		// Setting hearts
		if (i <= lives_left){
     2b2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lives_left>
     2b6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lives_left+0x1>
     2ba:	80 17       	cp	r24, r16
     2bc:	91 07       	cpc	r25, r17
     2be:	5c f0       	brlt	.+22     	; 0x2d6 <GameLogic_draw_hearts+0x56>
			lives[i-1] = 1;
     2c0:	f8 01       	movw	r30, r16
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	8c 0f       	add	r24, r28
     2ca:	9d 1f       	adc	r25, r29
     2cc:	e8 0f       	add	r30, r24
     2ce:	f9 1f       	adc	r31, r25
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	80 83       	st	Z, r24
     2d4:	0a c0       	rjmp	.+20     	; 0x2ea <GameLogic_draw_hearts+0x6a>
		} else {
			lives[i-1] = 2;
     2d6:	f8 01       	movw	r30, r16
     2d8:	31 97       	sbiw	r30, 0x01	; 1
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 0f       	add	r24, r28
     2e0:	9d 1f       	adc	r25, r29
     2e2:	e8 0f       	add	r30, r24
     2e4:	f9 1f       	adc	r31, r25
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	80 83       	st	Z, r24
void GameLogic_draw_hearts(){
	// Setting logic for numbers
	char lives[3];
	int cursor_pos = 15;

	for (int i = 3; i> 0; i-- )
     2ea:	01 50       	subi	r16, 0x01	; 1
     2ec:	11 09       	sbc	r17, r1
     2ee:	10 16       	cp	r1, r16
     2f0:	11 06       	cpc	r1, r17
     2f2:	c4 f2       	brlt	.-80     	; 0x2a4 <GameLogic_draw_hearts+0x24>
			lives[i-1] = 2;
		}
	}
	
	// Displaying hearts
	display_text(lives);
     2f4:	ce 01       	movw	r24, r28
     2f6:	01 96       	adiw	r24, 0x01	; 1
     2f8:	bb d1       	rcall	.+886    	; 0x670 <display_text>
}
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	08 95       	ret

0000030e <GameLogic_Draw_Dir>:

void GameLogic_Draw_Dir(DIRECTION dir){
     30e:	cf 93       	push	r28
     310:	c8 2f       	mov	r28, r24
	display_clear();
     312:	de d1       	rcall	.+956    	; 0x6d0 <display_clear>
	switch (dir)
     314:	c2 30       	cpi	r28, 0x02	; 2
     316:	a1 f0       	breq	.+40     	; 0x340 <GameLogic_Draw_Dir+0x32>
     318:	28 f4       	brcc	.+10     	; 0x324 <GameLogic_Draw_Dir+0x16>
     31a:	cc 23       	and	r28, r28
     31c:	49 f0       	breq	.+18     	; 0x330 <GameLogic_Draw_Dir+0x22>
     31e:	c1 30       	cpi	r28, 0x01	; 1
     320:	59 f0       	breq	.+22     	; 0x338 <GameLogic_Draw_Dir+0x2a>
     322:	1d c0       	rjmp	.+58     	; 0x35e <GameLogic_Draw_Dir+0x50>
     324:	c4 30       	cpi	r28, 0x04	; 4
     326:	a1 f0       	breq	.+40     	; 0x350 <GameLogic_Draw_Dir+0x42>
     328:	78 f0       	brcs	.+30     	; 0x348 <GameLogic_Draw_Dir+0x3a>
     32a:	c5 30       	cpi	r28, 0x05	; 5
     32c:	a9 f0       	breq	.+42     	; 0x358 <GameLogic_Draw_Dir+0x4a>
     32e:	17 c0       	rjmp	.+46     	; 0x35e <GameLogic_Draw_Dir+0x50>
	{
		case UP:
			display_text("Go upwards");
     330:	8f e2       	ldi	r24, 0x2F	; 47
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	9d d1       	rcall	.+826    	; 0x670 <display_text>
			break;
     336:	13 c0       	rjmp	.+38     	; 0x35e <GameLogic_Draw_Dir+0x50>
		case DOWN:
			display_text("Go downwards");
     338:	8a e3       	ldi	r24, 0x3A	; 58
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	99 d1       	rcall	.+818    	; 0x670 <display_text>
			break;
		case LEFT:
			display_text("Go left");
     33e:	0f c0       	rjmp	.+30     	; 0x35e <GameLogic_Draw_Dir+0x50>
     340:	87 e4       	ldi	r24, 0x47	; 71
     342:	91 e0       	ldi	r25, 0x01	; 1
			break;
     344:	95 d1       	rcall	.+810    	; 0x670 <display_text>
		case RIGHT:
			display_text("Go right");
     346:	0b c0       	rjmp	.+22     	; 0x35e <GameLogic_Draw_Dir+0x50>
     348:	8f e4       	ldi	r24, 0x4F	; 79
     34a:	91 e0       	ldi	r25, 0x01	; 1
			break;
     34c:	91 d1       	rcall	.+802    	; 0x670 <display_text>
		case FORWARD:
			display_text("Go forward");
     34e:	07 c0       	rjmp	.+14     	; 0x35e <GameLogic_Draw_Dir+0x50>
     350:	88 e5       	ldi	r24, 0x58	; 88
     352:	91 e0       	ldi	r25, 0x01	; 1
			break;
     354:	8d d1       	rcall	.+794    	; 0x670 <display_text>
		case BACKWARD:
			display_text("Go backward");
     356:	03 c0       	rjmp	.+6      	; 0x35e <GameLogic_Draw_Dir+0x50>
     358:	83 e6       	ldi	r24, 0x63	; 99
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	89 d1       	rcall	.+786    	; 0x670 <display_text>
			break;
	}
}
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <GameLogic_Round>:

void GameLogic_Round()
{
     362:	8f 92       	push	r8
     364:	9f 92       	push	r9
     366:	af 92       	push	r10
     368:	bf 92       	push	r11
     36a:	cf 92       	push	r12
     36c:	df 92       	push	r13
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	ca 56       	subi	r28, 0x6A	; 106
     37e:	d1 09       	sbc	r29, r1
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
	// Setup of handling
    DIRECTION dir = randomDirection();
     38a:	74 df       	rcall	.-280    	; 0x274 <randomDirection>
     38c:	18 2f       	mov	r17, r24
	set_timer(2000, time_passed);
     38e:	63 ed       	ldi	r22, 0xD3	; 211
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	80 ed       	ldi	r24, 0xD0	; 208
     394:	97 e0       	ldi	r25, 0x07	; 7
     396:	1c d2       	rcall	.+1080   	; 0x7d0 <set_timer>
	isroundstarted = true;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <__data_end>
	display_clear();
	GameLogic_Draw_Dir(dir);
     39e:	98 d1       	rcall	.+816    	; 0x6d0 <display_clear>
     3a0:	81 2f       	mov	r24, r17
	GameLogic_draw_hearts();
     3a2:	b5 df       	rcall	.-150    	; 0x30e <GameLogic_Draw_Dir>
     3a4:	6d df       	rcall	.-294    	; 0x280 <GameLogic_draw_hearts>

	// Starting handling
	while(isroundstarted) {
     3a6:	d1 c0       	rjmp	.+418    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
		accelerometer_measurment_t measurement = accelerometer_read();
     3a8:	d1 de       	rcall	.-606    	; 0x14c <accelerometer_read>
     3aa:	a6 96       	adiw	r28, 0x26	; 38
     3ac:	2f af       	std	Y+63, r18	; 0x3f
     3ae:	a6 97       	sbiw	r28, 0x26	; 38
     3b0:	a7 96       	adiw	r28, 0x27	; 39
     3b2:	3f af       	std	Y+63, r19	; 0x3f
     3b4:	a7 97       	sbiw	r28, 0x27	; 39
     3b6:	a8 96       	adiw	r28, 0x28	; 40
     3b8:	4f af       	std	Y+63, r20	; 0x3f
     3ba:	a8 97       	sbiw	r28, 0x28	; 40
     3bc:	a9 96       	adiw	r28, 0x29	; 41
     3be:	5f af       	std	Y+63, r21	; 0x3f
     3c0:	a9 97       	sbiw	r28, 0x29	; 41
     3c2:	aa 96       	adiw	r28, 0x2a	; 42
     3c4:	6f af       	std	Y+63, r22	; 0x3f
     3c6:	aa 97       	sbiw	r28, 0x2a	; 42
     3c8:	ab 96       	adiw	r28, 0x2b	; 43
     3ca:	7f af       	std	Y+63, r23	; 0x3f
     3cc:	ab 97       	sbiw	r28, 0x2b	; 43
		display_set_cursor(0, 1);
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	68 d1       	rcall	.+720    	; 0x6a8 <display_set_cursor>
     3d8:	ab 96       	adiw	r28, 0x2b	; 43
		char debugout[100];
		sprintf(debugout, "%d;%d;%d,%d,%d", measurement.x_geforce, measurement.y_geforce, measurement.z_geforce, correctCount, totalCount);
     3da:	ae ac       	ldd	r10, Y+62	; 0x3e
     3dc:	bf ac       	ldd	r11, Y+63	; 0x3f
     3de:	ab 97       	sbiw	r28, 0x2b	; 43
     3e0:	a9 96       	adiw	r28, 0x29	; 41
     3e2:	ce ac       	ldd	r12, Y+62	; 0x3e
     3e4:	df ac       	ldd	r13, Y+63	; 0x3f
     3e6:	a9 97       	sbiw	r28, 0x29	; 41
     3e8:	a7 96       	adiw	r28, 0x27	; 39
     3ea:	ee ac       	ldd	r14, Y+62	; 0x3e
     3ec:	ff ac       	ldd	r15, Y+63	; 0x3f
     3ee:	a7 97       	sbiw	r28, 0x27	; 39
     3f0:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <totalCount+0x1>
     3f4:	8f 93       	push	r24
     3f6:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <totalCount>
     3fa:	8f 93       	push	r24
     3fc:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <correctCount+0x1>
     400:	8f 93       	push	r24
     402:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <correctCount>
     406:	8f 93       	push	r24
     408:	bf 92       	push	r11
     40a:	af 92       	push	r10
     40c:	df 92       	push	r13
     40e:	cf 92       	push	r12
     410:	ff 92       	push	r15
     412:	ef 92       	push	r14
     414:	8f e6       	ldi	r24, 0x6F	; 111
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	9f 93       	push	r25
     41a:	8f 93       	push	r24
     41c:	ce 01       	movw	r24, r28
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	4c 01       	movw	r8, r24
     422:	9f 93       	push	r25
     424:	8f 93       	push	r24
     426:	2a d4       	rcall	.+2132   	; 0xc7c <sprintf>
		display_text(debugout);
     428:	c4 01       	movw	r24, r8
     42a:	22 d1       	rcall	.+580    	; 0x670 <display_text>
     42c:	0f b6       	in	r0, 0x3f	; 63
		switch (dir)
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	12 30       	cpi	r17, 0x02	; 2
     438:	a1 f1       	breq	.+104    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     43a:	28 f4       	brcc	.+10     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     43c:	11 23       	and	r17, r17
     43e:	59 f0       	breq	.+22     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     440:	11 30       	cpi	r17, 0x01	; 1
     442:	e1 f0       	breq	.+56     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     444:	76 c0       	rjmp	.+236    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     446:	14 30       	cpi	r17, 0x04	; 4
     448:	09 f4       	brne	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     44a:	50 c0       	rjmp	.+160    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     44c:	e8 f1       	brcs	.+122    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     44e:	15 30       	cpi	r17, 0x05	; 5
     450:	09 f4       	brne	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     452:	5e c0       	rjmp	.+188    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     454:	6e c0       	rjmp	.+220    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     456:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <TRESHOLD_MEASURMENT+0x4>
		{

			case UP:
				if(measurement.z_geforce <= TRESHOLD_MEASURMENT.z_geforce - MEASURMENT_OFSETT)
     45a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <TRESHOLD_MEASURMENT+0x5>
     45e:	02 97       	sbiw	r24, 0x02	; 2
     460:	8a 15       	cp	r24, r10
     462:	9b 05       	cpc	r25, r11
     464:	0c f4       	brge	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     466:	65 c0       	rjmp	.+202    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     468:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <correctCount>
				{
					correctCount++;
     46c:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <correctCount+0x1>
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <correctCount+0x1>
     476:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <correctCount>
     47a:	5b c0       	rjmp	.+182    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     47c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <TRESHOLD_MEASURMENT+0x4>
				}
				break;
			case DOWN:
				if(measurement.z_geforce >= TRESHOLD_MEASURMENT.z_geforce + MEASURMENT_OFSETT)
     480:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <TRESHOLD_MEASURMENT+0x5>
     484:	02 96       	adiw	r24, 0x02	; 2
     486:	a8 16       	cp	r10, r24
     488:	b9 06       	cpc	r11, r25
     48a:	0c f4       	brge	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48c:	52 c0       	rjmp	.+164    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     48e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <correctCount>
				{
					correctCount++;
     492:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <correctCount+0x1>
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <correctCount+0x1>
     49c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <correctCount>
     4a0:	48 c0       	rjmp	.+144    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     4a2:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <TRESHOLD_MEASURMENT+0x2>
				}
				break;

			case LEFT:
				if(measurement.y_geforce <= TRESHOLD_MEASURMENT.y_geforce - MEASURMENT_OFSETT)
     4a6:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <TRESHOLD_MEASURMENT+0x3>
     4aa:	02 97       	sbiw	r24, 0x02	; 2
     4ac:	8c 15       	cp	r24, r12
     4ae:	9d 05       	cpc	r25, r13
     4b0:	0c f4       	brge	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b2:	3f c0       	rjmp	.+126    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     4b4:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <correctCount>
				{
					correctCount++;
     4b8:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <correctCount+0x1>
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <correctCount+0x1>
     4c2:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <correctCount>
     4c6:	35 c0       	rjmp	.+106    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     4c8:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <TRESHOLD_MEASURMENT+0x2>
				}
				break;
			case RIGHT:
				if(measurement.y_geforce >= TRESHOLD_MEASURMENT.y_geforce + MEASURMENT_OFSETT)
     4cc:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <TRESHOLD_MEASURMENT+0x3>
     4d0:	02 96       	adiw	r24, 0x02	; 2
     4d2:	c8 16       	cp	r12, r24
     4d4:	d9 06       	cpc	r13, r25
     4d6:	6c f1       	brlt	.+90     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     4d8:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <correctCount>
				{
					correctCount++;
     4dc:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <correctCount+0x1>
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <correctCount+0x1>
     4e6:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <correctCount>
     4ea:	23 c0       	rjmp	.+70     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     4ec:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <TRESHOLD_MEASURMENT>
				}
				break;
			case FORWARD:
				if(measurement.x_geforce <= TRESHOLD_MEASURMENT.x_geforce - MEASURMENT_OFSETT)
     4f0:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <TRESHOLD_MEASURMENT+0x1>
     4f4:	02 97       	sbiw	r24, 0x02	; 2
     4f6:	8e 15       	cp	r24, r14
     4f8:	9f 05       	cpc	r25, r15
     4fa:	dc f0       	brlt	.+54     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     4fc:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <correctCount>
				{
					correctCount++;
     500:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <correctCount+0x1>
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <correctCount+0x1>
     50a:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <correctCount>
     50e:	11 c0       	rjmp	.+34     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     510:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <TRESHOLD_MEASURMENT>
				}
				break;
			case BACKWARD:
				if(measurement.x_geforce >= TRESHOLD_MEASURMENT.x_geforce + MEASURMENT_OFSETT)
     514:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <TRESHOLD_MEASURMENT+0x1>
     518:	02 96       	adiw	r24, 0x02	; 2
     51a:	e8 16       	cp	r14, r24
     51c:	f9 06       	cpc	r15, r25
     51e:	4c f0       	brlt	.+18     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     520:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <correctCount>
				{
					correctCount++;
     524:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <correctCount+0x1>
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <correctCount+0x1>
     52e:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <correctCount>
     532:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <totalCount>
				}
				break;
		}
		totalCount++;
     536:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <totalCount+0x1>
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <totalCount+0x1>
     540:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <totalCount>
		wait(100);
     544:	84 e6       	ldi	r24, 0x64	; 100
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	31 de       	rcall	.-926    	; 0x1ac <wait>
     54a:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
	display_clear();
	GameLogic_Draw_Dir(dir);
	GameLogic_draw_hearts();

	// Starting handling
	while(isroundstarted) {
     54e:	81 11       	cpse	r24, r1
     550:	2b cf       	rjmp	.-426    	; 0x3a8 <GameLogic_Round+0x46>
		}
		totalCount++;
		wait(100);
	}
	
	float percentage = ((float)correctCount / (float)totalCount) * 100.0;
     552:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <correctCount>
     556:	70 91 c0 01 	lds	r23, 0x01C0	; 0x8001c0 <correctCount+0x1>
     55a:	07 2e       	mov	r0, r23
     55c:	00 0c       	add	r0, r0
     55e:	88 0b       	sbc	r24, r24
     560:	99 0b       	sbc	r25, r25
     562:	21 d2       	rcall	.+1090   	; 0x9a6 <__floatsisf>
     564:	6b 01       	movw	r12, r22
     566:	7c 01       	movw	r14, r24
     568:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <totalCount>
     56c:	70 91 c2 01 	lds	r23, 0x01C2	; 0x8001c2 <totalCount+0x1>
     570:	07 2e       	mov	r0, r23
     572:	00 0c       	add	r0, r0
     574:	88 0b       	sbc	r24, r24
     576:	99 0b       	sbc	r25, r25
     578:	16 d2       	rcall	.+1068   	; 0x9a6 <__floatsisf>
     57a:	9b 01       	movw	r18, r22
     57c:	ac 01       	movw	r20, r24
     57e:	c7 01       	movw	r24, r14
     580:	b6 01       	movw	r22, r12
     582:	76 d1       	rcall	.+748    	; 0x870 <__divsf3>
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	48 ec       	ldi	r20, 0xC8	; 200
    bool inputCorrect = (int)percentage > CORRECTTHRESHOLD;
     58a:	52 e4       	ldi	r21, 0x42	; 66
     58c:	98 d2       	rcall	.+1328   	; 0xabe <__mulsf3>

	display_clear();
     58e:	d8 d1       	rcall	.+944    	; 0x940 <__fixsfsi>
	display_set_cursor(0,1);
     590:	7b 01       	movw	r14, r22
     592:	9e d0       	rcall	.+316    	; 0x6d0 <display_clear>
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
    if(inputCorrect) {
     59c:	85 d0       	rcall	.+266    	; 0x6a8 <display_set_cursor>
     59e:	9b e0       	ldi	r25, 0x0B	; 11
     5a0:	e9 16       	cp	r14, r25
     5a2:	f1 04       	cpc	r15, r1
	    display_text(" Input Correct! ");
     5a4:	24 f0       	brlt	.+8      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5a6:	8e e7       	ldi	r24, 0x7E	; 126
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	62 d0       	rcall	.+196    	; 0x670 <display_text>
	} else {
	    display_text("Input Incorrect!");
     5ac:	1f c0       	rjmp	.+62     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5ae:	8f e8       	ldi	r24, 0x8F	; 143
     5b0:	91 e0       	ldi	r25, 0x01	; 1
		lives_left--;
     5b2:	5e d0       	rcall	.+188    	; 0x670 <display_text>
     5b4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lives_left>
     5b8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lives_left+0x1>
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lives_left+0x1>
		if(lives_left <= 0) {
     5c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lives_left>
			wait(500);
     5c6:	18 16       	cp	r1, r24
     5c8:	19 06       	cpc	r1, r25
     5ca:	84 f0       	brlt	.+32     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5cc:	84 ef       	ldi	r24, 0xF4	; 244
			display_clear();
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	ed dd       	rcall	.-1062   	; 0x1ac <wait>
			display_text("Game Over!");
     5d2:	7e d0       	rcall	.+252    	; 0x6d0 <display_clear>
     5d4:	80 ea       	ldi	r24, 0xA0	; 160
     5d6:	91 e0       	ldi	r25, 0x01	; 1
			lives_left = 3;
     5d8:	4b d0       	rcall	.+150    	; 0x670 <display_text>
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lives_left+0x1>
     5e2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lives_left>
			wait(500);
     5e6:	84 ef       	ldi	r24, 0xF4	; 244
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	e0 dd       	rcall	.-1088   	; 0x1ac <wait>
		}
    }
	GameLogic_draw_hearts();
     5ec:	49 de       	rcall	.-878    	; 0x280 <GameLogic_draw_hearts>
     5ee:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <correctCount+0x1>

	correctCount = 0;
     5f2:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <correctCount>
     5f6:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <totalCount+0x1>
	totalCount = 0;
     5fa:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <totalCount>
     5fe:	88 ee       	ldi	r24, 0xE8	; 232

	wait(1000);
     600:	93 e0       	ldi	r25, 0x03	; 3
     602:	d4 dd       	rcall	.-1112   	; 0x1ac <wait>
     604:	c6 59       	subi	r28, 0x96	; 150
     606:	df 4f       	sbci	r29, 0xFF	; 255
}
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	bf 90       	pop	r11
     622:	af 90       	pop	r10
     624:	9f 90       	pop	r9
     626:	8f 90       	pop	r8
     628:	08 95       	ret

0000062a <switch_E>:
unsigned char fullheart[8] = {0x00,0x0A,0x1F,0x1F,0x0E,0x04,0x00,0x00};
unsigned char emptyheart[8] = {0x00,0x0A,0x15,0x11,0x0A,0x04,0x00,0x00};


void switch_E() {
	PORTC |= (1<<E);
     62a:	85 b3       	in	r24, 0x15	; 21
     62c:	88 60       	ori	r24, 0x08	; 8
     62e:	85 bb       	out	0x15, r24	; 21
     630:	8f ec       	ldi	r24, 0xCF	; 207
     632:	97 e0       	ldi	r25, 0x07	; 7
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <switch_E+0xa>
     638:	00 c0       	rjmp	.+0      	; 0x63a <switch_E+0x10>
     63a:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<E);
     63c:	85 b3       	in	r24, 0x15	; 21
     63e:	87 7f       	andi	r24, 0xF7	; 247
     640:	85 bb       	out	0x15, r24	; 21
     642:	8f ec       	ldi	r24, 0xCF	; 207
     644:	97 e0       	ldi	r25, 0x07	; 7
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <switch_E+0x1c>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <switch_E+0x22>
     64c:	00 00       	nop
     64e:	08 95       	ret

00000650 <lcd_write_data>:
	_delay_ms(1);
}



void lcd_write_data(unsigned char byte) {
     650:	cf 93       	push	r28
     652:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     654:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<RS);
     656:	85 b3       	in	r24, 0x15	; 21
     658:	84 60       	ori	r24, 0x04	; 4
     65a:	85 bb       	out	0x15, r24	; 21
	switch_E();
     65c:	e6 df       	rcall	.-52     	; 0x62a <switch_E>

	// Second nibble
	PORTC = (byte<<4);
     65e:	c2 95       	swap	r28
     660:	c0 7f       	andi	r28, 0xF0	; 240
     662:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<RS);
     664:	85 b3       	in	r24, 0x15	; 21
     666:	84 60       	ori	r24, 0x04	; 4
	switch_E();
     668:	85 bb       	out	0x15, r24	; 21
     66a:	df df       	rcall	.-66     	; 0x62a <switch_E>
}
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <display_text>:

void display_text(char *str) {
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	ec 01       	movw	r28, r24
	while (*str) {
     676:	02 c0       	rjmp	.+4      	; 0x67c <display_text+0xc>
		lcd_write_data(*str++);
     678:	21 96       	adiw	r28, 0x01	; 1
     67a:	ea df       	rcall	.-44     	; 0x650 <lcd_write_data>
	PORTC |= (1<<RS);
	switch_E();
}

void display_text(char *str) {
	while (*str) {
     67c:	88 81       	ld	r24, Y
     67e:	81 11       	cpse	r24, r1
     680:	fb cf       	rjmp	.-10     	; 0x678 <display_text+0x8>
		lcd_write_data(*str++);
	}
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <lcd_write_command>:

void lcd_write_command(unsigned char byte)
{
     688:	cf 93       	push	r28
     68a:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     68c:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<RS);
     68e:	85 b3       	in	r24, 0x15	; 21
     690:	8b 7f       	andi	r24, 0xFB	; 251
     692:	85 bb       	out	0x15, r24	; 21
	switch_E();
     694:	ca df       	rcall	.-108    	; 0x62a <switch_E>

	// Second nibble
	PORTC = (byte<<4);
     696:	c2 95       	swap	r28
     698:	c0 7f       	andi	r28, 0xF0	; 240
     69a:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<RS);
     69c:	85 b3       	in	r24, 0x15	; 21
     69e:	8b 7f       	andi	r24, 0xFB	; 251
	switch_E();
     6a0:	85 bb       	out	0x15, r24	; 21
     6a2:	c3 df       	rcall	.-122    	; 0x62a <switch_E>
}
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <display_set_cursor>:


// 0x0c for turning cursor of.
void display_set_cursor(int position, int line) {
	if (line == 0){
     6a8:	67 2b       	or	r22, r23
     6aa:	49 f4       	brne	.+18     	; 0x6be <display_set_cursor+0x16>
		lcd_write_command((position * 0x1) + 0x80);
     6ac:	80 58       	subi	r24, 0x80	; 128
     6ae:	ec df       	rcall	.-40     	; 0x688 <lcd_write_command>
     6b0:	8f e9       	ldi	r24, 0x9F	; 159
     6b2:	9f e0       	ldi	r25, 0x0F	; 15
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <display_set_cursor+0xc>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <display_set_cursor+0x12>
     6ba:	00 00       	nop
     6bc:	08 95       	ret
		_delay_ms(2);
	} else {
		lcd_write_command((position * 0x1) + 0xc0);
     6be:	80 54       	subi	r24, 0x40	; 64
     6c0:	e3 df       	rcall	.-58     	; 0x688 <lcd_write_command>
     6c2:	8f e9       	ldi	r24, 0x9F	; 159
     6c4:	9f e0       	ldi	r25, 0x0F	; 15
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <display_set_cursor+0x1e>
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <display_set_cursor+0x24>
     6cc:	00 00       	nop
     6ce:	08 95       	ret

000006d0 <display_clear>:
		_delay_ms(2);
	}
}

void display_clear(){
	lcd_write_command(0x01);
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	da df       	rcall	.-76     	; 0x688 <lcd_write_command>
     6d4:	8f e9       	ldi	r24, 0x9F	; 159
     6d6:	9f e0       	ldi	r25, 0x0F	; 15
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <display_clear+0x8>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <display_clear+0xe>
     6de:	00 00       	nop
	_delay_ms(2);
	lcd_write_command(0x80);
     6e0:	80 e8       	ldi	r24, 0x80	; 128
     6e2:	d2 cf       	rjmp	.-92     	; 0x688 <lcd_write_command>
     6e4:	08 95       	ret

000006e6 <LCD_Custom_Char>:
}

void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	8b 01       	movw	r16, r22
	unsigned char i;
	if(loc<8)
     6ee:	88 30       	cpi	r24, 0x08	; 8
     6f0:	80 f4       	brcc	.+32     	; 0x712 <LCD_Custom_Char+0x2c>
	{
		lcd_write_command(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	08 96       	adiw	r24, 0x08	; 8
     6f6:	88 0f       	add	r24, r24
     6f8:	88 0f       	add	r24, r24
     6fa:	88 0f       	add	r24, r24
     6fc:	c5 df       	rcall	.-118    	; 0x688 <lcd_write_command>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
     6fe:	c0 e0       	ldi	r28, 0x00	; 0
     700:	06 c0       	rjmp	.+12     	; 0x70e <LCD_Custom_Char+0x28>
		lcd_write_data(msg[i]);
     702:	f8 01       	movw	r30, r16
     704:	ec 0f       	add	r30, r28
     706:	f1 1d       	adc	r31, r1
     708:	80 81       	ld	r24, Z
     70a:	a2 df       	rcall	.-188    	; 0x650 <lcd_write_data>
{
	unsigned char i;
	if(loc<8)
	{
		lcd_write_command(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
     70c:	cf 5f       	subi	r28, 0xFF	; 255
     70e:	c8 30       	cpi	r28, 0x08	; 8
		lcd_write_data(msg[i]);
	}
	display_clear();
     710:	c0 f3       	brcs	.-16     	; 0x702 <LCD_Custom_Char+0x1c>
     712:	de df       	rcall	.-68     	; 0x6d0 <display_clear>
}
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <display_init>:
void display_init() {
     71c:	cf 93       	push	r28
	// See table 13 from the HD44780U datasheet.
	DDRC = 0xFF;
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
     722:	15 ba       	out	0x15, r1	; 21
	
	// Step 2 Function set
	PORTC = 0x20;
     724:	c0 e2       	ldi	r28, 0x20	; 32
     726:	c5 bb       	out	0x15, r28	; 21
	switch_E();
     728:	80 df       	rcall	.-256    	; 0x62a <switch_E>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	switch_E();
     72a:	c5 bb       	out	0x15, r28	; 21
     72c:	7e df       	rcall	.-260    	; 0x62a <switch_E>
	PORTC = 0x80;
     72e:	80 e8       	ldi	r24, 0x80	; 128
	switch_E();
     730:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
     732:	7b df       	rcall	.-266    	; 0x62a <switch_E>
	switch_E();
     734:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
     736:	79 df       	rcall	.-270    	; 0x62a <switch_E>
	switch_E();
     738:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
     73a:	85 bb       	out	0x15, r24	; 21
	switch_E();
     73c:	76 df       	rcall	.-276    	; 0x62a <switch_E>
	PORTC = 0x60;
     73e:	15 ba       	out	0x15, r1	; 21
     740:	74 df       	rcall	.-280    	; 0x62a <switch_E>
	switch_E();
     742:	80 e6       	ldi	r24, 0x60	; 96
	
	// Set cursor to position 0 on first row.
	lcd_write_command(0x02);
     744:	85 bb       	out	0x15, r24	; 21
     746:	71 df       	rcall	.-286    	; 0x62a <switch_E>

	// Adding custom chars
	LCD_Custom_Char(1, fullheart);
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	9e df       	rcall	.-196    	; 0x688 <lcd_write_command>
     74c:	66 e1       	ldi	r22, 0x16	; 22
     74e:	71 e0       	ldi	r23, 0x01	; 1
     750:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Custom_Char(2, emptyheart);
     752:	c9 df       	rcall	.-110    	; 0x6e6 <LCD_Custom_Char>
     754:	6e e0       	ldi	r22, 0x0E	; 14
     756:	71 e0       	ldi	r23, 0x01	; 1
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	c5 df       	rcall	.-118    	; 0x6e6 <LCD_Custom_Char>
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <__vector_12>:
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	0b b6       	in	r0, 0x3b	; 59
     76c:	0f 92       	push	r0
     76e:	2f 93       	push	r18
     770:	3f 93       	push	r19
     772:	4f 93       	push	r20
     774:	5f 93       	push	r21
     776:	6f 93       	push	r22
     778:	7f 93       	push	r23
     77a:	8f 93       	push	r24
     77c:	9f 93       	push	r25
     77e:	af 93       	push	r26
     780:	bf 93       	push	r27
     782:	ef 93       	push	r30
     784:	ff 93       	push	r31
     786:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <on_interupt>
     78a:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <on_interupt+0x1>
     78e:	09 95       	icall
     790:	f8 94       	cli
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	bf 91       	pop	r27
     798:	af 91       	pop	r26
     79a:	9f 91       	pop	r25
     79c:	8f 91       	pop	r24
     79e:	7f 91       	pop	r23
     7a0:	6f 91       	pop	r22
     7a2:	5f 91       	pop	r21
     7a4:	4f 91       	pop	r20
     7a6:	3f 91       	pop	r19
     7a8:	2f 91       	pop	r18
     7aa:	0f 90       	pop	r0
     7ac:	0b be       	out	0x3b, r0	; 59
     7ae:	0f 90       	pop	r0
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	0f 90       	pop	r0
     7b4:	1f 90       	pop	r1
     7b6:	18 95       	reti

000007b8 <setup_timer>:
     7b8:	7b bd       	out	0x2b, r23	; 43
     7ba:	6a bd       	out	0x2a, r22	; 42
     7bc:	97 b7       	in	r25, 0x37	; 55
     7be:	90 61       	ori	r25, 0x10	; 16
     7c0:	97 bf       	out	0x37, r25	; 55
     7c2:	78 94       	sei
     7c4:	9e b5       	in	r25, 0x2e	; 46
     7c6:	9e bd       	out	0x2e, r25	; 46
     7c8:	9e b5       	in	r25, 0x2e	; 46
     7ca:	89 2b       	or	r24, r25
     7cc:	8e bd       	out	0x2e, r24	; 46
     7ce:	08 95       	ret

000007d0 <set_timer>:
     7d0:	8f 92       	push	r8
     7d2:	9f 92       	push	r9
     7d4:	af 92       	push	r10
     7d6:	bf 92       	push	r11
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	8c 01       	movw	r16, r24
     7ea:	6b 01       	movw	r12, r22
     7ec:	c1 e0       	ldi	r28, 0x01	; 1
     7ee:	d0 e0       	ldi	r29, 0x00	; 0
     7f0:	25 c0       	rjmp	.+74     	; 0x83c <set_timer+0x6c>
     7f2:	10 16       	cp	r1, r16
     7f4:	11 06       	cpc	r1, r17
     7f6:	0c f5       	brge	.+66     	; 0x83a <set_timer+0x6a>
     7f8:	fe 01       	movw	r30, r28
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	e5 55       	subi	r30, 0x55	; 85
     800:	fe 4f       	sbci	r31, 0xFE	; 254
     802:	e0 80       	ld	r14, Z
     804:	f1 80       	ldd	r15, Z+1	; 0x01
     806:	b8 01       	movw	r22, r16
     808:	01 2e       	mov	r0, r17
     80a:	00 0c       	add	r0, r0
     80c:	88 0b       	sbc	r24, r24
     80e:	99 0b       	sbc	r25, r25
     810:	ca d0       	rcall	.+404    	; 0x9a6 <__floatsisf>
     812:	4b 01       	movw	r8, r22
     814:	5c 01       	movw	r10, r24
     816:	b7 01       	movw	r22, r14
     818:	0f 2c       	mov	r0, r15
     81a:	00 0c       	add	r0, r0
     81c:	88 0b       	sbc	r24, r24
     81e:	99 0b       	sbc	r25, r25
     820:	c2 d0       	rcall	.+388    	; 0x9a6 <__floatsisf>
     822:	2f e6       	ldi	r18, 0x6F	; 111
     824:	32 e1       	ldi	r19, 0x12	; 18
     826:	43 e0       	ldi	r20, 0x03	; 3
     828:	59 e3       	ldi	r21, 0x39	; 57
     82a:	49 d1       	rcall	.+658    	; 0xabe <__mulsf3>
     82c:	9b 01       	movw	r18, r22
     82e:	ac 01       	movw	r20, r24
     830:	c5 01       	movw	r24, r10
     832:	b4 01       	movw	r22, r8
     834:	1d d0       	rcall	.+58     	; 0x870 <__divsf3>
     836:	84 d0       	rcall	.+264    	; 0x940 <__fixsfsi>
     838:	9b 01       	movw	r18, r22
     83a:	21 96       	adiw	r28, 0x01	; 1
     83c:	c6 30       	cpi	r28, 0x06	; 6
     83e:	d1 05       	cpc	r29, r1
     840:	c4 f2       	brlt	.-80     	; 0x7f2 <set_timer+0x22>
     842:	b9 01       	movw	r22, r18
     844:	c7 01       	movw	r24, r14
     846:	b8 df       	rcall	.-144    	; 0x7b8 <setup_timer>
     848:	d0 92 c4 01 	sts	0x01C4, r13	; 0x8001c4 <on_interupt+0x1>
     84c:	c0 92 c3 01 	sts	0x01C3, r12	; 0x8001c3 <on_interupt>
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	cf 90       	pop	r12
     860:	bf 90       	pop	r11
     862:	af 90       	pop	r10
     864:	9f 90       	pop	r9
     866:	8f 90       	pop	r8
     868:	08 95       	ret

0000086a <main>:


// Main program
int main( void )
{
	GameLogic_Init();
     86a:	af dc       	rcall	.-1698   	; 0x1ca <GameLogic_Init>
	while (1)
	{
		// Reading measurement
		GameLogic_Round();
     86c:	7a dd       	rcall	.-1292   	; 0x362 <GameLogic_Round>
     86e:	fe cf       	rjmp	.-4      	; 0x86c <main+0x2>

00000870 <__divsf3>:
     870:	0c d0       	rcall	.+24     	; 0x88a <__divsf3x>
     872:	eb c0       	rjmp	.+470    	; 0xa4a <__fp_round>
     874:	e3 d0       	rcall	.+454    	; 0xa3c <__fp_pscB>
     876:	40 f0       	brcs	.+16     	; 0x888 <__divsf3+0x18>
     878:	da d0       	rcall	.+436    	; 0xa2e <__fp_pscA>
     87a:	30 f0       	brcs	.+12     	; 0x888 <__divsf3+0x18>
     87c:	21 f4       	brne	.+8      	; 0x886 <__divsf3+0x16>
     87e:	5f 3f       	cpi	r21, 0xFF	; 255
     880:	19 f0       	breq	.+6      	; 0x888 <__divsf3+0x18>
     882:	cc c0       	rjmp	.+408    	; 0xa1c <__fp_inf>
     884:	51 11       	cpse	r21, r1
     886:	15 c1       	rjmp	.+554    	; 0xab2 <__fp_szero>
     888:	cf c0       	rjmp	.+414    	; 0xa28 <__fp_nan>

0000088a <__divsf3x>:
     88a:	f0 d0       	rcall	.+480    	; 0xa6c <__fp_split3>
     88c:	98 f3       	brcs	.-26     	; 0x874 <__divsf3+0x4>

0000088e <__divsf3_pse>:
     88e:	99 23       	and	r25, r25
     890:	c9 f3       	breq	.-14     	; 0x884 <__divsf3+0x14>
     892:	55 23       	and	r21, r21
     894:	b1 f3       	breq	.-20     	; 0x882 <__divsf3+0x12>
     896:	95 1b       	sub	r25, r21
     898:	55 0b       	sbc	r21, r21
     89a:	bb 27       	eor	r27, r27
     89c:	aa 27       	eor	r26, r26
     89e:	62 17       	cp	r22, r18
     8a0:	73 07       	cpc	r23, r19
     8a2:	84 07       	cpc	r24, r20
     8a4:	38 f0       	brcs	.+14     	; 0x8b4 <__divsf3_pse+0x26>
     8a6:	9f 5f       	subi	r25, 0xFF	; 255
     8a8:	5f 4f       	sbci	r21, 0xFF	; 255
     8aa:	22 0f       	add	r18, r18
     8ac:	33 1f       	adc	r19, r19
     8ae:	44 1f       	adc	r20, r20
     8b0:	aa 1f       	adc	r26, r26
     8b2:	a9 f3       	breq	.-22     	; 0x89e <__divsf3_pse+0x10>
     8b4:	33 d0       	rcall	.+102    	; 0x91c <__divsf3_pse+0x8e>
     8b6:	0e 2e       	mov	r0, r30
     8b8:	3a f0       	brmi	.+14     	; 0x8c8 <__divsf3_pse+0x3a>
     8ba:	e0 e8       	ldi	r30, 0x80	; 128
     8bc:	30 d0       	rcall	.+96     	; 0x91e <__divsf3_pse+0x90>
     8be:	91 50       	subi	r25, 0x01	; 1
     8c0:	50 40       	sbci	r21, 0x00	; 0
     8c2:	e6 95       	lsr	r30
     8c4:	00 1c       	adc	r0, r0
     8c6:	ca f7       	brpl	.-14     	; 0x8ba <__divsf3_pse+0x2c>
     8c8:	29 d0       	rcall	.+82     	; 0x91c <__divsf3_pse+0x8e>
     8ca:	fe 2f       	mov	r31, r30
     8cc:	27 d0       	rcall	.+78     	; 0x91c <__divsf3_pse+0x8e>
     8ce:	66 0f       	add	r22, r22
     8d0:	77 1f       	adc	r23, r23
     8d2:	88 1f       	adc	r24, r24
     8d4:	bb 1f       	adc	r27, r27
     8d6:	26 17       	cp	r18, r22
     8d8:	37 07       	cpc	r19, r23
     8da:	48 07       	cpc	r20, r24
     8dc:	ab 07       	cpc	r26, r27
     8de:	b0 e8       	ldi	r27, 0x80	; 128
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <__divsf3_pse+0x56>
     8e2:	bb 0b       	sbc	r27, r27
     8e4:	80 2d       	mov	r24, r0
     8e6:	bf 01       	movw	r22, r30
     8e8:	ff 27       	eor	r31, r31
     8ea:	93 58       	subi	r25, 0x83	; 131
     8ec:	5f 4f       	sbci	r21, 0xFF	; 255
     8ee:	2a f0       	brmi	.+10     	; 0x8fa <__divsf3_pse+0x6c>
     8f0:	9e 3f       	cpi	r25, 0xFE	; 254
     8f2:	51 05       	cpc	r21, r1
     8f4:	68 f0       	brcs	.+26     	; 0x910 <__divsf3_pse+0x82>
     8f6:	92 c0       	rjmp	.+292    	; 0xa1c <__fp_inf>
     8f8:	dc c0       	rjmp	.+440    	; 0xab2 <__fp_szero>
     8fa:	5f 3f       	cpi	r21, 0xFF	; 255
     8fc:	ec f3       	brlt	.-6      	; 0x8f8 <__divsf3_pse+0x6a>
     8fe:	98 3e       	cpi	r25, 0xE8	; 232
     900:	dc f3       	brlt	.-10     	; 0x8f8 <__divsf3_pse+0x6a>
     902:	86 95       	lsr	r24
     904:	77 95       	ror	r23
     906:	67 95       	ror	r22
     908:	b7 95       	ror	r27
     90a:	f7 95       	ror	r31
     90c:	9f 5f       	subi	r25, 0xFF	; 255
     90e:	c9 f7       	brne	.-14     	; 0x902 <__divsf3_pse+0x74>
     910:	88 0f       	add	r24, r24
     912:	91 1d       	adc	r25, r1
     914:	96 95       	lsr	r25
     916:	87 95       	ror	r24
     918:	97 f9       	bld	r25, 7
     91a:	08 95       	ret
     91c:	e1 e0       	ldi	r30, 0x01	; 1
     91e:	66 0f       	add	r22, r22
     920:	77 1f       	adc	r23, r23
     922:	88 1f       	adc	r24, r24
     924:	bb 1f       	adc	r27, r27
     926:	62 17       	cp	r22, r18
     928:	73 07       	cpc	r23, r19
     92a:	84 07       	cpc	r24, r20
     92c:	ba 07       	cpc	r27, r26
     92e:	20 f0       	brcs	.+8      	; 0x938 <__divsf3_pse+0xaa>
     930:	62 1b       	sub	r22, r18
     932:	73 0b       	sbc	r23, r19
     934:	84 0b       	sbc	r24, r20
     936:	ba 0b       	sbc	r27, r26
     938:	ee 1f       	adc	r30, r30
     93a:	88 f7       	brcc	.-30     	; 0x91e <__divsf3_pse+0x90>
     93c:	e0 95       	com	r30
     93e:	08 95       	ret

00000940 <__fixsfsi>:
     940:	04 d0       	rcall	.+8      	; 0x94a <__fixunssfsi>
     942:	68 94       	set
     944:	b1 11       	cpse	r27, r1
     946:	b5 c0       	rjmp	.+362    	; 0xab2 <__fp_szero>
     948:	08 95       	ret

0000094a <__fixunssfsi>:
     94a:	98 d0       	rcall	.+304    	; 0xa7c <__fp_splitA>
     94c:	88 f0       	brcs	.+34     	; 0x970 <__fixunssfsi+0x26>
     94e:	9f 57       	subi	r25, 0x7F	; 127
     950:	90 f0       	brcs	.+36     	; 0x976 <__fixunssfsi+0x2c>
     952:	b9 2f       	mov	r27, r25
     954:	99 27       	eor	r25, r25
     956:	b7 51       	subi	r27, 0x17	; 23
     958:	a0 f0       	brcs	.+40     	; 0x982 <__fixunssfsi+0x38>
     95a:	d1 f0       	breq	.+52     	; 0x990 <__fixunssfsi+0x46>
     95c:	66 0f       	add	r22, r22
     95e:	77 1f       	adc	r23, r23
     960:	88 1f       	adc	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	1a f0       	brmi	.+6      	; 0x96c <__fixunssfsi+0x22>
     966:	ba 95       	dec	r27
     968:	c9 f7       	brne	.-14     	; 0x95c <__fixunssfsi+0x12>
     96a:	12 c0       	rjmp	.+36     	; 0x990 <__fixunssfsi+0x46>
     96c:	b1 30       	cpi	r27, 0x01	; 1
     96e:	81 f0       	breq	.+32     	; 0x990 <__fixunssfsi+0x46>
     970:	9f d0       	rcall	.+318    	; 0xab0 <__fp_zero>
     972:	b1 e0       	ldi	r27, 0x01	; 1
     974:	08 95       	ret
     976:	9c c0       	rjmp	.+312    	; 0xab0 <__fp_zero>
     978:	67 2f       	mov	r22, r23
     97a:	78 2f       	mov	r23, r24
     97c:	88 27       	eor	r24, r24
     97e:	b8 5f       	subi	r27, 0xF8	; 248
     980:	39 f0       	breq	.+14     	; 0x990 <__fixunssfsi+0x46>
     982:	b9 3f       	cpi	r27, 0xF9	; 249
     984:	cc f3       	brlt	.-14     	; 0x978 <__fixunssfsi+0x2e>
     986:	86 95       	lsr	r24
     988:	77 95       	ror	r23
     98a:	67 95       	ror	r22
     98c:	b3 95       	inc	r27
     98e:	d9 f7       	brne	.-10     	; 0x986 <__fixunssfsi+0x3c>
     990:	3e f4       	brtc	.+14     	; 0x9a0 <__fixunssfsi+0x56>
     992:	90 95       	com	r25
     994:	80 95       	com	r24
     996:	70 95       	com	r23
     998:	61 95       	neg	r22
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	8f 4f       	sbci	r24, 0xFF	; 255
     99e:	9f 4f       	sbci	r25, 0xFF	; 255
     9a0:	08 95       	ret

000009a2 <__floatunsisf>:
     9a2:	e8 94       	clt
     9a4:	09 c0       	rjmp	.+18     	; 0x9b8 <__floatsisf+0x12>

000009a6 <__floatsisf>:
     9a6:	97 fb       	bst	r25, 7
     9a8:	3e f4       	brtc	.+14     	; 0x9b8 <__floatsisf+0x12>
     9aa:	90 95       	com	r25
     9ac:	80 95       	com	r24
     9ae:	70 95       	com	r23
     9b0:	61 95       	neg	r22
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	8f 4f       	sbci	r24, 0xFF	; 255
     9b6:	9f 4f       	sbci	r25, 0xFF	; 255
     9b8:	99 23       	and	r25, r25
     9ba:	a9 f0       	breq	.+42     	; 0x9e6 <__floatsisf+0x40>
     9bc:	f9 2f       	mov	r31, r25
     9be:	96 e9       	ldi	r25, 0x96	; 150
     9c0:	bb 27       	eor	r27, r27
     9c2:	93 95       	inc	r25
     9c4:	f6 95       	lsr	r31
     9c6:	87 95       	ror	r24
     9c8:	77 95       	ror	r23
     9ca:	67 95       	ror	r22
     9cc:	b7 95       	ror	r27
     9ce:	f1 11       	cpse	r31, r1
     9d0:	f8 cf       	rjmp	.-16     	; 0x9c2 <__floatsisf+0x1c>
     9d2:	fa f4       	brpl	.+62     	; 0xa12 <__floatsisf+0x6c>
     9d4:	bb 0f       	add	r27, r27
     9d6:	11 f4       	brne	.+4      	; 0x9dc <__floatsisf+0x36>
     9d8:	60 ff       	sbrs	r22, 0
     9da:	1b c0       	rjmp	.+54     	; 0xa12 <__floatsisf+0x6c>
     9dc:	6f 5f       	subi	r22, 0xFF	; 255
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	8f 4f       	sbci	r24, 0xFF	; 255
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	16 c0       	rjmp	.+44     	; 0xa12 <__floatsisf+0x6c>
     9e6:	88 23       	and	r24, r24
     9e8:	11 f0       	breq	.+4      	; 0x9ee <__floatsisf+0x48>
     9ea:	96 e9       	ldi	r25, 0x96	; 150
     9ec:	11 c0       	rjmp	.+34     	; 0xa10 <__floatsisf+0x6a>
     9ee:	77 23       	and	r23, r23
     9f0:	21 f0       	breq	.+8      	; 0x9fa <__floatsisf+0x54>
     9f2:	9e e8       	ldi	r25, 0x8E	; 142
     9f4:	87 2f       	mov	r24, r23
     9f6:	76 2f       	mov	r23, r22
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <__floatsisf+0x5e>
     9fa:	66 23       	and	r22, r22
     9fc:	71 f0       	breq	.+28     	; 0xa1a <__floatsisf+0x74>
     9fe:	96 e8       	ldi	r25, 0x86	; 134
     a00:	86 2f       	mov	r24, r22
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	2a f0       	brmi	.+10     	; 0xa12 <__floatsisf+0x6c>
     a08:	9a 95       	dec	r25
     a0a:	66 0f       	add	r22, r22
     a0c:	77 1f       	adc	r23, r23
     a0e:	88 1f       	adc	r24, r24
     a10:	da f7       	brpl	.-10     	; 0xa08 <__floatsisf+0x62>
     a12:	88 0f       	add	r24, r24
     a14:	96 95       	lsr	r25
     a16:	87 95       	ror	r24
     a18:	97 f9       	bld	r25, 7
     a1a:	08 95       	ret

00000a1c <__fp_inf>:
     a1c:	97 f9       	bld	r25, 7
     a1e:	9f 67       	ori	r25, 0x7F	; 127
     a20:	80 e8       	ldi	r24, 0x80	; 128
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	08 95       	ret

00000a28 <__fp_nan>:
     a28:	9f ef       	ldi	r25, 0xFF	; 255
     a2a:	80 ec       	ldi	r24, 0xC0	; 192
     a2c:	08 95       	ret

00000a2e <__fp_pscA>:
     a2e:	00 24       	eor	r0, r0
     a30:	0a 94       	dec	r0
     a32:	16 16       	cp	r1, r22
     a34:	17 06       	cpc	r1, r23
     a36:	18 06       	cpc	r1, r24
     a38:	09 06       	cpc	r0, r25
     a3a:	08 95       	ret

00000a3c <__fp_pscB>:
     a3c:	00 24       	eor	r0, r0
     a3e:	0a 94       	dec	r0
     a40:	12 16       	cp	r1, r18
     a42:	13 06       	cpc	r1, r19
     a44:	14 06       	cpc	r1, r20
     a46:	05 06       	cpc	r0, r21
     a48:	08 95       	ret

00000a4a <__fp_round>:
     a4a:	09 2e       	mov	r0, r25
     a4c:	03 94       	inc	r0
     a4e:	00 0c       	add	r0, r0
     a50:	11 f4       	brne	.+4      	; 0xa56 <__fp_round+0xc>
     a52:	88 23       	and	r24, r24
     a54:	52 f0       	brmi	.+20     	; 0xa6a <__fp_round+0x20>
     a56:	bb 0f       	add	r27, r27
     a58:	40 f4       	brcc	.+16     	; 0xa6a <__fp_round+0x20>
     a5a:	bf 2b       	or	r27, r31
     a5c:	11 f4       	brne	.+4      	; 0xa62 <__fp_round+0x18>
     a5e:	60 ff       	sbrs	r22, 0
     a60:	04 c0       	rjmp	.+8      	; 0xa6a <__fp_round+0x20>
     a62:	6f 5f       	subi	r22, 0xFF	; 255
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	8f 4f       	sbci	r24, 0xFF	; 255
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	08 95       	ret

00000a6c <__fp_split3>:
     a6c:	57 fd       	sbrc	r21, 7
     a6e:	90 58       	subi	r25, 0x80	; 128
     a70:	44 0f       	add	r20, r20
     a72:	55 1f       	adc	r21, r21
     a74:	59 f0       	breq	.+22     	; 0xa8c <__fp_splitA+0x10>
     a76:	5f 3f       	cpi	r21, 0xFF	; 255
     a78:	71 f0       	breq	.+28     	; 0xa96 <__fp_splitA+0x1a>
     a7a:	47 95       	ror	r20

00000a7c <__fp_splitA>:
     a7c:	88 0f       	add	r24, r24
     a7e:	97 fb       	bst	r25, 7
     a80:	99 1f       	adc	r25, r25
     a82:	61 f0       	breq	.+24     	; 0xa9c <__fp_splitA+0x20>
     a84:	9f 3f       	cpi	r25, 0xFF	; 255
     a86:	79 f0       	breq	.+30     	; 0xaa6 <__fp_splitA+0x2a>
     a88:	87 95       	ror	r24
     a8a:	08 95       	ret
     a8c:	12 16       	cp	r1, r18
     a8e:	13 06       	cpc	r1, r19
     a90:	14 06       	cpc	r1, r20
     a92:	55 1f       	adc	r21, r21
     a94:	f2 cf       	rjmp	.-28     	; 0xa7a <__fp_split3+0xe>
     a96:	46 95       	lsr	r20
     a98:	f1 df       	rcall	.-30     	; 0xa7c <__fp_splitA>
     a9a:	08 c0       	rjmp	.+16     	; 0xaac <__fp_splitA+0x30>
     a9c:	16 16       	cp	r1, r22
     a9e:	17 06       	cpc	r1, r23
     aa0:	18 06       	cpc	r1, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	f1 cf       	rjmp	.-30     	; 0xa88 <__fp_splitA+0xc>
     aa6:	86 95       	lsr	r24
     aa8:	71 05       	cpc	r23, r1
     aaa:	61 05       	cpc	r22, r1
     aac:	08 94       	sec
     aae:	08 95       	ret

00000ab0 <__fp_zero>:
     ab0:	e8 94       	clt

00000ab2 <__fp_szero>:
     ab2:	bb 27       	eor	r27, r27
     ab4:	66 27       	eor	r22, r22
     ab6:	77 27       	eor	r23, r23
     ab8:	cb 01       	movw	r24, r22
     aba:	97 f9       	bld	r25, 7
     abc:	08 95       	ret

00000abe <__mulsf3>:
     abe:	0b d0       	rcall	.+22     	; 0xad6 <__mulsf3x>
     ac0:	c4 cf       	rjmp	.-120    	; 0xa4a <__fp_round>
     ac2:	b5 df       	rcall	.-150    	; 0xa2e <__fp_pscA>
     ac4:	28 f0       	brcs	.+10     	; 0xad0 <__mulsf3+0x12>
     ac6:	ba df       	rcall	.-140    	; 0xa3c <__fp_pscB>
     ac8:	18 f0       	brcs	.+6      	; 0xad0 <__mulsf3+0x12>
     aca:	95 23       	and	r25, r21
     acc:	09 f0       	breq	.+2      	; 0xad0 <__mulsf3+0x12>
     ace:	a6 cf       	rjmp	.-180    	; 0xa1c <__fp_inf>
     ad0:	ab cf       	rjmp	.-170    	; 0xa28 <__fp_nan>
     ad2:	11 24       	eor	r1, r1
     ad4:	ee cf       	rjmp	.-36     	; 0xab2 <__fp_szero>

00000ad6 <__mulsf3x>:
     ad6:	ca df       	rcall	.-108    	; 0xa6c <__fp_split3>
     ad8:	a0 f3       	brcs	.-24     	; 0xac2 <__mulsf3+0x4>

00000ada <__mulsf3_pse>:
     ada:	95 9f       	mul	r25, r21
     adc:	d1 f3       	breq	.-12     	; 0xad2 <__mulsf3+0x14>
     ade:	95 0f       	add	r25, r21
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	55 1f       	adc	r21, r21
     ae4:	62 9f       	mul	r22, r18
     ae6:	f0 01       	movw	r30, r0
     ae8:	72 9f       	mul	r23, r18
     aea:	bb 27       	eor	r27, r27
     aec:	f0 0d       	add	r31, r0
     aee:	b1 1d       	adc	r27, r1
     af0:	63 9f       	mul	r22, r19
     af2:	aa 27       	eor	r26, r26
     af4:	f0 0d       	add	r31, r0
     af6:	b1 1d       	adc	r27, r1
     af8:	aa 1f       	adc	r26, r26
     afa:	64 9f       	mul	r22, r20
     afc:	66 27       	eor	r22, r22
     afe:	b0 0d       	add	r27, r0
     b00:	a1 1d       	adc	r26, r1
     b02:	66 1f       	adc	r22, r22
     b04:	82 9f       	mul	r24, r18
     b06:	22 27       	eor	r18, r18
     b08:	b0 0d       	add	r27, r0
     b0a:	a1 1d       	adc	r26, r1
     b0c:	62 1f       	adc	r22, r18
     b0e:	73 9f       	mul	r23, r19
     b10:	b0 0d       	add	r27, r0
     b12:	a1 1d       	adc	r26, r1
     b14:	62 1f       	adc	r22, r18
     b16:	83 9f       	mul	r24, r19
     b18:	a0 0d       	add	r26, r0
     b1a:	61 1d       	adc	r22, r1
     b1c:	22 1f       	adc	r18, r18
     b1e:	74 9f       	mul	r23, r20
     b20:	33 27       	eor	r19, r19
     b22:	a0 0d       	add	r26, r0
     b24:	61 1d       	adc	r22, r1
     b26:	23 1f       	adc	r18, r19
     b28:	84 9f       	mul	r24, r20
     b2a:	60 0d       	add	r22, r0
     b2c:	21 1d       	adc	r18, r1
     b2e:	82 2f       	mov	r24, r18
     b30:	76 2f       	mov	r23, r22
     b32:	6a 2f       	mov	r22, r26
     b34:	11 24       	eor	r1, r1
     b36:	9f 57       	subi	r25, 0x7F	; 127
     b38:	50 40       	sbci	r21, 0x00	; 0
     b3a:	8a f0       	brmi	.+34     	; 0xb5e <__mulsf3_pse+0x84>
     b3c:	e1 f0       	breq	.+56     	; 0xb76 <__mulsf3_pse+0x9c>
     b3e:	88 23       	and	r24, r24
     b40:	4a f0       	brmi	.+18     	; 0xb54 <__mulsf3_pse+0x7a>
     b42:	ee 0f       	add	r30, r30
     b44:	ff 1f       	adc	r31, r31
     b46:	bb 1f       	adc	r27, r27
     b48:	66 1f       	adc	r22, r22
     b4a:	77 1f       	adc	r23, r23
     b4c:	88 1f       	adc	r24, r24
     b4e:	91 50       	subi	r25, 0x01	; 1
     b50:	50 40       	sbci	r21, 0x00	; 0
     b52:	a9 f7       	brne	.-22     	; 0xb3e <__mulsf3_pse+0x64>
     b54:	9e 3f       	cpi	r25, 0xFE	; 254
     b56:	51 05       	cpc	r21, r1
     b58:	70 f0       	brcs	.+28     	; 0xb76 <__mulsf3_pse+0x9c>
     b5a:	60 cf       	rjmp	.-320    	; 0xa1c <__fp_inf>
     b5c:	aa cf       	rjmp	.-172    	; 0xab2 <__fp_szero>
     b5e:	5f 3f       	cpi	r21, 0xFF	; 255
     b60:	ec f3       	brlt	.-6      	; 0xb5c <__mulsf3_pse+0x82>
     b62:	98 3e       	cpi	r25, 0xE8	; 232
     b64:	dc f3       	brlt	.-10     	; 0xb5c <__mulsf3_pse+0x82>
     b66:	86 95       	lsr	r24
     b68:	77 95       	ror	r23
     b6a:	67 95       	ror	r22
     b6c:	b7 95       	ror	r27
     b6e:	f7 95       	ror	r31
     b70:	e7 95       	ror	r30
     b72:	9f 5f       	subi	r25, 0xFF	; 255
     b74:	c1 f7       	brne	.-16     	; 0xb66 <__mulsf3_pse+0x8c>
     b76:	fe 2b       	or	r31, r30
     b78:	88 0f       	add	r24, r24
     b7a:	91 1d       	adc	r25, r1
     b7c:	96 95       	lsr	r25
     b7e:	87 95       	ror	r24
     b80:	97 f9       	bld	r25, 7
     b82:	08 95       	ret

00000b84 <__divmodhi4>:
     b84:	97 fb       	bst	r25, 7
     b86:	07 2e       	mov	r0, r23
     b88:	16 f4       	brtc	.+4      	; 0xb8e <__divmodhi4+0xa>
     b8a:	00 94       	com	r0
     b8c:	06 d0       	rcall	.+12     	; 0xb9a <__divmodhi4_neg1>
     b8e:	77 fd       	sbrc	r23, 7
     b90:	08 d0       	rcall	.+16     	; 0xba2 <__divmodhi4_neg2>
     b92:	0b d0       	rcall	.+22     	; 0xbaa <__udivmodhi4>
     b94:	07 fc       	sbrc	r0, 7
     b96:	05 d0       	rcall	.+10     	; 0xba2 <__divmodhi4_neg2>
     b98:	3e f4       	brtc	.+14     	; 0xba8 <__divmodhi4_exit>

00000b9a <__divmodhi4_neg1>:
     b9a:	90 95       	com	r25
     b9c:	81 95       	neg	r24
     b9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ba0:	08 95       	ret

00000ba2 <__divmodhi4_neg2>:
     ba2:	70 95       	com	r23
     ba4:	61 95       	neg	r22
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255

00000ba8 <__divmodhi4_exit>:
     ba8:	08 95       	ret

00000baa <__udivmodhi4>:
     baa:	aa 1b       	sub	r26, r26
     bac:	bb 1b       	sub	r27, r27
     bae:	51 e1       	ldi	r21, 0x11	; 17
     bb0:	07 c0       	rjmp	.+14     	; 0xbc0 <__udivmodhi4_ep>

00000bb2 <__udivmodhi4_loop>:
     bb2:	aa 1f       	adc	r26, r26
     bb4:	bb 1f       	adc	r27, r27
     bb6:	a6 17       	cp	r26, r22
     bb8:	b7 07       	cpc	r27, r23
     bba:	10 f0       	brcs	.+4      	; 0xbc0 <__udivmodhi4_ep>
     bbc:	a6 1b       	sub	r26, r22
     bbe:	b7 0b       	sbc	r27, r23

00000bc0 <__udivmodhi4_ep>:
     bc0:	88 1f       	adc	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	5a 95       	dec	r21
     bc6:	a9 f7       	brne	.-22     	; 0xbb2 <__udivmodhi4_loop>
     bc8:	80 95       	com	r24
     bca:	90 95       	com	r25
     bcc:	bc 01       	movw	r22, r24
     bce:	cd 01       	movw	r24, r26
     bd0:	08 95       	ret

00000bd2 <do_rand>:
     bd2:	8f 92       	push	r8
     bd4:	9f 92       	push	r9
     bd6:	af 92       	push	r10
     bd8:	bf 92       	push	r11
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	ec 01       	movw	r28, r24
     be8:	68 81       	ld	r22, Y
     bea:	79 81       	ldd	r23, Y+1	; 0x01
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	9b 81       	ldd	r25, Y+3	; 0x03
     bf0:	61 15       	cp	r22, r1
     bf2:	71 05       	cpc	r23, r1
     bf4:	81 05       	cpc	r24, r1
     bf6:	91 05       	cpc	r25, r1
     bf8:	21 f4       	brne	.+8      	; 0xc02 <do_rand+0x30>
     bfa:	64 e2       	ldi	r22, 0x24	; 36
     bfc:	79 ed       	ldi	r23, 0xD9	; 217
     bfe:	8b e5       	ldi	r24, 0x5B	; 91
     c00:	97 e0       	ldi	r25, 0x07	; 7
     c02:	2d e1       	ldi	r18, 0x1D	; 29
     c04:	33 ef       	ldi	r19, 0xF3	; 243
     c06:	41 e0       	ldi	r20, 0x01	; 1
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	13 d3       	rcall	.+1574   	; 0x1232 <__divmodsi4>
     c0c:	49 01       	movw	r8, r18
     c0e:	5a 01       	movw	r10, r20
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	a7 ea       	ldi	r26, 0xA7	; 167
     c16:	b1 e4       	ldi	r27, 0x41	; 65
     c18:	28 d3       	rcall	.+1616   	; 0x126a <__muluhisi3>
     c1a:	6b 01       	movw	r12, r22
     c1c:	7c 01       	movw	r14, r24
     c1e:	ac ee       	ldi	r26, 0xEC	; 236
     c20:	b4 ef       	ldi	r27, 0xF4	; 244
     c22:	a5 01       	movw	r20, r10
     c24:	94 01       	movw	r18, r8
     c26:	2d d3       	rcall	.+1626   	; 0x1282 <__mulohisi3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	8c 0d       	add	r24, r12
     c2e:	9d 1d       	adc	r25, r13
     c30:	ae 1d       	adc	r26, r14
     c32:	bf 1d       	adc	r27, r15
     c34:	b7 ff       	sbrs	r27, 7
     c36:	03 c0       	rjmp	.+6      	; 0xc3e <do_rand+0x6c>
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	a1 09       	sbc	r26, r1
     c3c:	b0 48       	sbci	r27, 0x80	; 128
     c3e:	88 83       	st	Y, r24
     c40:	99 83       	std	Y+1, r25	; 0x01
     c42:	aa 83       	std	Y+2, r26	; 0x02
     c44:	bb 83       	std	Y+3, r27	; 0x03
     c46:	9f 77       	andi	r25, 0x7F	; 127
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	9f 90       	pop	r9
     c5a:	8f 90       	pop	r8
     c5c:	08 95       	ret

00000c5e <rand_r>:
     c5e:	b9 cf       	rjmp	.-142    	; 0xbd2 <do_rand>

00000c60 <rand>:
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	b6 cf       	rjmp	.-148    	; 0xbd2 <do_rand>

00000c66 <srand>:
     c66:	a0 e0       	ldi	r26, 0x00	; 0
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c6e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c72:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     c76:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     c7a:	08 95       	ret

00000c7c <sprintf>:
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	2e 97       	sbiw	r28, 0x0e	; 14
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	0d 89       	ldd	r16, Y+21	; 0x15
     c96:	1e 89       	ldd	r17, Y+22	; 0x16
     c98:	86 e0       	ldi	r24, 0x06	; 6
     c9a:	8c 83       	std	Y+4, r24	; 0x04
     c9c:	1a 83       	std	Y+2, r17	; 0x02
     c9e:	09 83       	std	Y+1, r16	; 0x01
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	9f e7       	ldi	r25, 0x7F	; 127
     ca4:	9e 83       	std	Y+6, r25	; 0x06
     ca6:	8d 83       	std	Y+5, r24	; 0x05
     ca8:	ae 01       	movw	r20, r28
     caa:	47 5e       	subi	r20, 0xE7	; 231
     cac:	5f 4f       	sbci	r21, 0xFF	; 255
     cae:	6f 89       	ldd	r22, Y+23	; 0x17
     cb0:	78 8d       	ldd	r23, Y+24	; 0x18
     cb2:	ce 01       	movw	r24, r28
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	10 d0       	rcall	.+32     	; 0xcd8 <vfprintf>
     cb8:	ef 81       	ldd	r30, Y+7	; 0x07
     cba:	f8 85       	ldd	r31, Y+8	; 0x08
     cbc:	e0 0f       	add	r30, r16
     cbe:	f1 1f       	adc	r31, r17
     cc0:	10 82       	st	Z, r1
     cc2:	2e 96       	adiw	r28, 0x0e	; 14
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	08 95       	ret

00000cd8 <vfprintf>:
     cd8:	2f 92       	push	r2
     cda:	3f 92       	push	r3
     cdc:	4f 92       	push	r4
     cde:	5f 92       	push	r5
     ce0:	6f 92       	push	r6
     ce2:	7f 92       	push	r7
     ce4:	8f 92       	push	r8
     ce6:	9f 92       	push	r9
     ce8:	af 92       	push	r10
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	2b 97       	sbiw	r28, 0x0b	; 11
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	6c 01       	movw	r12, r24
     d0e:	7b 01       	movw	r14, r22
     d10:	8a 01       	movw	r16, r20
     d12:	fc 01       	movw	r30, r24
     d14:	17 82       	std	Z+7, r1	; 0x07
     d16:	16 82       	std	Z+6, r1	; 0x06
     d18:	83 81       	ldd	r24, Z+3	; 0x03
     d1a:	81 ff       	sbrs	r24, 1
     d1c:	bf c1       	rjmp	.+894    	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
     d1e:	ce 01       	movw	r24, r28
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	3c 01       	movw	r6, r24
     d24:	f6 01       	movw	r30, r12
     d26:	93 81       	ldd	r25, Z+3	; 0x03
     d28:	f7 01       	movw	r30, r14
     d2a:	93 fd       	sbrc	r25, 3
     d2c:	85 91       	lpm	r24, Z+
     d2e:	93 ff       	sbrs	r25, 3
     d30:	81 91       	ld	r24, Z+
     d32:	7f 01       	movw	r14, r30
     d34:	88 23       	and	r24, r24
     d36:	09 f4       	brne	.+2      	; 0xd3a <vfprintf+0x62>
     d38:	ad c1       	rjmp	.+858    	; 0x1094 <__DATA_REGION_LENGTH__+0x94>
     d3a:	85 32       	cpi	r24, 0x25	; 37
     d3c:	39 f4       	brne	.+14     	; 0xd4c <vfprintf+0x74>
     d3e:	93 fd       	sbrc	r25, 3
     d40:	85 91       	lpm	r24, Z+
     d42:	93 ff       	sbrs	r25, 3
     d44:	81 91       	ld	r24, Z+
     d46:	7f 01       	movw	r14, r30
     d48:	85 32       	cpi	r24, 0x25	; 37
     d4a:	21 f4       	brne	.+8      	; 0xd54 <vfprintf+0x7c>
     d4c:	b6 01       	movw	r22, r12
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	d6 d1       	rcall	.+940    	; 0x10fe <fputc>
     d52:	e8 cf       	rjmp	.-48     	; 0xd24 <vfprintf+0x4c>
     d54:	91 2c       	mov	r9, r1
     d56:	21 2c       	mov	r2, r1
     d58:	31 2c       	mov	r3, r1
     d5a:	ff e1       	ldi	r31, 0x1F	; 31
     d5c:	f3 15       	cp	r31, r3
     d5e:	d8 f0       	brcs	.+54     	; 0xd96 <vfprintf+0xbe>
     d60:	8b 32       	cpi	r24, 0x2B	; 43
     d62:	79 f0       	breq	.+30     	; 0xd82 <vfprintf+0xaa>
     d64:	38 f4       	brcc	.+14     	; 0xd74 <vfprintf+0x9c>
     d66:	80 32       	cpi	r24, 0x20	; 32
     d68:	79 f0       	breq	.+30     	; 0xd88 <vfprintf+0xb0>
     d6a:	83 32       	cpi	r24, 0x23	; 35
     d6c:	a1 f4       	brne	.+40     	; 0xd96 <vfprintf+0xbe>
     d6e:	23 2d       	mov	r18, r3
     d70:	20 61       	ori	r18, 0x10	; 16
     d72:	1d c0       	rjmp	.+58     	; 0xdae <vfprintf+0xd6>
     d74:	8d 32       	cpi	r24, 0x2D	; 45
     d76:	61 f0       	breq	.+24     	; 0xd90 <vfprintf+0xb8>
     d78:	80 33       	cpi	r24, 0x30	; 48
     d7a:	69 f4       	brne	.+26     	; 0xd96 <vfprintf+0xbe>
     d7c:	23 2d       	mov	r18, r3
     d7e:	21 60       	ori	r18, 0x01	; 1
     d80:	16 c0       	rjmp	.+44     	; 0xdae <vfprintf+0xd6>
     d82:	83 2d       	mov	r24, r3
     d84:	82 60       	ori	r24, 0x02	; 2
     d86:	38 2e       	mov	r3, r24
     d88:	e3 2d       	mov	r30, r3
     d8a:	e4 60       	ori	r30, 0x04	; 4
     d8c:	3e 2e       	mov	r3, r30
     d8e:	2a c0       	rjmp	.+84     	; 0xde4 <vfprintf+0x10c>
     d90:	f3 2d       	mov	r31, r3
     d92:	f8 60       	ori	r31, 0x08	; 8
     d94:	1d c0       	rjmp	.+58     	; 0xdd0 <vfprintf+0xf8>
     d96:	37 fc       	sbrc	r3, 7
     d98:	2d c0       	rjmp	.+90     	; 0xdf4 <vfprintf+0x11c>
     d9a:	20 ed       	ldi	r18, 0xD0	; 208
     d9c:	28 0f       	add	r18, r24
     d9e:	2a 30       	cpi	r18, 0x0A	; 10
     da0:	40 f0       	brcs	.+16     	; 0xdb2 <vfprintf+0xda>
     da2:	8e 32       	cpi	r24, 0x2E	; 46
     da4:	b9 f4       	brne	.+46     	; 0xdd4 <vfprintf+0xfc>
     da6:	36 fc       	sbrc	r3, 6
     da8:	75 c1       	rjmp	.+746    	; 0x1094 <__DATA_REGION_LENGTH__+0x94>
     daa:	23 2d       	mov	r18, r3
     dac:	20 64       	ori	r18, 0x40	; 64
     dae:	32 2e       	mov	r3, r18
     db0:	19 c0       	rjmp	.+50     	; 0xde4 <vfprintf+0x10c>
     db2:	36 fe       	sbrs	r3, 6
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <vfprintf+0xea>
     db6:	8a e0       	ldi	r24, 0x0A	; 10
     db8:	98 9e       	mul	r9, r24
     dba:	20 0d       	add	r18, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	92 2e       	mov	r9, r18
     dc0:	11 c0       	rjmp	.+34     	; 0xde4 <vfprintf+0x10c>
     dc2:	ea e0       	ldi	r30, 0x0A	; 10
     dc4:	2e 9e       	mul	r2, r30
     dc6:	20 0d       	add	r18, r0
     dc8:	11 24       	eor	r1, r1
     dca:	22 2e       	mov	r2, r18
     dcc:	f3 2d       	mov	r31, r3
     dce:	f0 62       	ori	r31, 0x20	; 32
     dd0:	3f 2e       	mov	r3, r31
     dd2:	08 c0       	rjmp	.+16     	; 0xde4 <vfprintf+0x10c>
     dd4:	8c 36       	cpi	r24, 0x6C	; 108
     dd6:	21 f4       	brne	.+8      	; 0xde0 <vfprintf+0x108>
     dd8:	83 2d       	mov	r24, r3
     dda:	80 68       	ori	r24, 0x80	; 128
     ddc:	38 2e       	mov	r3, r24
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <vfprintf+0x10c>
     de0:	88 36       	cpi	r24, 0x68	; 104
     de2:	41 f4       	brne	.+16     	; 0xdf4 <vfprintf+0x11c>
     de4:	f7 01       	movw	r30, r14
     de6:	93 fd       	sbrc	r25, 3
     de8:	85 91       	lpm	r24, Z+
     dea:	93 ff       	sbrs	r25, 3
     dec:	81 91       	ld	r24, Z+
     dee:	7f 01       	movw	r14, r30
     df0:	81 11       	cpse	r24, r1
     df2:	b3 cf       	rjmp	.-154    	; 0xd5a <vfprintf+0x82>
     df4:	98 2f       	mov	r25, r24
     df6:	9f 7d       	andi	r25, 0xDF	; 223
     df8:	95 54       	subi	r25, 0x45	; 69
     dfa:	93 30       	cpi	r25, 0x03	; 3
     dfc:	28 f4       	brcc	.+10     	; 0xe08 <vfprintf+0x130>
     dfe:	0c 5f       	subi	r16, 0xFC	; 252
     e00:	1f 4f       	sbci	r17, 0xFF	; 255
     e02:	9f e3       	ldi	r25, 0x3F	; 63
     e04:	99 83       	std	Y+1, r25	; 0x01
     e06:	0d c0       	rjmp	.+26     	; 0xe22 <vfprintf+0x14a>
     e08:	83 36       	cpi	r24, 0x63	; 99
     e0a:	31 f0       	breq	.+12     	; 0xe18 <vfprintf+0x140>
     e0c:	83 37       	cpi	r24, 0x73	; 115
     e0e:	71 f0       	breq	.+28     	; 0xe2c <vfprintf+0x154>
     e10:	83 35       	cpi	r24, 0x53	; 83
     e12:	09 f0       	breq	.+2      	; 0xe16 <vfprintf+0x13e>
     e14:	55 c0       	rjmp	.+170    	; 0xec0 <vfprintf+0x1e8>
     e16:	20 c0       	rjmp	.+64     	; 0xe58 <vfprintf+0x180>
     e18:	f8 01       	movw	r30, r16
     e1a:	80 81       	ld	r24, Z
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	0e 5f       	subi	r16, 0xFE	; 254
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	88 24       	eor	r8, r8
     e24:	83 94       	inc	r8
     e26:	91 2c       	mov	r9, r1
     e28:	53 01       	movw	r10, r6
     e2a:	12 c0       	rjmp	.+36     	; 0xe50 <vfprintf+0x178>
     e2c:	28 01       	movw	r4, r16
     e2e:	f2 e0       	ldi	r31, 0x02	; 2
     e30:	4f 0e       	add	r4, r31
     e32:	51 1c       	adc	r5, r1
     e34:	f8 01       	movw	r30, r16
     e36:	a0 80       	ld	r10, Z
     e38:	b1 80       	ldd	r11, Z+1	; 0x01
     e3a:	36 fe       	sbrs	r3, 6
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <vfprintf+0x16c>
     e3e:	69 2d       	mov	r22, r9
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x170>
     e44:	6f ef       	ldi	r22, 0xFF	; 255
     e46:	7f ef       	ldi	r23, 0xFF	; 255
     e48:	c5 01       	movw	r24, r10
     e4a:	4e d1       	rcall	.+668    	; 0x10e8 <strnlen>
     e4c:	4c 01       	movw	r8, r24
     e4e:	82 01       	movw	r16, r4
     e50:	f3 2d       	mov	r31, r3
     e52:	ff 77       	andi	r31, 0x7F	; 127
     e54:	3f 2e       	mov	r3, r31
     e56:	15 c0       	rjmp	.+42     	; 0xe82 <vfprintf+0x1aa>
     e58:	28 01       	movw	r4, r16
     e5a:	22 e0       	ldi	r18, 0x02	; 2
     e5c:	42 0e       	add	r4, r18
     e5e:	51 1c       	adc	r5, r1
     e60:	f8 01       	movw	r30, r16
     e62:	a0 80       	ld	r10, Z
     e64:	b1 80       	ldd	r11, Z+1	; 0x01
     e66:	36 fe       	sbrs	r3, 6
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <vfprintf+0x198>
     e6a:	69 2d       	mov	r22, r9
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <vfprintf+0x19c>
     e70:	6f ef       	ldi	r22, 0xFF	; 255
     e72:	7f ef       	ldi	r23, 0xFF	; 255
     e74:	c5 01       	movw	r24, r10
     e76:	2d d1       	rcall	.+602    	; 0x10d2 <strnlen_P>
     e78:	4c 01       	movw	r8, r24
     e7a:	f3 2d       	mov	r31, r3
     e7c:	f0 68       	ori	r31, 0x80	; 128
     e7e:	3f 2e       	mov	r3, r31
     e80:	82 01       	movw	r16, r4
     e82:	33 fc       	sbrc	r3, 3
     e84:	19 c0       	rjmp	.+50     	; 0xeb8 <vfprintf+0x1e0>
     e86:	82 2d       	mov	r24, r2
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	88 16       	cp	r8, r24
     e8c:	99 06       	cpc	r9, r25
     e8e:	a0 f4       	brcc	.+40     	; 0xeb8 <vfprintf+0x1e0>
     e90:	b6 01       	movw	r22, r12
     e92:	80 e2       	ldi	r24, 0x20	; 32
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	33 d1       	rcall	.+614    	; 0x10fe <fputc>
     e98:	2a 94       	dec	r2
     e9a:	f5 cf       	rjmp	.-22     	; 0xe86 <vfprintf+0x1ae>
     e9c:	f5 01       	movw	r30, r10
     e9e:	37 fc       	sbrc	r3, 7
     ea0:	85 91       	lpm	r24, Z+
     ea2:	37 fe       	sbrs	r3, 7
     ea4:	81 91       	ld	r24, Z+
     ea6:	5f 01       	movw	r10, r30
     ea8:	b6 01       	movw	r22, r12
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	28 d1       	rcall	.+592    	; 0x10fe <fputc>
     eae:	21 10       	cpse	r2, r1
     eb0:	2a 94       	dec	r2
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	82 1a       	sub	r8, r18
     eb6:	91 08       	sbc	r9, r1
     eb8:	81 14       	cp	r8, r1
     eba:	91 04       	cpc	r9, r1
     ebc:	79 f7       	brne	.-34     	; 0xe9c <vfprintf+0x1c4>
     ebe:	e1 c0       	rjmp	.+450    	; 0x1082 <__DATA_REGION_LENGTH__+0x82>
     ec0:	84 36       	cpi	r24, 0x64	; 100
     ec2:	11 f0       	breq	.+4      	; 0xec8 <vfprintf+0x1f0>
     ec4:	89 36       	cpi	r24, 0x69	; 105
     ec6:	39 f5       	brne	.+78     	; 0xf16 <vfprintf+0x23e>
     ec8:	f8 01       	movw	r30, r16
     eca:	37 fe       	sbrs	r3, 7
     ecc:	07 c0       	rjmp	.+14     	; 0xedc <vfprintf+0x204>
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	82 81       	ldd	r24, Z+2	; 0x02
     ed4:	93 81       	ldd	r25, Z+3	; 0x03
     ed6:	0c 5f       	subi	r16, 0xFC	; 252
     ed8:	1f 4f       	sbci	r17, 0xFF	; 255
     eda:	08 c0       	rjmp	.+16     	; 0xeec <vfprintf+0x214>
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	07 2e       	mov	r0, r23
     ee2:	00 0c       	add	r0, r0
     ee4:	88 0b       	sbc	r24, r24
     ee6:	99 0b       	sbc	r25, r25
     ee8:	0e 5f       	subi	r16, 0xFE	; 254
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	f3 2d       	mov	r31, r3
     eee:	ff 76       	andi	r31, 0x6F	; 111
     ef0:	3f 2e       	mov	r3, r31
     ef2:	97 ff       	sbrs	r25, 7
     ef4:	09 c0       	rjmp	.+18     	; 0xf08 <vfprintf+0x230>
     ef6:	90 95       	com	r25
     ef8:	80 95       	com	r24
     efa:	70 95       	com	r23
     efc:	61 95       	neg	r22
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	8f 4f       	sbci	r24, 0xFF	; 255
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	f0 68       	ori	r31, 0x80	; 128
     f06:	3f 2e       	mov	r3, r31
     f08:	2a e0       	ldi	r18, 0x0A	; 10
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	a3 01       	movw	r20, r6
     f0e:	33 d1       	rcall	.+614    	; 0x1176 <__ultoa_invert>
     f10:	88 2e       	mov	r8, r24
     f12:	86 18       	sub	r8, r6
     f14:	44 c0       	rjmp	.+136    	; 0xf9e <vfprintf+0x2c6>
     f16:	85 37       	cpi	r24, 0x75	; 117
     f18:	31 f4       	brne	.+12     	; 0xf26 <vfprintf+0x24e>
     f1a:	23 2d       	mov	r18, r3
     f1c:	2f 7e       	andi	r18, 0xEF	; 239
     f1e:	b2 2e       	mov	r11, r18
     f20:	2a e0       	ldi	r18, 0x0A	; 10
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	25 c0       	rjmp	.+74     	; 0xf70 <vfprintf+0x298>
     f26:	93 2d       	mov	r25, r3
     f28:	99 7f       	andi	r25, 0xF9	; 249
     f2a:	b9 2e       	mov	r11, r25
     f2c:	8f 36       	cpi	r24, 0x6F	; 111
     f2e:	c1 f0       	breq	.+48     	; 0xf60 <vfprintf+0x288>
     f30:	18 f4       	brcc	.+6      	; 0xf38 <vfprintf+0x260>
     f32:	88 35       	cpi	r24, 0x58	; 88
     f34:	79 f0       	breq	.+30     	; 0xf54 <vfprintf+0x27c>
     f36:	ae c0       	rjmp	.+348    	; 0x1094 <__DATA_REGION_LENGTH__+0x94>
     f38:	80 37       	cpi	r24, 0x70	; 112
     f3a:	19 f0       	breq	.+6      	; 0xf42 <vfprintf+0x26a>
     f3c:	88 37       	cpi	r24, 0x78	; 120
     f3e:	21 f0       	breq	.+8      	; 0xf48 <vfprintf+0x270>
     f40:	a9 c0       	rjmp	.+338    	; 0x1094 <__DATA_REGION_LENGTH__+0x94>
     f42:	e9 2f       	mov	r30, r25
     f44:	e0 61       	ori	r30, 0x10	; 16
     f46:	be 2e       	mov	r11, r30
     f48:	b4 fe       	sbrs	r11, 4
     f4a:	0d c0       	rjmp	.+26     	; 0xf66 <vfprintf+0x28e>
     f4c:	fb 2d       	mov	r31, r11
     f4e:	f4 60       	ori	r31, 0x04	; 4
     f50:	bf 2e       	mov	r11, r31
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <vfprintf+0x28e>
     f54:	34 fe       	sbrs	r3, 4
     f56:	0a c0       	rjmp	.+20     	; 0xf6c <vfprintf+0x294>
     f58:	29 2f       	mov	r18, r25
     f5a:	26 60       	ori	r18, 0x06	; 6
     f5c:	b2 2e       	mov	r11, r18
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <vfprintf+0x294>
     f60:	28 e0       	ldi	r18, 0x08	; 8
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <vfprintf+0x298>
     f66:	20 e1       	ldi	r18, 0x10	; 16
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <vfprintf+0x298>
     f6c:	20 e1       	ldi	r18, 0x10	; 16
     f6e:	32 e0       	ldi	r19, 0x02	; 2
     f70:	f8 01       	movw	r30, r16
     f72:	b7 fe       	sbrs	r11, 7
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <vfprintf+0x2ac>
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	0c 5f       	subi	r16, 0xFC	; 252
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <vfprintf+0x2b8>
     f84:	60 81       	ld	r22, Z
     f86:	71 81       	ldd	r23, Z+1	; 0x01
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 5f       	subi	r16, 0xFE	; 254
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	a3 01       	movw	r20, r6
     f92:	f1 d0       	rcall	.+482    	; 0x1176 <__ultoa_invert>
     f94:	88 2e       	mov	r8, r24
     f96:	86 18       	sub	r8, r6
     f98:	fb 2d       	mov	r31, r11
     f9a:	ff 77       	andi	r31, 0x7F	; 127
     f9c:	3f 2e       	mov	r3, r31
     f9e:	36 fe       	sbrs	r3, 6
     fa0:	0d c0       	rjmp	.+26     	; 0xfbc <vfprintf+0x2e4>
     fa2:	23 2d       	mov	r18, r3
     fa4:	2e 7f       	andi	r18, 0xFE	; 254
     fa6:	a2 2e       	mov	r10, r18
     fa8:	89 14       	cp	r8, r9
     faa:	58 f4       	brcc	.+22     	; 0xfc2 <vfprintf+0x2ea>
     fac:	34 fe       	sbrs	r3, 4
     fae:	0b c0       	rjmp	.+22     	; 0xfc6 <vfprintf+0x2ee>
     fb0:	32 fc       	sbrc	r3, 2
     fb2:	09 c0       	rjmp	.+18     	; 0xfc6 <vfprintf+0x2ee>
     fb4:	83 2d       	mov	r24, r3
     fb6:	8e 7e       	andi	r24, 0xEE	; 238
     fb8:	a8 2e       	mov	r10, r24
     fba:	05 c0       	rjmp	.+10     	; 0xfc6 <vfprintf+0x2ee>
     fbc:	b8 2c       	mov	r11, r8
     fbe:	a3 2c       	mov	r10, r3
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <vfprintf+0x2f0>
     fc2:	b8 2c       	mov	r11, r8
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <vfprintf+0x2f0>
     fc6:	b9 2c       	mov	r11, r9
     fc8:	a4 fe       	sbrs	r10, 4
     fca:	0f c0       	rjmp	.+30     	; 0xfea <vfprintf+0x312>
     fcc:	fe 01       	movw	r30, r28
     fce:	e8 0d       	add	r30, r8
     fd0:	f1 1d       	adc	r31, r1
     fd2:	80 81       	ld	r24, Z
     fd4:	80 33       	cpi	r24, 0x30	; 48
     fd6:	21 f4       	brne	.+8      	; 0xfe0 <vfprintf+0x308>
     fd8:	9a 2d       	mov	r25, r10
     fda:	99 7e       	andi	r25, 0xE9	; 233
     fdc:	a9 2e       	mov	r10, r25
     fde:	09 c0       	rjmp	.+18     	; 0xff2 <vfprintf+0x31a>
     fe0:	a2 fe       	sbrs	r10, 2
     fe2:	06 c0       	rjmp	.+12     	; 0xff0 <vfprintf+0x318>
     fe4:	b3 94       	inc	r11
     fe6:	b3 94       	inc	r11
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <vfprintf+0x31a>
     fea:	8a 2d       	mov	r24, r10
     fec:	86 78       	andi	r24, 0x86	; 134
     fee:	09 f0       	breq	.+2      	; 0xff2 <vfprintf+0x31a>
     ff0:	b3 94       	inc	r11
     ff2:	a3 fc       	sbrc	r10, 3
     ff4:	10 c0       	rjmp	.+32     	; 0x1016 <__DATA_REGION_LENGTH__+0x16>
     ff6:	a0 fe       	sbrs	r10, 0
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     ffa:	b2 14       	cp	r11, r2
     ffc:	80 f4       	brcc	.+32     	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
     ffe:	28 0c       	add	r2, r8
    1000:	92 2c       	mov	r9, r2
    1002:	9b 18       	sub	r9, r11
    1004:	0d c0       	rjmp	.+26     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
    1006:	b2 14       	cp	r11, r2
    1008:	58 f4       	brcc	.+22     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
    100a:	b6 01       	movw	r22, r12
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	76 d0       	rcall	.+236    	; 0x10fe <fputc>
    1012:	b3 94       	inc	r11
    1014:	f8 cf       	rjmp	.-16     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
    1016:	b2 14       	cp	r11, r2
    1018:	18 f4       	brcc	.+6      	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
    101a:	2b 18       	sub	r2, r11
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    101e:	98 2c       	mov	r9, r8
    1020:	21 2c       	mov	r2, r1
    1022:	a4 fe       	sbrs	r10, 4
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
    1026:	b6 01       	movw	r22, r12
    1028:	80 e3       	ldi	r24, 0x30	; 48
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	68 d0       	rcall	.+208    	; 0x10fe <fputc>
    102e:	a2 fe       	sbrs	r10, 2
    1030:	16 c0       	rjmp	.+44     	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    1032:	a1 fc       	sbrc	r10, 1
    1034:	03 c0       	rjmp	.+6      	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1036:	88 e7       	ldi	r24, 0x78	; 120
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    103c:	88 e5       	ldi	r24, 0x58	; 88
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	b6 01       	movw	r22, r12
    1042:	0c c0       	rjmp	.+24     	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
    1044:	8a 2d       	mov	r24, r10
    1046:	86 78       	andi	r24, 0x86	; 134
    1048:	51 f0       	breq	.+20     	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    104a:	a1 fe       	sbrs	r10, 1
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    104e:	8b e2       	ldi	r24, 0x2B	; 43
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    1052:	80 e2       	ldi	r24, 0x20	; 32
    1054:	a7 fc       	sbrc	r10, 7
    1056:	8d e2       	ldi	r24, 0x2D	; 45
    1058:	b6 01       	movw	r22, r12
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	50 d0       	rcall	.+160    	; 0x10fe <fputc>
    105e:	89 14       	cp	r8, r9
    1060:	30 f4       	brcc	.+12     	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    1062:	b6 01       	movw	r22, r12
    1064:	80 e3       	ldi	r24, 0x30	; 48
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	4a d0       	rcall	.+148    	; 0x10fe <fputc>
    106a:	9a 94       	dec	r9
    106c:	f8 cf       	rjmp	.-16     	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    106e:	8a 94       	dec	r8
    1070:	f3 01       	movw	r30, r6
    1072:	e8 0d       	add	r30, r8
    1074:	f1 1d       	adc	r31, r1
    1076:	80 81       	ld	r24, Z
    1078:	b6 01       	movw	r22, r12
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	40 d0       	rcall	.+128    	; 0x10fe <fputc>
    107e:	81 10       	cpse	r8, r1
    1080:	f6 cf       	rjmp	.-20     	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    1082:	22 20       	and	r2, r2
    1084:	09 f4       	brne	.+2      	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    1086:	4e ce       	rjmp	.-868    	; 0xd24 <vfprintf+0x4c>
    1088:	b6 01       	movw	r22, r12
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	37 d0       	rcall	.+110    	; 0x10fe <fputc>
    1090:	2a 94       	dec	r2
    1092:	f7 cf       	rjmp	.-18     	; 0x1082 <__DATA_REGION_LENGTH__+0x82>
    1094:	f6 01       	movw	r30, r12
    1096:	86 81       	ldd	r24, Z+6	; 0x06
    1098:	97 81       	ldd	r25, Z+7	; 0x07
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <__DATA_REGION_LENGTH__+0xa0>
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	9f ef       	ldi	r25, 0xFF	; 255
    10a0:	2b 96       	adiw	r28, 0x0b	; 11
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	bf 90       	pop	r11
    10be:	af 90       	pop	r10
    10c0:	9f 90       	pop	r9
    10c2:	8f 90       	pop	r8
    10c4:	7f 90       	pop	r7
    10c6:	6f 90       	pop	r6
    10c8:	5f 90       	pop	r5
    10ca:	4f 90       	pop	r4
    10cc:	3f 90       	pop	r3
    10ce:	2f 90       	pop	r2
    10d0:	08 95       	ret

000010d2 <strnlen_P>:
    10d2:	fc 01       	movw	r30, r24
    10d4:	05 90       	lpm	r0, Z+
    10d6:	61 50       	subi	r22, 0x01	; 1
    10d8:	70 40       	sbci	r23, 0x00	; 0
    10da:	01 10       	cpse	r0, r1
    10dc:	d8 f7       	brcc	.-10     	; 0x10d4 <strnlen_P+0x2>
    10de:	80 95       	com	r24
    10e0:	90 95       	com	r25
    10e2:	8e 0f       	add	r24, r30
    10e4:	9f 1f       	adc	r25, r31
    10e6:	08 95       	ret

000010e8 <strnlen>:
    10e8:	fc 01       	movw	r30, r24
    10ea:	61 50       	subi	r22, 0x01	; 1
    10ec:	70 40       	sbci	r23, 0x00	; 0
    10ee:	01 90       	ld	r0, Z+
    10f0:	01 10       	cpse	r0, r1
    10f2:	d8 f7       	brcc	.-10     	; 0x10ea <strnlen+0x2>
    10f4:	80 95       	com	r24
    10f6:	90 95       	com	r25
    10f8:	8e 0f       	add	r24, r30
    10fa:	9f 1f       	adc	r25, r31
    10fc:	08 95       	ret

000010fe <fputc>:
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	fb 01       	movw	r30, r22
    1108:	23 81       	ldd	r18, Z+3	; 0x03
    110a:	21 fd       	sbrc	r18, 1
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <__stack+0x15>
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	9f ef       	ldi	r25, 0xFF	; 255
    1112:	2c c0       	rjmp	.+88     	; 0x116c <__stack+0x6d>
    1114:	22 ff       	sbrs	r18, 2
    1116:	16 c0       	rjmp	.+44     	; 0x1144 <__stack+0x45>
    1118:	46 81       	ldd	r20, Z+6	; 0x06
    111a:	57 81       	ldd	r21, Z+7	; 0x07
    111c:	24 81       	ldd	r18, Z+4	; 0x04
    111e:	35 81       	ldd	r19, Z+5	; 0x05
    1120:	42 17       	cp	r20, r18
    1122:	53 07       	cpc	r21, r19
    1124:	44 f4       	brge	.+16     	; 0x1136 <__stack+0x37>
    1126:	a0 81       	ld	r26, Z
    1128:	b1 81       	ldd	r27, Z+1	; 0x01
    112a:	9d 01       	movw	r18, r26
    112c:	2f 5f       	subi	r18, 0xFF	; 255
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	31 83       	std	Z+1, r19	; 0x01
    1132:	20 83       	st	Z, r18
    1134:	8c 93       	st	X, r24
    1136:	26 81       	ldd	r18, Z+6	; 0x06
    1138:	37 81       	ldd	r19, Z+7	; 0x07
    113a:	2f 5f       	subi	r18, 0xFF	; 255
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	37 83       	std	Z+7, r19	; 0x07
    1140:	26 83       	std	Z+6, r18	; 0x06
    1142:	14 c0       	rjmp	.+40     	; 0x116c <__stack+0x6d>
    1144:	8b 01       	movw	r16, r22
    1146:	ec 01       	movw	r28, r24
    1148:	fb 01       	movw	r30, r22
    114a:	00 84       	ldd	r0, Z+8	; 0x08
    114c:	f1 85       	ldd	r31, Z+9	; 0x09
    114e:	e0 2d       	mov	r30, r0
    1150:	09 95       	icall
    1152:	89 2b       	or	r24, r25
    1154:	e1 f6       	brne	.-72     	; 0x110e <__stack+0xf>
    1156:	d8 01       	movw	r26, r16
    1158:	16 96       	adiw	r26, 0x06	; 6
    115a:	8d 91       	ld	r24, X+
    115c:	9c 91       	ld	r25, X
    115e:	17 97       	sbiw	r26, 0x07	; 7
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	17 96       	adiw	r26, 0x07	; 7
    1164:	9c 93       	st	X, r25
    1166:	8e 93       	st	-X, r24
    1168:	16 97       	sbiw	r26, 0x06	; 6
    116a:	ce 01       	movw	r24, r28
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <__ultoa_invert>:
    1176:	fa 01       	movw	r30, r20
    1178:	aa 27       	eor	r26, r26
    117a:	28 30       	cpi	r18, 0x08	; 8
    117c:	51 f1       	breq	.+84     	; 0x11d2 <__ultoa_invert+0x5c>
    117e:	20 31       	cpi	r18, 0x10	; 16
    1180:	81 f1       	breq	.+96     	; 0x11e2 <__ultoa_invert+0x6c>
    1182:	e8 94       	clt
    1184:	6f 93       	push	r22
    1186:	6e 7f       	andi	r22, 0xFE	; 254
    1188:	6e 5f       	subi	r22, 0xFE	; 254
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	8f 4f       	sbci	r24, 0xFF	; 255
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	af 4f       	sbci	r26, 0xFF	; 255
    1192:	b1 e0       	ldi	r27, 0x01	; 1
    1194:	3e d0       	rcall	.+124    	; 0x1212 <__ultoa_invert+0x9c>
    1196:	b4 e0       	ldi	r27, 0x04	; 4
    1198:	3c d0       	rcall	.+120    	; 0x1212 <__ultoa_invert+0x9c>
    119a:	67 0f       	add	r22, r23
    119c:	78 1f       	adc	r23, r24
    119e:	89 1f       	adc	r24, r25
    11a0:	9a 1f       	adc	r25, r26
    11a2:	a1 1d       	adc	r26, r1
    11a4:	68 0f       	add	r22, r24
    11a6:	79 1f       	adc	r23, r25
    11a8:	8a 1f       	adc	r24, r26
    11aa:	91 1d       	adc	r25, r1
    11ac:	a1 1d       	adc	r26, r1
    11ae:	6a 0f       	add	r22, r26
    11b0:	71 1d       	adc	r23, r1
    11b2:	81 1d       	adc	r24, r1
    11b4:	91 1d       	adc	r25, r1
    11b6:	a1 1d       	adc	r26, r1
    11b8:	20 d0       	rcall	.+64     	; 0x11fa <__ultoa_invert+0x84>
    11ba:	09 f4       	brne	.+2      	; 0x11be <__ultoa_invert+0x48>
    11bc:	68 94       	set
    11be:	3f 91       	pop	r19
    11c0:	2a e0       	ldi	r18, 0x0A	; 10
    11c2:	26 9f       	mul	r18, r22
    11c4:	11 24       	eor	r1, r1
    11c6:	30 19       	sub	r19, r0
    11c8:	30 5d       	subi	r19, 0xD0	; 208
    11ca:	31 93       	st	Z+, r19
    11cc:	de f6       	brtc	.-74     	; 0x1184 <__ultoa_invert+0xe>
    11ce:	cf 01       	movw	r24, r30
    11d0:	08 95       	ret
    11d2:	46 2f       	mov	r20, r22
    11d4:	47 70       	andi	r20, 0x07	; 7
    11d6:	40 5d       	subi	r20, 0xD0	; 208
    11d8:	41 93       	st	Z+, r20
    11da:	b3 e0       	ldi	r27, 0x03	; 3
    11dc:	0f d0       	rcall	.+30     	; 0x11fc <__ultoa_invert+0x86>
    11de:	c9 f7       	brne	.-14     	; 0x11d2 <__ultoa_invert+0x5c>
    11e0:	f6 cf       	rjmp	.-20     	; 0x11ce <__ultoa_invert+0x58>
    11e2:	46 2f       	mov	r20, r22
    11e4:	4f 70       	andi	r20, 0x0F	; 15
    11e6:	40 5d       	subi	r20, 0xD0	; 208
    11e8:	4a 33       	cpi	r20, 0x3A	; 58
    11ea:	18 f0       	brcs	.+6      	; 0x11f2 <__ultoa_invert+0x7c>
    11ec:	49 5d       	subi	r20, 0xD9	; 217
    11ee:	31 fd       	sbrc	r19, 1
    11f0:	40 52       	subi	r20, 0x20	; 32
    11f2:	41 93       	st	Z+, r20
    11f4:	02 d0       	rcall	.+4      	; 0x11fa <__ultoa_invert+0x84>
    11f6:	a9 f7       	brne	.-22     	; 0x11e2 <__ultoa_invert+0x6c>
    11f8:	ea cf       	rjmp	.-44     	; 0x11ce <__ultoa_invert+0x58>
    11fa:	b4 e0       	ldi	r27, 0x04	; 4
    11fc:	a6 95       	lsr	r26
    11fe:	97 95       	ror	r25
    1200:	87 95       	ror	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	ba 95       	dec	r27
    1208:	c9 f7       	brne	.-14     	; 0x11fc <__ultoa_invert+0x86>
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	61 05       	cpc	r22, r1
    120e:	71 05       	cpc	r23, r1
    1210:	08 95       	ret
    1212:	9b 01       	movw	r18, r22
    1214:	ac 01       	movw	r20, r24
    1216:	0a 2e       	mov	r0, r26
    1218:	06 94       	lsr	r0
    121a:	57 95       	ror	r21
    121c:	47 95       	ror	r20
    121e:	37 95       	ror	r19
    1220:	27 95       	ror	r18
    1222:	ba 95       	dec	r27
    1224:	c9 f7       	brne	.-14     	; 0x1218 <__ultoa_invert+0xa2>
    1226:	62 0f       	add	r22, r18
    1228:	73 1f       	adc	r23, r19
    122a:	84 1f       	adc	r24, r20
    122c:	95 1f       	adc	r25, r21
    122e:	a0 1d       	adc	r26, r0
    1230:	08 95       	ret

00001232 <__divmodsi4>:
    1232:	05 2e       	mov	r0, r21
    1234:	97 fb       	bst	r25, 7
    1236:	16 f4       	brtc	.+4      	; 0x123c <__divmodsi4+0xa>
    1238:	00 94       	com	r0
    123a:	0f d0       	rcall	.+30     	; 0x125a <__negsi2>
    123c:	57 fd       	sbrc	r21, 7
    123e:	05 d0       	rcall	.+10     	; 0x124a <__divmodsi4_neg2>
    1240:	24 d0       	rcall	.+72     	; 0x128a <__udivmodsi4>
    1242:	07 fc       	sbrc	r0, 7
    1244:	02 d0       	rcall	.+4      	; 0x124a <__divmodsi4_neg2>
    1246:	46 f4       	brtc	.+16     	; 0x1258 <__divmodsi4_exit>
    1248:	08 c0       	rjmp	.+16     	; 0x125a <__negsi2>

0000124a <__divmodsi4_neg2>:
    124a:	50 95       	com	r21
    124c:	40 95       	com	r20
    124e:	30 95       	com	r19
    1250:	21 95       	neg	r18
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	4f 4f       	sbci	r20, 0xFF	; 255
    1256:	5f 4f       	sbci	r21, 0xFF	; 255

00001258 <__divmodsi4_exit>:
    1258:	08 95       	ret

0000125a <__negsi2>:
    125a:	90 95       	com	r25
    125c:	80 95       	com	r24
    125e:	70 95       	com	r23
    1260:	61 95       	neg	r22
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	08 95       	ret

0000126a <__muluhisi3>:
    126a:	31 d0       	rcall	.+98     	; 0x12ce <__umulhisi3>
    126c:	a5 9f       	mul	r26, r21
    126e:	90 0d       	add	r25, r0
    1270:	b4 9f       	mul	r27, r20
    1272:	90 0d       	add	r25, r0
    1274:	a4 9f       	mul	r26, r20
    1276:	80 0d       	add	r24, r0
    1278:	91 1d       	adc	r25, r1
    127a:	11 24       	eor	r1, r1
    127c:	08 95       	ret

0000127e <__mulshisi3>:
    127e:	b7 ff       	sbrs	r27, 7
    1280:	f4 cf       	rjmp	.-24     	; 0x126a <__muluhisi3>

00001282 <__mulohisi3>:
    1282:	f3 df       	rcall	.-26     	; 0x126a <__muluhisi3>
    1284:	82 1b       	sub	r24, r18
    1286:	93 0b       	sbc	r25, r19
    1288:	08 95       	ret

0000128a <__udivmodsi4>:
    128a:	a1 e2       	ldi	r26, 0x21	; 33
    128c:	1a 2e       	mov	r1, r26
    128e:	aa 1b       	sub	r26, r26
    1290:	bb 1b       	sub	r27, r27
    1292:	fd 01       	movw	r30, r26
    1294:	0d c0       	rjmp	.+26     	; 0x12b0 <__udivmodsi4_ep>

00001296 <__udivmodsi4_loop>:
    1296:	aa 1f       	adc	r26, r26
    1298:	bb 1f       	adc	r27, r27
    129a:	ee 1f       	adc	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	a2 17       	cp	r26, r18
    12a0:	b3 07       	cpc	r27, r19
    12a2:	e4 07       	cpc	r30, r20
    12a4:	f5 07       	cpc	r31, r21
    12a6:	20 f0       	brcs	.+8      	; 0x12b0 <__udivmodsi4_ep>
    12a8:	a2 1b       	sub	r26, r18
    12aa:	b3 0b       	sbc	r27, r19
    12ac:	e4 0b       	sbc	r30, r20
    12ae:	f5 0b       	sbc	r31, r21

000012b0 <__udivmodsi4_ep>:
    12b0:	66 1f       	adc	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	88 1f       	adc	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	1a 94       	dec	r1
    12ba:	69 f7       	brne	.-38     	; 0x1296 <__udivmodsi4_loop>
    12bc:	60 95       	com	r22
    12be:	70 95       	com	r23
    12c0:	80 95       	com	r24
    12c2:	90 95       	com	r25
    12c4:	9b 01       	movw	r18, r22
    12c6:	ac 01       	movw	r20, r24
    12c8:	bd 01       	movw	r22, r26
    12ca:	cf 01       	movw	r24, r30
    12cc:	08 95       	ret

000012ce <__umulhisi3>:
    12ce:	a2 9f       	mul	r26, r18
    12d0:	b0 01       	movw	r22, r0
    12d2:	b3 9f       	mul	r27, r19
    12d4:	c0 01       	movw	r24, r0
    12d6:	a3 9f       	mul	r26, r19
    12d8:	70 0d       	add	r23, r0
    12da:	81 1d       	adc	r24, r1
    12dc:	11 24       	eor	r1, r1
    12de:	91 1d       	adc	r25, r1
    12e0:	b2 9f       	mul	r27, r18
    12e2:	70 0d       	add	r23, r0
    12e4:	81 1d       	adc	r24, r1
    12e6:	11 24       	eor	r1, r1
    12e8:	91 1d       	adc	r25, r1
    12ea:	08 95       	ret

000012ec <_exit>:
    12ec:	f8 94       	cli

000012ee <__stop_program>:
    12ee:	ff cf       	rjmp	.-2      	; 0x12ee <__stop_program>
