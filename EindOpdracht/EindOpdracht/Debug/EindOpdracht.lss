
EindOpdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  0000136a  000013fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000136a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008001ca  008001ca  000014c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000186a  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e08  00000000  00000000  00002f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1f  00000000  00000000  00003d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  0000493c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085b  00000000  00000000  00004ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b8  00000000  00000000  00005503  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005ebb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c3       	rjmp	.+1960   	; 0x7da <__vector_12>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e6       	ldi	r30, 0x6A	; 106
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3c       	cpi	r26, 0xCA	; 202
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	aa ec       	ldi	r26, 0xCA	; 202
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3d       	cpi	r26, 0xD9	; 217
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	10 d4       	rcall	.+2080   	; 0x8e4 <main>
      c4:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <switch_channel>:
}

// This function changes the channel of the accelerometer.
static void switch_channel(){
	static int channel = -1;
	if (channel == -1){
      ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channel.1627>
      ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channel.1627+0x1>
      d2:	8f 3f       	cpi	r24, 0xFF	; 255
      d4:	2f ef       	ldi	r18, 0xFF	; 255
      d6:	92 07       	cpc	r25, r18
      d8:	39 f4       	brne	.+14     	; 0xe8 <switch_channel+0x1e>
		channel = 3;
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
      e6:	0d c0       	rjmp	.+26     	; 0x102 <switch_channel+0x38>
		} else {
		channel++;
      e8:	01 96       	adiw	r24, 0x01	; 1
      ea:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
		if (channel > 5){
      f2:	06 97       	sbiw	r24, 0x06	; 6
      f4:	34 f0       	brlt	.+12     	; 0x102 <switch_channel+0x38>
			channel = 3;
      f6:	83 e0       	ldi	r24, 0x03	; 3
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <channel.1627+0x1>
      fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <channel.1627>
		}
	}
	// Clearing
	int temporary =  0b11000000;
	temporary |= channel;
     102:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <channel.1627>
     106:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <channel.1627+0x1>
     10a:	80 6c       	ori	r24, 0xC0	; 192
	
	// Adding
	ADMUX = temporary;
     10c:	87 b9       	out	0x07, r24	; 7
     10e:	08 95       	ret

00000110 <translate_to_geforce>:
static int translate_to_geforce(int raw){
	//float fraction =  ((float)raw - (1170.0 / 2.0)) / 1170.0;
	//float scaled = fraction * 30000.0;
	//return (int) scaled;
	return raw;
}
     110:	08 95       	ret

00000112 <read_acc_direction>:
	
	return measurment;
}

// Reads one channel at a time.
static void read_acc_direction(int* ptr){
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	ec 01       	movw	r28, r24
	switch_channel();
     118:	d8 df       	rcall	.-80     	; 0xca <switch_channel>
	ADCSRA |= BIT(6);
     11a:	86 b1       	in	r24, 0x06	; 6
     11c:	80 64       	ori	r24, 0x40	; 64
     11e:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & BIT(6));
     120:	36 99       	sbic	0x06, 6	; 6
     122:	fe cf       	rjmp	.-4      	; 0x120 <read_acc_direction+0xe>
	int value = ADCL + (ADCH<<8);
     124:	24 b1       	in	r18, 0x04	; 4
     126:	85 b1       	in	r24, 0x05	; 5
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	98 2f       	mov	r25, r24
     12c:	88 27       	eor	r24, r24
	*ptr = translate_to_geforce(value);
     12e:	82 0f       	add	r24, r18
     130:	91 1d       	adc	r25, r1
     132:	ee df       	rcall	.-36     	; 0x110 <translate_to_geforce>
     134:	99 83       	std	Y+1, r25	; 0x01
     136:	88 83       	st	Y, r24
}
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <accelerometer_init>:
static void switch_channel();
static int translate_to_geforce(int raw);


void accelerometer_init(){
	DDRF = 0x00;				// Setting ADC pins to input.
     13e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	ADMUX = 0b11000000;			// AREF=VCC, result left adjusted, channel1 at pin PF1
     142:	80 ec       	ldi	r24, 0xC0	; 192
     144:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;		// ADC-enable, no interrupt, start, free running, division by 64
     146:	86 e8       	ldi	r24, 0x86	; 134
     148:	86 b9       	out	0x06, r24	; 6
     14a:	08 95       	ret

0000014c <accelerometer_read>:
}

// Reads the accelerometer.
accelerometer_measurment_t accelerometer_read(){
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	2c 97       	sbiw	r28, 0x0c	; 12
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
	accelerometer_measurment_t measurment;
	
	// Reading all values
	read_acc_direction(&measurment.x_geforce);
     160:	ce 01       	movw	r24, r28
     162:	07 96       	adiw	r24, 0x07	; 7
     164:	d6 df       	rcall	.-84     	; 0x112 <read_acc_direction>
	read_acc_direction(&measurment.y_geforce);
     166:	ce 01       	movw	r24, r28
     168:	09 96       	adiw	r24, 0x09	; 9
     16a:	d3 df       	rcall	.-90     	; 0x112 <read_acc_direction>
	read_acc_direction(&measurment.z_geforce);
     16c:	ce 01       	movw	r24, r28
     16e:	0b 96       	adiw	r24, 0x0b	; 11
     170:	d0 df       	rcall	.-96     	; 0x112 <read_acc_direction>
	
	return measurment;
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	fe 01       	movw	r30, r28
     176:	37 96       	adiw	r30, 0x07	; 7
     178:	de 01       	movw	r26, r28
     17a:	11 96       	adiw	r26, 0x01	; 1
     17c:	01 90       	ld	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	8a 95       	dec	r24
     182:	e1 f7       	brne	.-8      	; 0x17c <accelerometer_read+0x30>
     184:	29 81       	ldd	r18, Y+1	; 0x01
     186:	3a 81       	ldd	r19, Y+2	; 0x02
     188:	4b 81       	ldd	r20, Y+3	; 0x03
     18a:	5c 81       	ldd	r21, Y+4	; 0x04
     18c:	6d 81       	ldd	r22, Y+5	; 0x05
     18e:	7e 81       	ldd	r23, Y+6	; 0x06
}
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	2c 96       	adiw	r28, 0x0c	; 12
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	cd bf       	out	0x3d, r28	; 61
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <time_passed>:
    return directions[randomNumber()];
}

/* This is a funtion called by the interrupt of the timer and kills the loop of the game.*/
void time_passed(){
	isroundstarted = false;
     1a6:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__data_end>
     1aa:	08 95       	ret

000001ac <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b2:	ef ec       	ldi	r30, 0xCF	; 207
     1b4:	f7 e0       	ldi	r31, 0x07	; 7
     1b6:	31 97       	sbiw	r30, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <wait+0xa>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <wait+0x10>
     1bc:	00 00       	nop
     1be:	2f 5f       	subi	r18, 0xFF	; 255
     1c0:	3f 4f       	sbci	r19, 0xFF	; 255
     1c2:	28 17       	cp	r18, r24
     1c4:	39 07       	cpc	r19, r25
     1c6:	ac f3       	brlt	.-22     	; 0x1b2 <wait+0x6>
	{
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
     1c8:	08 95       	ret

000001ca <GameLogic_Init>:

/* This function is used for initing the game*/
GAMELOGIC_ERROR GameLogic_Init()
{
	display_init();
     1ca:	e3 d2       	rcall	.+1478   	; 0x792 <display_init>
	accelerometer_init();
     1cc:	b8 df       	rcall	.-144    	; 0x13e <accelerometer_init>
     1ce:	1a ba       	out	0x1a, r1	; 26
	
	DDRA = 0x0;
     1d0:	8e e1       	ldi	r24, 0x1E	; 30
	display_text("Starting up game");
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	88 d2       	rcall	.+1296   	; 0x6e6 <display_text>
     1d6:	61 e0       	ldi	r22, 0x01	; 1
	display_set_cursor(0,1);
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	9f d2       	rcall	.+1342   	; 0x71e <display_set_cursor>
	display_text("Press PA7...");
     1e0:	8f e2       	ldi	r24, 0x2F	; 47
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	80 d2       	rcall	.+1280   	; 0x6e6 <display_text>
	while(PINA != 0b10000000);//Waiting to press button
     1e6:	89 b3       	in	r24, 0x19	; 25
     1e8:	80 38       	cpi	r24, 0x80	; 128
     1ea:	e9 f7       	brne	.-6      	; 0x1e6 <GameLogic_Init+0x1c>
	TRESHOLD_MEASURMENT = accelerometer_read();
     1ec:	af df       	rcall	.-162    	; 0x14c <accelerometer_read>
     1ee:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <TRESHOLD_MEASURMENT>
     1f2:	30 93 cc 01 	sts	0x01CC, r19	; 0x8001cc <TRESHOLD_MEASURMENT+0x1>
     1f6:	40 93 cd 01 	sts	0x01CD, r20	; 0x8001cd <TRESHOLD_MEASURMENT+0x2>
     1fa:	50 93 ce 01 	sts	0x01CE, r21	; 0x8001ce <TRESHOLD_MEASURMENT+0x3>
     1fe:	60 93 cf 01 	sts	0x01CF, r22	; 0x8001cf <TRESHOLD_MEASURMENT+0x4>
     202:	70 93 d0 01 	sts	0x01D0, r23	; 0x8001d0 <TRESHOLD_MEASURMENT+0x5>
     206:	83 e0       	ldi	r24, 0x03	; 3
	
	return UNKNOWN;
}
     208:	08 95       	ret

0000020a <randomNumber>:
     20a:	ef 92       	push	r14

/* This function is used for generating random numbers from noise*/
int randomNumber()
{
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	62 97       	sbiw	r28, 0x12	; 18
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	de bf       	out	0x3e, r29	; 62
     222:	0f be       	out	0x3f, r0	; 63
     224:	cd bf       	out	0x3d, r28	; 61
    int rand_num;
    srand(accelerometer_read().x_geforce * accelerometer_read().y_geforce * accelerometer_read().z_geforce);
     226:	92 df       	rcall	.-220    	; 0x14c <accelerometer_read>
     228:	2d 87       	std	Y+13, r18	; 0x0d
     22a:	3e 87       	std	Y+14, r19	; 0x0e
     22c:	ed 84       	ldd	r14, Y+13	; 0x0d
     22e:	fe 84       	ldd	r15, Y+14	; 0x0e
     230:	8d df       	rcall	.-230    	; 0x14c <accelerometer_read>
     232:	49 87       	std	Y+9, r20	; 0x09
     234:	5a 87       	std	Y+10, r21	; 0x0a
     236:	89 85       	ldd	r24, Y+9	; 0x09
     238:	9a 85       	ldd	r25, Y+10	; 0x0a
     23a:	e8 9e       	mul	r14, r24
     23c:	80 01       	movw	r16, r0
     23e:	e9 9e       	mul	r14, r25
     240:	10 0d       	add	r17, r0
     242:	f8 9e       	mul	r15, r24
     244:	10 0d       	add	r17, r0
     246:	11 24       	eor	r1, r1
     248:	81 df       	rcall	.-254    	; 0x14c <accelerometer_read>
     24a:	6d 83       	std	Y+5, r22	; 0x05
     24c:	7e 83       	std	Y+6, r23	; 0x06
     24e:	8d 81       	ldd	r24, Y+5	; 0x05
     250:	9e 81       	ldd	r25, Y+6	; 0x06
     252:	9c 01       	movw	r18, r24
     254:	02 9f       	mul	r16, r18
     256:	c0 01       	movw	r24, r0
     258:	03 9f       	mul	r16, r19
     25a:	90 0d       	add	r25, r0
     25c:	12 9f       	mul	r17, r18
     25e:	90 0d       	add	r25, r0
     260:	11 24       	eor	r1, r1
     262:	3e d5       	rcall	.+2684   	; 0xce0 <srand>
    // Will generate a random number between 0-5
    rand_num = rand() % 6;
     264:	3a d5       	rcall	.+2676   	; 0xcda <rand>
     266:	66 e0       	ldi	r22, 0x06	; 6
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	c9 d4       	rcall	.+2450   	; 0xbfe <__divmodhi4>
     26c:	62 96       	adiw	r28, 0x12	; 18
     26e:	0f b6       	in	r0, 0x3f	; 63

    return rand_num;
}
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <randomDirection>:
     286:	c1 df       	rcall	.-126    	; 0x20a <randomNumber>
     288:	88 5f       	subi	r24, 0xF8	; 248

/* This function generates a random direction*/
DIRECTION randomDirection()
{
    return directions[randomNumber()];
     28a:	9e 4f       	sbci	r25, 0xFE	; 254
}
     28c:	fc 01       	movw	r30, r24
     28e:	80 81       	ld	r24, Z
     290:	08 95       	ret

00000292 <GameLogic_draw_hearts>:
void time_passed(){
	isroundstarted = false;
}

/* Draws the hearts on the screen based on the score*/
void GameLogic_draw_hearts(){
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <GameLogic_draw_hearts+0xe>
     2a0:	1f 92       	push	r1
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
	// Setting logic for numbers
	char lives[3];
	int cursor_pos = 15;

	for (int i = 3; i> 0; i-- )
     2a6:	03 e0       	ldi	r16, 0x03	; 3
     2a8:	10 e0       	ldi	r17, 0x00	; 0

/* Draws the hearts on the screen based on the score*/
void GameLogic_draw_hearts(){
	// Setting logic for numbers
	char lives[3];
	int cursor_pos = 15;
     2aa:	0f 2e       	mov	r0, r31
     2ac:	ff e0       	ldi	r31, 0x0F	; 15
     2ae:	ef 2e       	mov	r14, r31
     2b0:	f1 2c       	mov	r15, r1
     2b2:	f0 2d       	mov	r31, r0

	for (int i = 3; i> 0; i-- )
     2b4:	25 c0       	rjmp	.+74     	; 0x300 <GameLogic_draw_hearts+0x6e>
	{
		// Setting correct cursor pos
		display_set_cursor(cursor_pos, 0);
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	c7 01       	movw	r24, r14
     2bc:	30 d2       	rcall	.+1120   	; 0x71e <display_set_cursor>
		cursor_pos--;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	e8 1a       	sub	r14, r24
     2c2:	f1 08       	sbc	r15, r1
		
		// Setting hearts
		if (i <= lives_left){
     2c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lives_left>
     2c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lives_left+0x1>
     2cc:	80 17       	cp	r24, r16
     2ce:	91 07       	cpc	r25, r17
     2d0:	5c f0       	brlt	.+22     	; 0x2e8 <GameLogic_draw_hearts+0x56>
			lives[i-1] = 1;
     2d2:	f8 01       	movw	r30, r16
     2d4:	31 97       	sbiw	r30, 0x01	; 1
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	8c 0f       	add	r24, r28
     2dc:	9d 1f       	adc	r25, r29
     2de:	e8 0f       	add	r30, r24
     2e0:	f9 1f       	adc	r31, r25
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 83       	st	Z, r24
     2e6:	0a c0       	rjmp	.+20     	; 0x2fc <GameLogic_draw_hearts+0x6a>
		} else {
			lives[i-1] = 2;
     2e8:	f8 01       	movw	r30, r16
     2ea:	31 97       	sbiw	r30, 0x01	; 1
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	8c 0f       	add	r24, r28
     2f2:	9d 1f       	adc	r25, r29
     2f4:	e8 0f       	add	r30, r24
     2f6:	f9 1f       	adc	r31, r25
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	80 83       	st	Z, r24
void GameLogic_draw_hearts(){
	// Setting logic for numbers
	char lives[3];
	int cursor_pos = 15;

	for (int i = 3; i> 0; i-- )
     2fc:	01 50       	subi	r16, 0x01	; 1
     2fe:	11 09       	sbc	r17, r1
     300:	10 16       	cp	r1, r16
     302:	11 06       	cpc	r1, r17
     304:	c4 f2       	brlt	.-80     	; 0x2b6 <GameLogic_draw_hearts+0x24>
			lives[i-1] = 2;
		}
	}
	
	// Displaying hearts
	display_text(lives);
     306:	ce 01       	movw	r24, r28
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	ed d1       	rcall	.+986    	; 0x6e6 <display_text>
}
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <GameLogic_Draw_Dir>:

/*Draws the direction on the screen based on the input of dir*/
void GameLogic_Draw_Dir(DIRECTION dir){
     320:	cf 93       	push	r28
     322:	c8 2f       	mov	r28, r24
	display_clear();
     324:	10 d2       	rcall	.+1056   	; 0x746 <display_clear>
	switch (dir)
     326:	c2 30       	cpi	r28, 0x02	; 2
     328:	a1 f0       	breq	.+40     	; 0x352 <GameLogic_Draw_Dir+0x32>
     32a:	28 f4       	brcc	.+10     	; 0x336 <GameLogic_Draw_Dir+0x16>
     32c:	cc 23       	and	r28, r28
     32e:	49 f0       	breq	.+18     	; 0x342 <GameLogic_Draw_Dir+0x22>
     330:	c1 30       	cpi	r28, 0x01	; 1
     332:	59 f0       	breq	.+22     	; 0x34a <GameLogic_Draw_Dir+0x2a>
     334:	1d c0       	rjmp	.+58     	; 0x370 <GameLogic_Draw_Dir+0x50>
     336:	c4 30       	cpi	r28, 0x04	; 4
     338:	a1 f0       	breq	.+40     	; 0x362 <GameLogic_Draw_Dir+0x42>
     33a:	78 f0       	brcs	.+30     	; 0x35a <GameLogic_Draw_Dir+0x3a>
     33c:	c5 30       	cpi	r28, 0x05	; 5
     33e:	a9 f0       	breq	.+42     	; 0x36a <GameLogic_Draw_Dir+0x4a>
     340:	17 c0       	rjmp	.+46     	; 0x370 <GameLogic_Draw_Dir+0x50>
	{
		case UP:
			display_text("Go upwards");
     342:	8c e3       	ldi	r24, 0x3C	; 60
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	cf d1       	rcall	.+926    	; 0x6e6 <display_text>
			break;
     348:	13 c0       	rjmp	.+38     	; 0x370 <GameLogic_Draw_Dir+0x50>
		case DOWN:
			display_text("Go downwards");
     34a:	87 e4       	ldi	r24, 0x47	; 71
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	cb d1       	rcall	.+918    	; 0x6e6 <display_text>
			break;
		case LEFT:
			display_text("Go left");
     350:	0f c0       	rjmp	.+30     	; 0x370 <GameLogic_Draw_Dir+0x50>
     352:	84 e5       	ldi	r24, 0x54	; 84
     354:	91 e0       	ldi	r25, 0x01	; 1
			break;
     356:	c7 d1       	rcall	.+910    	; 0x6e6 <display_text>
		case RIGHT:
			display_text("Go right");
     358:	0b c0       	rjmp	.+22     	; 0x370 <GameLogic_Draw_Dir+0x50>
     35a:	8c e5       	ldi	r24, 0x5C	; 92
     35c:	91 e0       	ldi	r25, 0x01	; 1
			break;
     35e:	c3 d1       	rcall	.+902    	; 0x6e6 <display_text>
		case FORWARD:
			display_text("Go forward");
     360:	07 c0       	rjmp	.+14     	; 0x370 <GameLogic_Draw_Dir+0x50>
     362:	85 e6       	ldi	r24, 0x65	; 101
     364:	91 e0       	ldi	r25, 0x01	; 1
			break;
     366:	bf d1       	rcall	.+894    	; 0x6e6 <display_text>
		case BACKWARD:
			display_text("Go backward");
     368:	03 c0       	rjmp	.+6      	; 0x370 <GameLogic_Draw_Dir+0x50>
     36a:	80 e7       	ldi	r24, 0x70	; 112
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	bb d1       	rcall	.+886    	; 0x6e6 <display_text>
			break;
	}
}
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <GameLogic_Round>:

/*This function is called in a loop and executes a game round*/
void GameLogic_Round()
{
     374:	8f 92       	push	r8
     376:	9f 92       	push	r9
     378:	af 92       	push	r10
     37a:	bf 92       	push	r11
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	ca 56       	subi	r28, 0x6A	; 106
     392:	d1 09       	sbc	r29, r1
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
	// Setup of handling
    DIRECTION dir = randomDirection();
     39e:	73 df       	rcall	.-282    	; 0x286 <randomDirection>
     3a0:	18 2f       	mov	r17, r24
	set_timer(2000, time_passed);
     3a2:	63 ed       	ldi	r22, 0xD3	; 211
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 ed       	ldi	r24, 0xD0	; 208
     3a8:	97 e0       	ldi	r25, 0x07	; 7
     3aa:	4f d2       	rcall	.+1182   	; 0x84a <set_timer>
	isroundstarted = true;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
	display_clear();
	GameLogic_Draw_Dir(dir);
     3b2:	c9 d1       	rcall	.+914    	; 0x746 <display_clear>
     3b4:	81 2f       	mov	r24, r17
	GameLogic_draw_hearts();
     3b6:	b4 df       	rcall	.-152    	; 0x320 <GameLogic_Draw_Dir>
     3b8:	6c df       	rcall	.-296    	; 0x292 <GameLogic_draw_hearts>

	// Starting handling
	while(isroundstarted) {
     3ba:	d1 c0       	rjmp	.+418    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
		accelerometer_measurment_t measurement = accelerometer_read();
     3bc:	c7 de       	rcall	.-626    	; 0x14c <accelerometer_read>
     3be:	a6 96       	adiw	r28, 0x26	; 38
     3c0:	2f af       	std	Y+63, r18	; 0x3f
     3c2:	a6 97       	sbiw	r28, 0x26	; 38
     3c4:	a7 96       	adiw	r28, 0x27	; 39
     3c6:	3f af       	std	Y+63, r19	; 0x3f
     3c8:	a7 97       	sbiw	r28, 0x27	; 39
     3ca:	a8 96       	adiw	r28, 0x28	; 40
     3cc:	4f af       	std	Y+63, r20	; 0x3f
     3ce:	a8 97       	sbiw	r28, 0x28	; 40
     3d0:	a9 96       	adiw	r28, 0x29	; 41
     3d2:	5f af       	std	Y+63, r21	; 0x3f
     3d4:	a9 97       	sbiw	r28, 0x29	; 41
     3d6:	aa 96       	adiw	r28, 0x2a	; 42
     3d8:	6f af       	std	Y+63, r22	; 0x3f
     3da:	aa 97       	sbiw	r28, 0x2a	; 42
     3dc:	ab 96       	adiw	r28, 0x2b	; 43
     3de:	7f af       	std	Y+63, r23	; 0x3f
     3e0:	ab 97       	sbiw	r28, 0x2b	; 43
		display_set_cursor(0, 1);
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	99 d1       	rcall	.+818    	; 0x71e <display_set_cursor>
     3ec:	ab 96       	adiw	r28, 0x2b	; 43
		char debugout[100];
		sprintf(debugout, "%d;%d;%d,%d,%d", measurement.x_geforce, measurement.y_geforce, measurement.z_geforce, correctCount, totalCount);
     3ee:	ae ac       	ldd	r10, Y+62	; 0x3e
     3f0:	bf ac       	ldd	r11, Y+63	; 0x3f
     3f2:	ab 97       	sbiw	r28, 0x2b	; 43
     3f4:	a9 96       	adiw	r28, 0x29	; 41
     3f6:	ce ac       	ldd	r12, Y+62	; 0x3e
     3f8:	df ac       	ldd	r13, Y+63	; 0x3f
     3fa:	a9 97       	sbiw	r28, 0x29	; 41
     3fc:	a7 96       	adiw	r28, 0x27	; 39
     3fe:	ee ac       	ldd	r14, Y+62	; 0x3e
     400:	ff ac       	ldd	r15, Y+63	; 0x3f
     402:	a7 97       	sbiw	r28, 0x27	; 39
     404:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <totalCount+0x1>
     408:	8f 93       	push	r24
     40a:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <totalCount>
     40e:	8f 93       	push	r24
     410:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <correctCount+0x1>
     414:	8f 93       	push	r24
     416:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
     41a:	8f 93       	push	r24
     41c:	bf 92       	push	r11
     41e:	af 92       	push	r10
     420:	df 92       	push	r13
     422:	cf 92       	push	r12
     424:	ff 92       	push	r15
     426:	ef 92       	push	r14
     428:	8c e7       	ldi	r24, 0x7C	; 124
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	9f 93       	push	r25
     42e:	8f 93       	push	r24
     430:	ce 01       	movw	r24, r28
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	4c 01       	movw	r8, r24
     436:	9f 93       	push	r25
     438:	8f 93       	push	r24
     43a:	5d d4       	rcall	.+2234   	; 0xcf6 <sprintf>
		display_text(debugout);
     43c:	c4 01       	movw	r24, r8
     43e:	53 d1       	rcall	.+678    	; 0x6e6 <display_text>
     440:	0f b6       	in	r0, 0x3f	; 63
		switch (dir)
     442:	f8 94       	cli
     444:	de bf       	out	0x3e, r29	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	12 30       	cpi	r17, 0x02	; 2
     44c:	a1 f1       	breq	.+104    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     44e:	28 f4       	brcc	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     450:	11 23       	and	r17, r17
     452:	59 f0       	breq	.+22     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     454:	11 30       	cpi	r17, 0x01	; 1
     456:	e1 f0       	breq	.+56     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     458:	76 c0       	rjmp	.+236    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     45a:	14 30       	cpi	r17, 0x04	; 4
     45c:	09 f4       	brne	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	50 c0       	rjmp	.+160    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     460:	e8 f1       	brcs	.+122    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     462:	15 30       	cpi	r17, 0x05	; 5
     464:	09 f4       	brne	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     466:	5e c0       	rjmp	.+188    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     468:	6e c0       	rjmp	.+220    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     46a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TRESHOLD_MEASURMENT+0x4>
		{
			case UP:
				if(measurement.z_geforce <= TRESHOLD_MEASURMENT.z_geforce - MEASURMENT_OFSETT)
     46e:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <TRESHOLD_MEASURMENT+0x5>
     472:	02 97       	sbiw	r24, 0x02	; 2
     474:	8a 15       	cp	r24, r10
     476:	9b 05       	cpc	r25, r11
     478:	0c f4       	brge	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	65 c0       	rjmp	.+202    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     47c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     480:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     48a:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     48e:	5b c0       	rjmp	.+182    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     490:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <TRESHOLD_MEASURMENT+0x4>
				}
				break;
			case DOWN:
				if(measurement.z_geforce >= TRESHOLD_MEASURMENT.z_geforce + MEASURMENT_OFSETT)
     494:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <TRESHOLD_MEASURMENT+0x5>
     498:	02 96       	adiw	r24, 0x02	; 2
     49a:	a8 16       	cp	r10, r24
     49c:	b9 06       	cpc	r11, r25
     49e:	0c f4       	brge	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a0:	52 c0       	rjmp	.+164    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4a2:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     4a6:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     4b0:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     4b4:	48 c0       	rjmp	.+144    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4b6:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <TRESHOLD_MEASURMENT+0x2>
				}
				break;

			case LEFT:
				if(measurement.y_geforce <= TRESHOLD_MEASURMENT.y_geforce - MEASURMENT_OFSETT)
     4ba:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <TRESHOLD_MEASURMENT+0x3>
     4be:	02 97       	sbiw	r24, 0x02	; 2
     4c0:	8c 15       	cp	r24, r12
     4c2:	9d 05       	cpc	r25, r13
     4c4:	0c f4       	brge	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c6:	3f c0       	rjmp	.+126    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4c8:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     4cc:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     4d6:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     4da:	35 c0       	rjmp	.+106    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4dc:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <TRESHOLD_MEASURMENT+0x2>
				}
				break;
			case RIGHT:
				if(measurement.y_geforce >= TRESHOLD_MEASURMENT.y_geforce + MEASURMENT_OFSETT)
     4e0:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <TRESHOLD_MEASURMENT+0x3>
     4e4:	02 96       	adiw	r24, 0x02	; 2
     4e6:	c8 16       	cp	r12, r24
     4e8:	d9 06       	cpc	r13, r25
     4ea:	6c f1       	brlt	.+90     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4ec:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     4f0:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     4fa:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     4fe:	23 c0       	rjmp	.+70     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     500:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <TRESHOLD_MEASURMENT>
				}
				break;
			case FORWARD:
				if(measurement.x_geforce <= TRESHOLD_MEASURMENT.x_geforce - MEASURMENT_OFSETT)
     504:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <TRESHOLD_MEASURMENT+0x1>
     508:	02 97       	sbiw	r24, 0x02	; 2
     50a:	8e 15       	cp	r24, r14
     50c:	9f 05       	cpc	r25, r15
     50e:	dc f0       	brlt	.+54     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     510:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     514:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     51e:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     522:	11 c0       	rjmp	.+34     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     524:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <TRESHOLD_MEASURMENT>
				}
				break;
			case BACKWARD:
				if(measurement.x_geforce >= TRESHOLD_MEASURMENT.x_geforce + MEASURMENT_OFSETT)
     528:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <TRESHOLD_MEASURMENT+0x1>
     52c:	02 96       	adiw	r24, 0x02	; 2
     52e:	e8 16       	cp	r14, r24
     530:	f9 06       	cpc	r15, r25
     532:	4c f0       	brlt	.+18     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     534:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <correctCount>
				{
					correctCount++;
     538:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <correctCount+0x1>
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <correctCount+0x1>
     542:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <correctCount>
     546:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <totalCount>
				}
				break;
		}
		totalCount++;
     54a:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <totalCount+0x1>
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <totalCount+0x1>
     554:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <totalCount>
		wait(100);
     558:	84 e6       	ldi	r24, 0x64	; 100
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	27 de       	rcall	.-946    	; 0x1ac <wait>
     55e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
	display_clear();
	GameLogic_Draw_Dir(dir);
	GameLogic_draw_hearts();

	// Starting handling
	while(isroundstarted) {
     562:	81 11       	cpse	r24, r1
     564:	2b cf       	rjmp	.-426    	; 0x3bc <GameLogic_Round+0x48>
		totalCount++;
		wait(100);
	}
	
	// Checking score
	float percentage = ((float)correctCount / (float)totalCount) * 100.0;
     566:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <correctCount>
     56a:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <correctCount+0x1>
     56e:	07 2e       	mov	r0, r23
     570:	00 0c       	add	r0, r0
     572:	88 0b       	sbc	r24, r24
     574:	99 0b       	sbc	r25, r25
     576:	54 d2       	rcall	.+1192   	; 0xa20 <__floatsisf>
     578:	6b 01       	movw	r12, r22
     57a:	7c 01       	movw	r14, r24
     57c:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <totalCount>
     580:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <totalCount+0x1>
     584:	07 2e       	mov	r0, r23
     586:	00 0c       	add	r0, r0
     588:	88 0b       	sbc	r24, r24
     58a:	99 0b       	sbc	r25, r25
     58c:	49 d2       	rcall	.+1170   	; 0xa20 <__floatsisf>
     58e:	9b 01       	movw	r18, r22
     590:	ac 01       	movw	r20, r24
     592:	c7 01       	movw	r24, r14
     594:	b6 01       	movw	r22, r12
     596:	a9 d1       	rcall	.+850    	; 0x8ea <__divsf3>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	48 ec       	ldi	r20, 0xC8	; 200
    bool inputCorrect = (int)percentage > CORRECTTHRESHOLD;
     59e:	52 e4       	ldi	r21, 0x42	; 66
     5a0:	cb d2       	rcall	.+1430   	; 0xb38 <__mulsf3>

	// Displaying score or lives
	display_clear();
     5a2:	0b d2       	rcall	.+1046   	; 0x9ba <__fixsfsi>
     5a4:	7b 01       	movw	r14, r22
	display_set_cursor(0,1);
     5a6:	cf d0       	rcall	.+414    	; 0x746 <display_clear>
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	b6 d0       	rcall	.+364    	; 0x71e <display_set_cursor>
    if(inputCorrect) {
     5b2:	9b e0       	ldi	r25, 0x0B	; 11
     5b4:	e9 16       	cp	r14, r25
     5b6:	f1 04       	cpc	r15, r1
	    display_text(" Input Correct! ");
     5b8:	6c f0       	brlt	.+26     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     5ba:	8b e8       	ldi	r24, 0x8B	; 139
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	93 d0       	rcall	.+294    	; 0x6e6 <display_text>
		totalScore++;
     5c0:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <totalScore>
     5c4:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <totalScore+0x1>
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <totalScore+0x1>
     5ce:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <totalScore>
	} else {
	    display_text("Input Incorrect!");
     5d2:	46 c0       	rjmp	.+140    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
     5d4:	8c e9       	ldi	r24, 0x9C	; 156
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	86 d0       	rcall	.+268    	; 0x6e6 <display_text>
		lives_left--;
     5da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lives_left>
     5de:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lives_left+0x1>
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lives_left+0x1>
     5e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lives_left>
		if(lives_left <= 0) {
     5ec:	18 16       	cp	r1, r24
     5ee:	19 06       	cpc	r1, r25
			display_clear();
     5f0:	bc f1       	brlt	.+110    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
     5f2:	a9 d0       	rcall	.+338    	; 0x746 <display_clear>
			char gameoverString[20];
			sprintf(gameoverString, "Game Over! S:%d", totalScore);
     5f4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <totalScore+0x1>
     5f8:	8f 93       	push	r24
     5fa:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <totalScore>
     5fe:	8f 93       	push	r24
     600:	8d ea       	ldi	r24, 0xAD	; 173
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	8e 01       	movw	r16, r28
     60a:	0f 5f       	subi	r16, 0xFF	; 255
     60c:	1f 4f       	sbci	r17, 0xFF	; 255
     60e:	1f 93       	push	r17
     610:	0f 93       	push	r16
			lives_left = 3;
     612:	71 d3       	rcall	.+1762   	; 0xcf6 <sprintf>
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lives_left+0x1>
     61c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lives_left>
			totalScore = 0;
     620:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <totalScore+0x1>
     624:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <totalScore>
			display_text(gameoverString);
     628:	c8 01       	movw	r24, r16
     62a:	5d d0       	rcall	.+186    	; 0x6e6 <display_text>
			display_set_cursor(0,1);
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	74 d0       	rcall	.+232    	; 0x71e <display_set_cursor>
     636:	8f e2       	ldi	r24, 0x2F	; 47
			display_text("Press PA7...");
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	55 d0       	rcall	.+170    	; 0x6e6 <display_text>
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
			while(PINA != 0b10000000);
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	89 b3       	in	r24, 0x19	; 25
     64a:	80 38       	cpi	r24, 0x80	; 128
     64c:	e9 f7       	brne	.-6      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     64e:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <correctCount+0x1>
			
			correctCount = 0;
     652:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <correctCount>
     656:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <totalCount+0x1>
			totalCount = 0;
     65a:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <totalCount>
     65e:	0c c0       	rjmp	.+24     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
     660:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <correctCount+0x1>
			return;
		}
    }
	
	// Reseting things
	correctCount = 0;
     664:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <correctCount>
     668:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <totalCount+0x1>
	totalCount = 0;		
     66c:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <totalCount>
     670:	10 de       	rcall	.-992    	; 0x292 <GameLogic_draw_hearts>
	GameLogic_draw_hearts();
     672:	88 ee       	ldi	r24, 0xE8	; 232
     674:	93 e0       	ldi	r25, 0x03	; 3


	// Waiting a sec
	wait(1000);
     676:	9a dd       	rcall	.-1228   	; 0x1ac <wait>
     678:	c6 59       	subi	r28, 0x96	; 150
     67a:	df 4f       	sbci	r29, 0xFF	; 255
     67c:	0f b6       	in	r0, 0x3f	; 63
}
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	df 90       	pop	r13
     694:	cf 90       	pop	r12
     696:	bf 90       	pop	r11
     698:	af 90       	pop	r10
     69a:	9f 90       	pop	r9
     69c:	8f 90       	pop	r8
     69e:	08 95       	ret

000006a0 <switch_E>:
unsigned char fullheart[8] = {0x00,0x0A,0x1F,0x1F,0x0E,0x04,0x00,0x00};
unsigned char emptyheart[8] = {0x00,0x0A,0x15,0x11,0x0A,0x04,0x00,0x00};

// Says a transimssion is coming in.
void switch_E() {
	PORTC |= (1<<E);
     6a0:	85 b3       	in	r24, 0x15	; 21
     6a2:	88 60       	ori	r24, 0x08	; 8
     6a4:	85 bb       	out	0x15, r24	; 21
     6a6:	8f ec       	ldi	r24, 0xCF	; 207
     6a8:	97 e0       	ldi	r25, 0x07	; 7
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <switch_E+0xa>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <switch_E+0x10>
     6b0:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<E);
     6b2:	85 b3       	in	r24, 0x15	; 21
     6b4:	87 7f       	andi	r24, 0xF7	; 247
     6b6:	85 bb       	out	0x15, r24	; 21
     6b8:	8f ec       	ldi	r24, 0xCF	; 207
     6ba:	97 e0       	ldi	r25, 0x07	; 7
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <switch_E+0x1c>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <switch_E+0x22>
     6c2:	00 00       	nop
     6c4:	08 95       	ret

000006c6 <lcd_write_data>:
	_delay_ms(1);
}


// Writes data to the screen.
void lcd_write_data(unsigned char byte) {
     6c6:	cf 93       	push	r28
     6c8:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     6ca:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<RS);
     6cc:	85 b3       	in	r24, 0x15	; 21
     6ce:	84 60       	ori	r24, 0x04	; 4
     6d0:	85 bb       	out	0x15, r24	; 21
	switch_E();
     6d2:	e6 df       	rcall	.-52     	; 0x6a0 <switch_E>

	// Second nibble
	PORTC = (byte<<4);
     6d4:	c2 95       	swap	r28
     6d6:	c0 7f       	andi	r28, 0xF0	; 240
     6d8:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<RS);
     6da:	85 b3       	in	r24, 0x15	; 21
     6dc:	84 60       	ori	r24, 0x04	; 4
	switch_E();
     6de:	85 bb       	out	0x15, r24	; 21
     6e0:	df df       	rcall	.-66     	; 0x6a0 <switch_E>
}
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <display_text>:

/*Prints a string to the display*/
void display_text(char *str) {
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	ec 01       	movw	r28, r24
	while (*str) {
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <display_text+0xc>
		lcd_write_data(*str++);
     6ee:	21 96       	adiw	r28, 0x01	; 1
     6f0:	ea df       	rcall	.-44     	; 0x6c6 <lcd_write_data>
	switch_E();
}

/*Prints a string to the display*/
void display_text(char *str) {
	while (*str) {
     6f2:	88 81       	ld	r24, Y
     6f4:	81 11       	cpse	r24, r1
     6f6:	fb cf       	rjmp	.-10     	; 0x6ee <display_text+0x8>
		lcd_write_data(*str++);
	}
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <lcd_write_command>:

// Writes a command to the display
void lcd_write_command(unsigned char byte)
{
     6fe:	cf 93       	push	r28
     700:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
     702:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<RS);
     704:	85 b3       	in	r24, 0x15	; 21
     706:	8b 7f       	andi	r24, 0xFB	; 251
     708:	85 bb       	out	0x15, r24	; 21
	switch_E();
     70a:	ca df       	rcall	.-108    	; 0x6a0 <switch_E>

	// Second nibble
	PORTC = (byte<<4);
     70c:	c2 95       	swap	r28
     70e:	c0 7f       	andi	r28, 0xF0	; 240
     710:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<RS);
     712:	85 b3       	in	r24, 0x15	; 21
     714:	8b 7f       	andi	r24, 0xFB	; 251
	switch_E();
     716:	85 bb       	out	0x15, r24	; 21
     718:	c3 df       	rcall	.-122    	; 0x6a0 <switch_E>
}
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <display_set_cursor>:


// Places the cursor.
void display_set_cursor(int position, int line) {
	if (line == 0){
     71e:	67 2b       	or	r22, r23
     720:	49 f4       	brne	.+18     	; 0x734 <display_set_cursor+0x16>
		lcd_write_command((position * 0x1) + 0x80);
     722:	80 58       	subi	r24, 0x80	; 128
     724:	ec df       	rcall	.-40     	; 0x6fe <lcd_write_command>
     726:	8f e9       	ldi	r24, 0x9F	; 159
     728:	9f e0       	ldi	r25, 0x0F	; 15
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <display_set_cursor+0xc>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <display_set_cursor+0x12>
     730:	00 00       	nop
     732:	08 95       	ret
		_delay_ms(2);
	} else {
		lcd_write_command((position * 0x1) + 0xc0);
     734:	80 54       	subi	r24, 0x40	; 64
     736:	e3 df       	rcall	.-58     	; 0x6fe <lcd_write_command>
     738:	8f e9       	ldi	r24, 0x9F	; 159
     73a:	9f e0       	ldi	r25, 0x0F	; 15
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <display_set_cursor+0x1e>
     740:	00 c0       	rjmp	.+0      	; 0x742 <display_set_cursor+0x24>
     742:	00 00       	nop
     744:	08 95       	ret

00000746 <display_clear>:
		_delay_ms(2);
	}
}

void display_clear(){
	lcd_write_command(0x01);
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	da df       	rcall	.-76     	; 0x6fe <lcd_write_command>
     74a:	8f e9       	ldi	r24, 0x9F	; 159
     74c:	9f e0       	ldi	r25, 0x0F	; 15
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <display_clear+0x8>
     752:	00 c0       	rjmp	.+0      	; 0x754 <display_clear+0xe>
     754:	00 00       	nop
	_delay_ms(2);
	lcd_write_command(0x80);
     756:	80 e8       	ldi	r24, 0x80	; 128
     758:	d2 cf       	rjmp	.-92     	; 0x6fe <lcd_write_command>
     75a:	08 95       	ret

0000075c <LCD_Custom_Char>:
}

// This function is used for putting custom chars in ram of the display
void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	8b 01       	movw	r16, r22
	unsigned char i;
	if(loc<8)
     764:	88 30       	cpi	r24, 0x08	; 8
     766:	80 f4       	brcc	.+32     	; 0x788 <LCD_Custom_Char+0x2c>
	{
		lcd_write_command(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	08 96       	adiw	r24, 0x08	; 8
     76c:	88 0f       	add	r24, r24
     76e:	88 0f       	add	r24, r24
     770:	88 0f       	add	r24, r24
     772:	c5 df       	rcall	.-118    	; 0x6fe <lcd_write_command>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
     774:	c0 e0       	ldi	r28, 0x00	; 0
     776:	06 c0       	rjmp	.+12     	; 0x784 <LCD_Custom_Char+0x28>
		lcd_write_data(msg[i]);
     778:	f8 01       	movw	r30, r16
     77a:	ec 0f       	add	r30, r28
     77c:	f1 1d       	adc	r31, r1
     77e:	80 81       	ld	r24, Z
     780:	a2 df       	rcall	.-188    	; 0x6c6 <lcd_write_data>
{
	unsigned char i;
	if(loc<8)
	{
		lcd_write_command(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
     782:	cf 5f       	subi	r28, 0xFF	; 255
     784:	c8 30       	cpi	r28, 0x08	; 8
		lcd_write_data(msg[i]);
	}
	display_clear();
     786:	c0 f3       	brcs	.-16     	; 0x778 <LCD_Custom_Char+0x1c>
     788:	de df       	rcall	.-68     	; 0x746 <display_clear>
}
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	08 95       	ret

00000792 <display_init>:

// This function is used for bootup up the lcd
void display_init() {
     792:	cf 93       	push	r28
	// See table 13 from the HD44780U datasheet.
	DDRC = 0xFF;
     794:	8f ef       	ldi	r24, 0xFF	; 255
     796:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
     798:	15 ba       	out	0x15, r1	; 21
	
	// Step 2 Function set
	PORTC = 0x20;
     79a:	c0 e2       	ldi	r28, 0x20	; 32
     79c:	c5 bb       	out	0x15, r28	; 21
	switch_E();
     79e:	80 df       	rcall	.-256    	; 0x6a0 <switch_E>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	switch_E();
     7a0:	c5 bb       	out	0x15, r28	; 21
     7a2:	7e df       	rcall	.-260    	; 0x6a0 <switch_E>
	PORTC = 0x80;
     7a4:	80 e8       	ldi	r24, 0x80	; 128
	switch_E();
     7a6:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
     7a8:	7b df       	rcall	.-266    	; 0x6a0 <switch_E>
	switch_E();
     7aa:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
     7ac:	79 df       	rcall	.-270    	; 0x6a0 <switch_E>
	switch_E();
     7ae:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
     7b0:	85 bb       	out	0x15, r24	; 21
	switch_E();
     7b2:	76 df       	rcall	.-276    	; 0x6a0 <switch_E>
	PORTC = 0x60;
     7b4:	15 ba       	out	0x15, r1	; 21
	switch_E();
     7b6:	74 df       	rcall	.-280    	; 0x6a0 <switch_E>
     7b8:	80 e6       	ldi	r24, 0x60	; 96
	
	// Set cursor to position 0 on first row.
	lcd_write_command(0x0c);
     7ba:	85 bb       	out	0x15, r24	; 21
     7bc:	71 df       	rcall	.-286    	; 0x6a0 <switch_E>
	lcd_write_command(0x02);
     7be:	8c e0       	ldi	r24, 0x0C	; 12
     7c0:	9e df       	rcall	.-196    	; 0x6fe <lcd_write_command>

	// Adding custom chars
	LCD_Custom_Char(1, fullheart);
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	9c df       	rcall	.-200    	; 0x6fe <lcd_write_command>
     7c6:	66 e1       	ldi	r22, 0x16	; 22
     7c8:	71 e0       	ldi	r23, 0x01	; 1
     7ca:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Custom_Char(2, emptyheart);
     7cc:	c7 df       	rcall	.-114    	; 0x75c <LCD_Custom_Char>
     7ce:	6e e0       	ldi	r22, 0x0E	; 14
     7d0:	71 e0       	ldi	r23, 0x01	; 1
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	c3 df       	rcall	.-122    	; 0x75c <LCD_Custom_Char>
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <__vector_12>:

/* Function pointer*/
void (*on_interupt)(void);

/* Interrupt on timer passed*/
ISR(TIMER1_COMPA_vect) {
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	0b b6       	in	r0, 0x3b	; 59
     7e6:	0f 92       	push	r0
     7e8:	2f 93       	push	r18
     7ea:	3f 93       	push	r19
     7ec:	4f 93       	push	r20
     7ee:	5f 93       	push	r21
     7f0:	6f 93       	push	r22
     7f2:	7f 93       	push	r23
     7f4:	8f 93       	push	r24
     7f6:	9f 93       	push	r25
     7f8:	af 93       	push	r26
     7fa:	bf 93       	push	r27
     7fc:	ef 93       	push	r30
     7fe:	ff 93       	push	r31
	on_interupt();
     800:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <on_interupt>
     804:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <on_interupt+0x1>
     808:	09 95       	icall
	cli();
     80a:	f8 94       	cli
}
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	bf 91       	pop	r27
     812:	af 91       	pop	r26
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	5f 91       	pop	r21
     81e:	4f 91       	pop	r20
     820:	3f 91       	pop	r19
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	0b be       	out	0x3b, r0	; 59
     828:	0f 90       	pop	r0
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	0f 90       	pop	r0
     82e:	1f 90       	pop	r1
     830:	18 95       	reti

00000832 <setup_timer>:
	on_interupt = fun_ptr;
}

/* Sets up the timer base on calculation*/
void setup_timer(int prescaler, int limit){
	OCR1A = limit;					// Setting calculated limit
     832:	7b bd       	out	0x2b, r23	; 43
     834:	6a bd       	out	0x2a, r22	; 42
	TIMSK |= (1 << 4);				// Setting on compare vect intr
     836:	97 b7       	in	r25, 0x37	; 55
     838:	90 61       	ori	r25, 0x10	; 16
     83a:	97 bf       	out	0x37, r25	; 55
	sei();							// Turning on interupts
     83c:	78 94       	sei
	TCCR1B |= prescaler_values[0];	// Clearing prescaler
     83e:	9e b5       	in	r25, 0x2e	; 46
     840:	9e bd       	out	0x2e, r25	; 46
	TCCR1B |= prescaler;			// Setting new prescaler
     842:	9e b5       	in	r25, 0x2e	; 46
     844:	89 2b       	or	r24, r25
     846:	8e bd       	out	0x2e, r24	; 46
     848:	08 95       	ret

0000084a <set_timer>:

/* Template for usage*/
void setup_timer(int prescaler, int limit);

/* Boots up the time and calcultes all values needed*/
void set_timer(int time_ms, void (*fun_ptr)(void)){
     84a:	8f 92       	push	r8
     84c:	9f 92       	push	r9
     84e:	af 92       	push	r10
     850:	bf 92       	push	r11
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	8c 01       	movw	r16, r24
     864:	6b 01       	movw	r12, r22
	int prescaler, limit;

	// Looping through prescalers
	for (int i = 1; i < Timer_PRESCALER_COUNT; i++)
     866:	c1 e0       	ldi	r28, 0x01	; 1
     868:	d0 e0       	ldi	r29, 0x00	; 0
     86a:	25 c0       	rjmp	.+74     	; 0x8b6 <set_timer+0x6c>
	{
		// Calculating max allowed value of prescaler and if in limit then use.
		if ((1 / TIMER_CLOCK_RATE) * prescaler_values[i] < time_ms){
     86c:	10 16       	cp	r1, r16
     86e:	11 06       	cpc	r1, r17
     870:	0c f5       	brge	.+66     	; 0x8b4 <set_timer+0x6a>
			prescaler = prescaler_values[i];
     872:	fe 01       	movw	r30, r28
     874:	ee 0f       	add	r30, r30
     876:	ff 1f       	adc	r31, r31
     878:	e3 54       	subi	r30, 0x43	; 67
     87a:	fe 4f       	sbci	r31, 0xFE	; 254
     87c:	e0 80       	ld	r14, Z
     87e:	f1 80       	ldd	r15, Z+1	; 0x01
			limit = (int)((float)time_ms / (((float)1 / (float)TIMER_CLOCK_RATE) * (float)prescaler_values[i]));
     880:	b8 01       	movw	r22, r16
     882:	01 2e       	mov	r0, r17
     884:	00 0c       	add	r0, r0
     886:	88 0b       	sbc	r24, r24
     888:	99 0b       	sbc	r25, r25
     88a:	ca d0       	rcall	.+404    	; 0xa20 <__floatsisf>
     88c:	4b 01       	movw	r8, r22
     88e:	5c 01       	movw	r10, r24
     890:	b7 01       	movw	r22, r14
     892:	0f 2c       	mov	r0, r15
     894:	00 0c       	add	r0, r0
     896:	88 0b       	sbc	r24, r24
     898:	99 0b       	sbc	r25, r25
     89a:	c2 d0       	rcall	.+388    	; 0xa20 <__floatsisf>
     89c:	2f e6       	ldi	r18, 0x6F	; 111
     89e:	32 e1       	ldi	r19, 0x12	; 18
     8a0:	43 e0       	ldi	r20, 0x03	; 3
     8a2:	59 e3       	ldi	r21, 0x39	; 57
     8a4:	49 d1       	rcall	.+658    	; 0xb38 <__mulsf3>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	c5 01       	movw	r24, r10
     8ac:	b4 01       	movw	r22, r8
     8ae:	1d d0       	rcall	.+58     	; 0x8ea <__divsf3>
     8b0:	84 d0       	rcall	.+264    	; 0x9ba <__fixsfsi>
     8b2:	9b 01       	movw	r18, r22
/* Boots up the time and calcultes all values needed*/
void set_timer(int time_ms, void (*fun_ptr)(void)){
	int prescaler, limit;

	// Looping through prescalers
	for (int i = 1; i < Timer_PRESCALER_COUNT; i++)
     8b4:	21 96       	adiw	r28, 0x01	; 1
     8b6:	c6 30       	cpi	r28, 0x06	; 6
     8b8:	d1 05       	cpc	r29, r1
			limit = (int)((float)time_ms / (((float)1 / (float)TIMER_CLOCK_RATE) * (float)prescaler_values[i]));
		}
	}

	// Setting up all timers and other things
	setup_timer(prescaler, limit);
     8ba:	c4 f2       	brlt	.-80     	; 0x86c <set_timer+0x22>
     8bc:	b9 01       	movw	r22, r18
     8be:	c7 01       	movw	r24, r14
     8c0:	b8 df       	rcall	.-144    	; 0x832 <setup_timer>
	on_interupt = fun_ptr;
     8c2:	d0 92 d8 01 	sts	0x01D8, r13	; 0x8001d8 <on_interupt+0x1>
     8c6:	c0 92 d7 01 	sts	0x01D7, r12	; 0x8001d7 <on_interupt>
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	df 90       	pop	r13
     8d8:	cf 90       	pop	r12
     8da:	bf 90       	pop	r11
     8dc:	af 90       	pop	r10
     8de:	9f 90       	pop	r9
     8e0:	8f 90       	pop	r8
     8e2:	08 95       	ret

000008e4 <main>:
     8e4:	72 dc       	rcall	.-1820   	; 0x1ca <GameLogic_Init>
     8e6:	46 dd       	rcall	.-1396   	; 0x374 <GameLogic_Round>
     8e8:	fe cf       	rjmp	.-4      	; 0x8e6 <main+0x2>

000008ea <__divsf3>:
     8ea:	0c d0       	rcall	.+24     	; 0x904 <__divsf3x>
     8ec:	eb c0       	rjmp	.+470    	; 0xac4 <__fp_round>
     8ee:	e3 d0       	rcall	.+454    	; 0xab6 <__fp_pscB>
     8f0:	40 f0       	brcs	.+16     	; 0x902 <__divsf3+0x18>
     8f2:	da d0       	rcall	.+436    	; 0xaa8 <__fp_pscA>
     8f4:	30 f0       	brcs	.+12     	; 0x902 <__divsf3+0x18>
     8f6:	21 f4       	brne	.+8      	; 0x900 <__divsf3+0x16>
     8f8:	5f 3f       	cpi	r21, 0xFF	; 255
     8fa:	19 f0       	breq	.+6      	; 0x902 <__divsf3+0x18>
     8fc:	cc c0       	rjmp	.+408    	; 0xa96 <__fp_inf>
     8fe:	51 11       	cpse	r21, r1
     900:	15 c1       	rjmp	.+554    	; 0xb2c <__fp_szero>
     902:	cf c0       	rjmp	.+414    	; 0xaa2 <__fp_nan>

00000904 <__divsf3x>:
     904:	f0 d0       	rcall	.+480    	; 0xae6 <__fp_split3>
     906:	98 f3       	brcs	.-26     	; 0x8ee <__divsf3+0x4>

00000908 <__divsf3_pse>:
     908:	99 23       	and	r25, r25
     90a:	c9 f3       	breq	.-14     	; 0x8fe <__divsf3+0x14>
     90c:	55 23       	and	r21, r21
     90e:	b1 f3       	breq	.-20     	; 0x8fc <__divsf3+0x12>
     910:	95 1b       	sub	r25, r21
     912:	55 0b       	sbc	r21, r21
     914:	bb 27       	eor	r27, r27
     916:	aa 27       	eor	r26, r26
     918:	62 17       	cp	r22, r18
     91a:	73 07       	cpc	r23, r19
     91c:	84 07       	cpc	r24, r20
     91e:	38 f0       	brcs	.+14     	; 0x92e <__divsf3_pse+0x26>
     920:	9f 5f       	subi	r25, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	22 0f       	add	r18, r18
     926:	33 1f       	adc	r19, r19
     928:	44 1f       	adc	r20, r20
     92a:	aa 1f       	adc	r26, r26
     92c:	a9 f3       	breq	.-22     	; 0x918 <__divsf3_pse+0x10>
     92e:	33 d0       	rcall	.+102    	; 0x996 <__divsf3_pse+0x8e>
     930:	0e 2e       	mov	r0, r30
     932:	3a f0       	brmi	.+14     	; 0x942 <__divsf3_pse+0x3a>
     934:	e0 e8       	ldi	r30, 0x80	; 128
     936:	30 d0       	rcall	.+96     	; 0x998 <__divsf3_pse+0x90>
     938:	91 50       	subi	r25, 0x01	; 1
     93a:	50 40       	sbci	r21, 0x00	; 0
     93c:	e6 95       	lsr	r30
     93e:	00 1c       	adc	r0, r0
     940:	ca f7       	brpl	.-14     	; 0x934 <__divsf3_pse+0x2c>
     942:	29 d0       	rcall	.+82     	; 0x996 <__divsf3_pse+0x8e>
     944:	fe 2f       	mov	r31, r30
     946:	27 d0       	rcall	.+78     	; 0x996 <__divsf3_pse+0x8e>
     948:	66 0f       	add	r22, r22
     94a:	77 1f       	adc	r23, r23
     94c:	88 1f       	adc	r24, r24
     94e:	bb 1f       	adc	r27, r27
     950:	26 17       	cp	r18, r22
     952:	37 07       	cpc	r19, r23
     954:	48 07       	cpc	r20, r24
     956:	ab 07       	cpc	r26, r27
     958:	b0 e8       	ldi	r27, 0x80	; 128
     95a:	09 f0       	breq	.+2      	; 0x95e <__divsf3_pse+0x56>
     95c:	bb 0b       	sbc	r27, r27
     95e:	80 2d       	mov	r24, r0
     960:	bf 01       	movw	r22, r30
     962:	ff 27       	eor	r31, r31
     964:	93 58       	subi	r25, 0x83	; 131
     966:	5f 4f       	sbci	r21, 0xFF	; 255
     968:	2a f0       	brmi	.+10     	; 0x974 <__divsf3_pse+0x6c>
     96a:	9e 3f       	cpi	r25, 0xFE	; 254
     96c:	51 05       	cpc	r21, r1
     96e:	68 f0       	brcs	.+26     	; 0x98a <__divsf3_pse+0x82>
     970:	92 c0       	rjmp	.+292    	; 0xa96 <__fp_inf>
     972:	dc c0       	rjmp	.+440    	; 0xb2c <__fp_szero>
     974:	5f 3f       	cpi	r21, 0xFF	; 255
     976:	ec f3       	brlt	.-6      	; 0x972 <__divsf3_pse+0x6a>
     978:	98 3e       	cpi	r25, 0xE8	; 232
     97a:	dc f3       	brlt	.-10     	; 0x972 <__divsf3_pse+0x6a>
     97c:	86 95       	lsr	r24
     97e:	77 95       	ror	r23
     980:	67 95       	ror	r22
     982:	b7 95       	ror	r27
     984:	f7 95       	ror	r31
     986:	9f 5f       	subi	r25, 0xFF	; 255
     988:	c9 f7       	brne	.-14     	; 0x97c <__divsf3_pse+0x74>
     98a:	88 0f       	add	r24, r24
     98c:	91 1d       	adc	r25, r1
     98e:	96 95       	lsr	r25
     990:	87 95       	ror	r24
     992:	97 f9       	bld	r25, 7
     994:	08 95       	ret
     996:	e1 e0       	ldi	r30, 0x01	; 1
     998:	66 0f       	add	r22, r22
     99a:	77 1f       	adc	r23, r23
     99c:	88 1f       	adc	r24, r24
     99e:	bb 1f       	adc	r27, r27
     9a0:	62 17       	cp	r22, r18
     9a2:	73 07       	cpc	r23, r19
     9a4:	84 07       	cpc	r24, r20
     9a6:	ba 07       	cpc	r27, r26
     9a8:	20 f0       	brcs	.+8      	; 0x9b2 <__divsf3_pse+0xaa>
     9aa:	62 1b       	sub	r22, r18
     9ac:	73 0b       	sbc	r23, r19
     9ae:	84 0b       	sbc	r24, r20
     9b0:	ba 0b       	sbc	r27, r26
     9b2:	ee 1f       	adc	r30, r30
     9b4:	88 f7       	brcc	.-30     	; 0x998 <__divsf3_pse+0x90>
     9b6:	e0 95       	com	r30
     9b8:	08 95       	ret

000009ba <__fixsfsi>:
     9ba:	04 d0       	rcall	.+8      	; 0x9c4 <__fixunssfsi>
     9bc:	68 94       	set
     9be:	b1 11       	cpse	r27, r1
     9c0:	b5 c0       	rjmp	.+362    	; 0xb2c <__fp_szero>
     9c2:	08 95       	ret

000009c4 <__fixunssfsi>:
     9c4:	98 d0       	rcall	.+304    	; 0xaf6 <__fp_splitA>
     9c6:	88 f0       	brcs	.+34     	; 0x9ea <__fixunssfsi+0x26>
     9c8:	9f 57       	subi	r25, 0x7F	; 127
     9ca:	90 f0       	brcs	.+36     	; 0x9f0 <__fixunssfsi+0x2c>
     9cc:	b9 2f       	mov	r27, r25
     9ce:	99 27       	eor	r25, r25
     9d0:	b7 51       	subi	r27, 0x17	; 23
     9d2:	a0 f0       	brcs	.+40     	; 0x9fc <__fixunssfsi+0x38>
     9d4:	d1 f0       	breq	.+52     	; 0xa0a <__fixunssfsi+0x46>
     9d6:	66 0f       	add	r22, r22
     9d8:	77 1f       	adc	r23, r23
     9da:	88 1f       	adc	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	1a f0       	brmi	.+6      	; 0x9e6 <__fixunssfsi+0x22>
     9e0:	ba 95       	dec	r27
     9e2:	c9 f7       	brne	.-14     	; 0x9d6 <__fixunssfsi+0x12>
     9e4:	12 c0       	rjmp	.+36     	; 0xa0a <__fixunssfsi+0x46>
     9e6:	b1 30       	cpi	r27, 0x01	; 1
     9e8:	81 f0       	breq	.+32     	; 0xa0a <__fixunssfsi+0x46>
     9ea:	9f d0       	rcall	.+318    	; 0xb2a <__fp_zero>
     9ec:	b1 e0       	ldi	r27, 0x01	; 1
     9ee:	08 95       	ret
     9f0:	9c c0       	rjmp	.+312    	; 0xb2a <__fp_zero>
     9f2:	67 2f       	mov	r22, r23
     9f4:	78 2f       	mov	r23, r24
     9f6:	88 27       	eor	r24, r24
     9f8:	b8 5f       	subi	r27, 0xF8	; 248
     9fa:	39 f0       	breq	.+14     	; 0xa0a <__fixunssfsi+0x46>
     9fc:	b9 3f       	cpi	r27, 0xF9	; 249
     9fe:	cc f3       	brlt	.-14     	; 0x9f2 <__fixunssfsi+0x2e>
     a00:	86 95       	lsr	r24
     a02:	77 95       	ror	r23
     a04:	67 95       	ror	r22
     a06:	b3 95       	inc	r27
     a08:	d9 f7       	brne	.-10     	; 0xa00 <__fixunssfsi+0x3c>
     a0a:	3e f4       	brtc	.+14     	; 0xa1a <__fixunssfsi+0x56>
     a0c:	90 95       	com	r25
     a0e:	80 95       	com	r24
     a10:	70 95       	com	r23
     a12:	61 95       	neg	r22
     a14:	7f 4f       	sbci	r23, 0xFF	; 255
     a16:	8f 4f       	sbci	r24, 0xFF	; 255
     a18:	9f 4f       	sbci	r25, 0xFF	; 255
     a1a:	08 95       	ret

00000a1c <__floatunsisf>:
     a1c:	e8 94       	clt
     a1e:	09 c0       	rjmp	.+18     	; 0xa32 <__floatsisf+0x12>

00000a20 <__floatsisf>:
     a20:	97 fb       	bst	r25, 7
     a22:	3e f4       	brtc	.+14     	; 0xa32 <__floatsisf+0x12>
     a24:	90 95       	com	r25
     a26:	80 95       	com	r24
     a28:	70 95       	com	r23
     a2a:	61 95       	neg	r22
     a2c:	7f 4f       	sbci	r23, 0xFF	; 255
     a2e:	8f 4f       	sbci	r24, 0xFF	; 255
     a30:	9f 4f       	sbci	r25, 0xFF	; 255
     a32:	99 23       	and	r25, r25
     a34:	a9 f0       	breq	.+42     	; 0xa60 <__floatsisf+0x40>
     a36:	f9 2f       	mov	r31, r25
     a38:	96 e9       	ldi	r25, 0x96	; 150
     a3a:	bb 27       	eor	r27, r27
     a3c:	93 95       	inc	r25
     a3e:	f6 95       	lsr	r31
     a40:	87 95       	ror	r24
     a42:	77 95       	ror	r23
     a44:	67 95       	ror	r22
     a46:	b7 95       	ror	r27
     a48:	f1 11       	cpse	r31, r1
     a4a:	f8 cf       	rjmp	.-16     	; 0xa3c <__floatsisf+0x1c>
     a4c:	fa f4       	brpl	.+62     	; 0xa8c <__floatsisf+0x6c>
     a4e:	bb 0f       	add	r27, r27
     a50:	11 f4       	brne	.+4      	; 0xa56 <__floatsisf+0x36>
     a52:	60 ff       	sbrs	r22, 0
     a54:	1b c0       	rjmp	.+54     	; 0xa8c <__floatsisf+0x6c>
     a56:	6f 5f       	subi	r22, 0xFF	; 255
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	8f 4f       	sbci	r24, 0xFF	; 255
     a5c:	9f 4f       	sbci	r25, 0xFF	; 255
     a5e:	16 c0       	rjmp	.+44     	; 0xa8c <__floatsisf+0x6c>
     a60:	88 23       	and	r24, r24
     a62:	11 f0       	breq	.+4      	; 0xa68 <__floatsisf+0x48>
     a64:	96 e9       	ldi	r25, 0x96	; 150
     a66:	11 c0       	rjmp	.+34     	; 0xa8a <__floatsisf+0x6a>
     a68:	77 23       	and	r23, r23
     a6a:	21 f0       	breq	.+8      	; 0xa74 <__floatsisf+0x54>
     a6c:	9e e8       	ldi	r25, 0x8E	; 142
     a6e:	87 2f       	mov	r24, r23
     a70:	76 2f       	mov	r23, r22
     a72:	05 c0       	rjmp	.+10     	; 0xa7e <__floatsisf+0x5e>
     a74:	66 23       	and	r22, r22
     a76:	71 f0       	breq	.+28     	; 0xa94 <__floatsisf+0x74>
     a78:	96 e8       	ldi	r25, 0x86	; 134
     a7a:	86 2f       	mov	r24, r22
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	2a f0       	brmi	.+10     	; 0xa8c <__floatsisf+0x6c>
     a82:	9a 95       	dec	r25
     a84:	66 0f       	add	r22, r22
     a86:	77 1f       	adc	r23, r23
     a88:	88 1f       	adc	r24, r24
     a8a:	da f7       	brpl	.-10     	; 0xa82 <__floatsisf+0x62>
     a8c:	88 0f       	add	r24, r24
     a8e:	96 95       	lsr	r25
     a90:	87 95       	ror	r24
     a92:	97 f9       	bld	r25, 7
     a94:	08 95       	ret

00000a96 <__fp_inf>:
     a96:	97 f9       	bld	r25, 7
     a98:	9f 67       	ori	r25, 0x7F	; 127
     a9a:	80 e8       	ldi	r24, 0x80	; 128
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	08 95       	ret

00000aa2 <__fp_nan>:
     aa2:	9f ef       	ldi	r25, 0xFF	; 255
     aa4:	80 ec       	ldi	r24, 0xC0	; 192
     aa6:	08 95       	ret

00000aa8 <__fp_pscA>:
     aa8:	00 24       	eor	r0, r0
     aaa:	0a 94       	dec	r0
     aac:	16 16       	cp	r1, r22
     aae:	17 06       	cpc	r1, r23
     ab0:	18 06       	cpc	r1, r24
     ab2:	09 06       	cpc	r0, r25
     ab4:	08 95       	ret

00000ab6 <__fp_pscB>:
     ab6:	00 24       	eor	r0, r0
     ab8:	0a 94       	dec	r0
     aba:	12 16       	cp	r1, r18
     abc:	13 06       	cpc	r1, r19
     abe:	14 06       	cpc	r1, r20
     ac0:	05 06       	cpc	r0, r21
     ac2:	08 95       	ret

00000ac4 <__fp_round>:
     ac4:	09 2e       	mov	r0, r25
     ac6:	03 94       	inc	r0
     ac8:	00 0c       	add	r0, r0
     aca:	11 f4       	brne	.+4      	; 0xad0 <__fp_round+0xc>
     acc:	88 23       	and	r24, r24
     ace:	52 f0       	brmi	.+20     	; 0xae4 <__fp_round+0x20>
     ad0:	bb 0f       	add	r27, r27
     ad2:	40 f4       	brcc	.+16     	; 0xae4 <__fp_round+0x20>
     ad4:	bf 2b       	or	r27, r31
     ad6:	11 f4       	brne	.+4      	; 0xadc <__fp_round+0x18>
     ad8:	60 ff       	sbrs	r22, 0
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <__fp_round+0x20>
     adc:	6f 5f       	subi	r22, 0xFF	; 255
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	8f 4f       	sbci	r24, 0xFF	; 255
     ae2:	9f 4f       	sbci	r25, 0xFF	; 255
     ae4:	08 95       	ret

00000ae6 <__fp_split3>:
     ae6:	57 fd       	sbrc	r21, 7
     ae8:	90 58       	subi	r25, 0x80	; 128
     aea:	44 0f       	add	r20, r20
     aec:	55 1f       	adc	r21, r21
     aee:	59 f0       	breq	.+22     	; 0xb06 <__fp_splitA+0x10>
     af0:	5f 3f       	cpi	r21, 0xFF	; 255
     af2:	71 f0       	breq	.+28     	; 0xb10 <__fp_splitA+0x1a>
     af4:	47 95       	ror	r20

00000af6 <__fp_splitA>:
     af6:	88 0f       	add	r24, r24
     af8:	97 fb       	bst	r25, 7
     afa:	99 1f       	adc	r25, r25
     afc:	61 f0       	breq	.+24     	; 0xb16 <__fp_splitA+0x20>
     afe:	9f 3f       	cpi	r25, 0xFF	; 255
     b00:	79 f0       	breq	.+30     	; 0xb20 <__fp_splitA+0x2a>
     b02:	87 95       	ror	r24
     b04:	08 95       	ret
     b06:	12 16       	cp	r1, r18
     b08:	13 06       	cpc	r1, r19
     b0a:	14 06       	cpc	r1, r20
     b0c:	55 1f       	adc	r21, r21
     b0e:	f2 cf       	rjmp	.-28     	; 0xaf4 <__fp_split3+0xe>
     b10:	46 95       	lsr	r20
     b12:	f1 df       	rcall	.-30     	; 0xaf6 <__fp_splitA>
     b14:	08 c0       	rjmp	.+16     	; 0xb26 <__fp_splitA+0x30>
     b16:	16 16       	cp	r1, r22
     b18:	17 06       	cpc	r1, r23
     b1a:	18 06       	cpc	r1, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	f1 cf       	rjmp	.-30     	; 0xb02 <__fp_splitA+0xc>
     b20:	86 95       	lsr	r24
     b22:	71 05       	cpc	r23, r1
     b24:	61 05       	cpc	r22, r1
     b26:	08 94       	sec
     b28:	08 95       	ret

00000b2a <__fp_zero>:
     b2a:	e8 94       	clt

00000b2c <__fp_szero>:
     b2c:	bb 27       	eor	r27, r27
     b2e:	66 27       	eor	r22, r22
     b30:	77 27       	eor	r23, r23
     b32:	cb 01       	movw	r24, r22
     b34:	97 f9       	bld	r25, 7
     b36:	08 95       	ret

00000b38 <__mulsf3>:
     b38:	0b d0       	rcall	.+22     	; 0xb50 <__mulsf3x>
     b3a:	c4 cf       	rjmp	.-120    	; 0xac4 <__fp_round>
     b3c:	b5 df       	rcall	.-150    	; 0xaa8 <__fp_pscA>
     b3e:	28 f0       	brcs	.+10     	; 0xb4a <__mulsf3+0x12>
     b40:	ba df       	rcall	.-140    	; 0xab6 <__fp_pscB>
     b42:	18 f0       	brcs	.+6      	; 0xb4a <__mulsf3+0x12>
     b44:	95 23       	and	r25, r21
     b46:	09 f0       	breq	.+2      	; 0xb4a <__mulsf3+0x12>
     b48:	a6 cf       	rjmp	.-180    	; 0xa96 <__fp_inf>
     b4a:	ab cf       	rjmp	.-170    	; 0xaa2 <__fp_nan>
     b4c:	11 24       	eor	r1, r1
     b4e:	ee cf       	rjmp	.-36     	; 0xb2c <__fp_szero>

00000b50 <__mulsf3x>:
     b50:	ca df       	rcall	.-108    	; 0xae6 <__fp_split3>
     b52:	a0 f3       	brcs	.-24     	; 0xb3c <__mulsf3+0x4>

00000b54 <__mulsf3_pse>:
     b54:	95 9f       	mul	r25, r21
     b56:	d1 f3       	breq	.-12     	; 0xb4c <__mulsf3+0x14>
     b58:	95 0f       	add	r25, r21
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	55 1f       	adc	r21, r21
     b5e:	62 9f       	mul	r22, r18
     b60:	f0 01       	movw	r30, r0
     b62:	72 9f       	mul	r23, r18
     b64:	bb 27       	eor	r27, r27
     b66:	f0 0d       	add	r31, r0
     b68:	b1 1d       	adc	r27, r1
     b6a:	63 9f       	mul	r22, r19
     b6c:	aa 27       	eor	r26, r26
     b6e:	f0 0d       	add	r31, r0
     b70:	b1 1d       	adc	r27, r1
     b72:	aa 1f       	adc	r26, r26
     b74:	64 9f       	mul	r22, r20
     b76:	66 27       	eor	r22, r22
     b78:	b0 0d       	add	r27, r0
     b7a:	a1 1d       	adc	r26, r1
     b7c:	66 1f       	adc	r22, r22
     b7e:	82 9f       	mul	r24, r18
     b80:	22 27       	eor	r18, r18
     b82:	b0 0d       	add	r27, r0
     b84:	a1 1d       	adc	r26, r1
     b86:	62 1f       	adc	r22, r18
     b88:	73 9f       	mul	r23, r19
     b8a:	b0 0d       	add	r27, r0
     b8c:	a1 1d       	adc	r26, r1
     b8e:	62 1f       	adc	r22, r18
     b90:	83 9f       	mul	r24, r19
     b92:	a0 0d       	add	r26, r0
     b94:	61 1d       	adc	r22, r1
     b96:	22 1f       	adc	r18, r18
     b98:	74 9f       	mul	r23, r20
     b9a:	33 27       	eor	r19, r19
     b9c:	a0 0d       	add	r26, r0
     b9e:	61 1d       	adc	r22, r1
     ba0:	23 1f       	adc	r18, r19
     ba2:	84 9f       	mul	r24, r20
     ba4:	60 0d       	add	r22, r0
     ba6:	21 1d       	adc	r18, r1
     ba8:	82 2f       	mov	r24, r18
     baa:	76 2f       	mov	r23, r22
     bac:	6a 2f       	mov	r22, r26
     bae:	11 24       	eor	r1, r1
     bb0:	9f 57       	subi	r25, 0x7F	; 127
     bb2:	50 40       	sbci	r21, 0x00	; 0
     bb4:	8a f0       	brmi	.+34     	; 0xbd8 <__mulsf3_pse+0x84>
     bb6:	e1 f0       	breq	.+56     	; 0xbf0 <__mulsf3_pse+0x9c>
     bb8:	88 23       	and	r24, r24
     bba:	4a f0       	brmi	.+18     	; 0xbce <__mulsf3_pse+0x7a>
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	bb 1f       	adc	r27, r27
     bc2:	66 1f       	adc	r22, r22
     bc4:	77 1f       	adc	r23, r23
     bc6:	88 1f       	adc	r24, r24
     bc8:	91 50       	subi	r25, 0x01	; 1
     bca:	50 40       	sbci	r21, 0x00	; 0
     bcc:	a9 f7       	brne	.-22     	; 0xbb8 <__mulsf3_pse+0x64>
     bce:	9e 3f       	cpi	r25, 0xFE	; 254
     bd0:	51 05       	cpc	r21, r1
     bd2:	70 f0       	brcs	.+28     	; 0xbf0 <__mulsf3_pse+0x9c>
     bd4:	60 cf       	rjmp	.-320    	; 0xa96 <__fp_inf>
     bd6:	aa cf       	rjmp	.-172    	; 0xb2c <__fp_szero>
     bd8:	5f 3f       	cpi	r21, 0xFF	; 255
     bda:	ec f3       	brlt	.-6      	; 0xbd6 <__mulsf3_pse+0x82>
     bdc:	98 3e       	cpi	r25, 0xE8	; 232
     bde:	dc f3       	brlt	.-10     	; 0xbd6 <__mulsf3_pse+0x82>
     be0:	86 95       	lsr	r24
     be2:	77 95       	ror	r23
     be4:	67 95       	ror	r22
     be6:	b7 95       	ror	r27
     be8:	f7 95       	ror	r31
     bea:	e7 95       	ror	r30
     bec:	9f 5f       	subi	r25, 0xFF	; 255
     bee:	c1 f7       	brne	.-16     	; 0xbe0 <__mulsf3_pse+0x8c>
     bf0:	fe 2b       	or	r31, r30
     bf2:	88 0f       	add	r24, r24
     bf4:	91 1d       	adc	r25, r1
     bf6:	96 95       	lsr	r25
     bf8:	87 95       	ror	r24
     bfa:	97 f9       	bld	r25, 7
     bfc:	08 95       	ret

00000bfe <__divmodhi4>:
     bfe:	97 fb       	bst	r25, 7
     c00:	07 2e       	mov	r0, r23
     c02:	16 f4       	brtc	.+4      	; 0xc08 <__divmodhi4+0xa>
     c04:	00 94       	com	r0
     c06:	06 d0       	rcall	.+12     	; 0xc14 <__divmodhi4_neg1>
     c08:	77 fd       	sbrc	r23, 7
     c0a:	08 d0       	rcall	.+16     	; 0xc1c <__divmodhi4_neg2>
     c0c:	0b d0       	rcall	.+22     	; 0xc24 <__udivmodhi4>
     c0e:	07 fc       	sbrc	r0, 7
     c10:	05 d0       	rcall	.+10     	; 0xc1c <__divmodhi4_neg2>
     c12:	3e f4       	brtc	.+14     	; 0xc22 <__divmodhi4_exit>

00000c14 <__divmodhi4_neg1>:
     c14:	90 95       	com	r25
     c16:	81 95       	neg	r24
     c18:	9f 4f       	sbci	r25, 0xFF	; 255
     c1a:	08 95       	ret

00000c1c <__divmodhi4_neg2>:
     c1c:	70 95       	com	r23
     c1e:	61 95       	neg	r22
     c20:	7f 4f       	sbci	r23, 0xFF	; 255

00000c22 <__divmodhi4_exit>:
     c22:	08 95       	ret

00000c24 <__udivmodhi4>:
     c24:	aa 1b       	sub	r26, r26
     c26:	bb 1b       	sub	r27, r27
     c28:	51 e1       	ldi	r21, 0x11	; 17
     c2a:	07 c0       	rjmp	.+14     	; 0xc3a <__udivmodhi4_ep>

00000c2c <__udivmodhi4_loop>:
     c2c:	aa 1f       	adc	r26, r26
     c2e:	bb 1f       	adc	r27, r27
     c30:	a6 17       	cp	r26, r22
     c32:	b7 07       	cpc	r27, r23
     c34:	10 f0       	brcs	.+4      	; 0xc3a <__udivmodhi4_ep>
     c36:	a6 1b       	sub	r26, r22
     c38:	b7 0b       	sbc	r27, r23

00000c3a <__udivmodhi4_ep>:
     c3a:	88 1f       	adc	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	5a 95       	dec	r21
     c40:	a9 f7       	brne	.-22     	; 0xc2c <__udivmodhi4_loop>
     c42:	80 95       	com	r24
     c44:	90 95       	com	r25
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	08 95       	ret

00000c4c <do_rand>:
     c4c:	8f 92       	push	r8
     c4e:	9f 92       	push	r9
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
     c62:	68 81       	ld	r22, Y
     c64:	79 81       	ldd	r23, Y+1	; 0x01
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	9b 81       	ldd	r25, Y+3	; 0x03
     c6a:	61 15       	cp	r22, r1
     c6c:	71 05       	cpc	r23, r1
     c6e:	81 05       	cpc	r24, r1
     c70:	91 05       	cpc	r25, r1
     c72:	21 f4       	brne	.+8      	; 0xc7c <do_rand+0x30>
     c74:	64 e2       	ldi	r22, 0x24	; 36
     c76:	79 ed       	ldi	r23, 0xD9	; 217
     c78:	8b e5       	ldi	r24, 0x5B	; 91
     c7a:	97 e0       	ldi	r25, 0x07	; 7
     c7c:	2d e1       	ldi	r18, 0x1D	; 29
     c7e:	33 ef       	ldi	r19, 0xF3	; 243
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	13 d3       	rcall	.+1574   	; 0x12ac <__divmodsi4>
     c86:	49 01       	movw	r8, r18
     c88:	5a 01       	movw	r10, r20
     c8a:	9b 01       	movw	r18, r22
     c8c:	ac 01       	movw	r20, r24
     c8e:	a7 ea       	ldi	r26, 0xA7	; 167
     c90:	b1 e4       	ldi	r27, 0x41	; 65
     c92:	28 d3       	rcall	.+1616   	; 0x12e4 <__muluhisi3>
     c94:	6b 01       	movw	r12, r22
     c96:	7c 01       	movw	r14, r24
     c98:	ac ee       	ldi	r26, 0xEC	; 236
     c9a:	b4 ef       	ldi	r27, 0xF4	; 244
     c9c:	a5 01       	movw	r20, r10
     c9e:	94 01       	movw	r18, r8
     ca0:	2d d3       	rcall	.+1626   	; 0x12fc <__mulohisi3>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	8c 0d       	add	r24, r12
     ca8:	9d 1d       	adc	r25, r13
     caa:	ae 1d       	adc	r26, r14
     cac:	bf 1d       	adc	r27, r15
     cae:	b7 ff       	sbrs	r27, 7
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <do_rand+0x6c>
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	a1 09       	sbc	r26, r1
     cb6:	b0 48       	sbci	r27, 0x80	; 128
     cb8:	88 83       	st	Y, r24
     cba:	99 83       	std	Y+1, r25	; 0x01
     cbc:	aa 83       	std	Y+2, r26	; 0x02
     cbe:	bb 83       	std	Y+3, r27	; 0x03
     cc0:	9f 77       	andi	r25, 0x7F	; 127
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	cf 90       	pop	r12
     cce:	bf 90       	pop	r11
     cd0:	af 90       	pop	r10
     cd2:	9f 90       	pop	r9
     cd4:	8f 90       	pop	r8
     cd6:	08 95       	ret

00000cd8 <rand_r>:
     cd8:	b9 cf       	rjmp	.-142    	; 0xc4c <do_rand>

00000cda <rand>:
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	b6 cf       	rjmp	.-148    	; 0xc4c <do_rand>

00000ce0 <srand>:
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     ce8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cec:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     cf0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     cf4:	08 95       	ret

00000cf6 <sprintf>:
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	2e 97       	sbiw	r28, 0x0e	; 14
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	0d 89       	ldd	r16, Y+21	; 0x15
     d10:	1e 89       	ldd	r17, Y+22	; 0x16
     d12:	86 e0       	ldi	r24, 0x06	; 6
     d14:	8c 83       	std	Y+4, r24	; 0x04
     d16:	1a 83       	std	Y+2, r17	; 0x02
     d18:	09 83       	std	Y+1, r16	; 0x01
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	9f e7       	ldi	r25, 0x7F	; 127
     d1e:	9e 83       	std	Y+6, r25	; 0x06
     d20:	8d 83       	std	Y+5, r24	; 0x05
     d22:	ae 01       	movw	r20, r28
     d24:	47 5e       	subi	r20, 0xE7	; 231
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	6f 89       	ldd	r22, Y+23	; 0x17
     d2a:	78 8d       	ldd	r23, Y+24	; 0x18
     d2c:	ce 01       	movw	r24, r28
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	10 d0       	rcall	.+32     	; 0xd52 <vfprintf>
     d32:	ef 81       	ldd	r30, Y+7	; 0x07
     d34:	f8 85       	ldd	r31, Y+8	; 0x08
     d36:	e0 0f       	add	r30, r16
     d38:	f1 1f       	adc	r31, r17
     d3a:	10 82       	st	Z, r1
     d3c:	2e 96       	adiw	r28, 0x0e	; 14
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	08 95       	ret

00000d52 <vfprintf>:
     d52:	2f 92       	push	r2
     d54:	3f 92       	push	r3
     d56:	4f 92       	push	r4
     d58:	5f 92       	push	r5
     d5a:	6f 92       	push	r6
     d5c:	7f 92       	push	r7
     d5e:	8f 92       	push	r8
     d60:	9f 92       	push	r9
     d62:	af 92       	push	r10
     d64:	bf 92       	push	r11
     d66:	cf 92       	push	r12
     d68:	df 92       	push	r13
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	2b 97       	sbiw	r28, 0x0b	; 11
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	6c 01       	movw	r12, r24
     d88:	7b 01       	movw	r14, r22
     d8a:	8a 01       	movw	r16, r20
     d8c:	fc 01       	movw	r30, r24
     d8e:	17 82       	std	Z+7, r1	; 0x07
     d90:	16 82       	std	Z+6, r1	; 0x06
     d92:	83 81       	ldd	r24, Z+3	; 0x03
     d94:	81 ff       	sbrs	r24, 1
     d96:	bf c1       	rjmp	.+894    	; 0x1116 <__stack+0x17>
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	3c 01       	movw	r6, r24
     d9e:	f6 01       	movw	r30, r12
     da0:	93 81       	ldd	r25, Z+3	; 0x03
     da2:	f7 01       	movw	r30, r14
     da4:	93 fd       	sbrc	r25, 3
     da6:	85 91       	lpm	r24, Z+
     da8:	93 ff       	sbrs	r25, 3
     daa:	81 91       	ld	r24, Z+
     dac:	7f 01       	movw	r14, r30
     dae:	88 23       	and	r24, r24
     db0:	09 f4       	brne	.+2      	; 0xdb4 <vfprintf+0x62>
     db2:	ad c1       	rjmp	.+858    	; 0x110e <__stack+0xf>
     db4:	85 32       	cpi	r24, 0x25	; 37
     db6:	39 f4       	brne	.+14     	; 0xdc6 <vfprintf+0x74>
     db8:	93 fd       	sbrc	r25, 3
     dba:	85 91       	lpm	r24, Z+
     dbc:	93 ff       	sbrs	r25, 3
     dbe:	81 91       	ld	r24, Z+
     dc0:	7f 01       	movw	r14, r30
     dc2:	85 32       	cpi	r24, 0x25	; 37
     dc4:	21 f4       	brne	.+8      	; 0xdce <vfprintf+0x7c>
     dc6:	b6 01       	movw	r22, r12
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	d6 d1       	rcall	.+940    	; 0x1178 <fputc>
     dcc:	e8 cf       	rjmp	.-48     	; 0xd9e <vfprintf+0x4c>
     dce:	91 2c       	mov	r9, r1
     dd0:	21 2c       	mov	r2, r1
     dd2:	31 2c       	mov	r3, r1
     dd4:	ff e1       	ldi	r31, 0x1F	; 31
     dd6:	f3 15       	cp	r31, r3
     dd8:	d8 f0       	brcs	.+54     	; 0xe10 <vfprintf+0xbe>
     dda:	8b 32       	cpi	r24, 0x2B	; 43
     ddc:	79 f0       	breq	.+30     	; 0xdfc <vfprintf+0xaa>
     dde:	38 f4       	brcc	.+14     	; 0xdee <vfprintf+0x9c>
     de0:	80 32       	cpi	r24, 0x20	; 32
     de2:	79 f0       	breq	.+30     	; 0xe02 <vfprintf+0xb0>
     de4:	83 32       	cpi	r24, 0x23	; 35
     de6:	a1 f4       	brne	.+40     	; 0xe10 <vfprintf+0xbe>
     de8:	23 2d       	mov	r18, r3
     dea:	20 61       	ori	r18, 0x10	; 16
     dec:	1d c0       	rjmp	.+58     	; 0xe28 <vfprintf+0xd6>
     dee:	8d 32       	cpi	r24, 0x2D	; 45
     df0:	61 f0       	breq	.+24     	; 0xe0a <vfprintf+0xb8>
     df2:	80 33       	cpi	r24, 0x30	; 48
     df4:	69 f4       	brne	.+26     	; 0xe10 <vfprintf+0xbe>
     df6:	23 2d       	mov	r18, r3
     df8:	21 60       	ori	r18, 0x01	; 1
     dfa:	16 c0       	rjmp	.+44     	; 0xe28 <vfprintf+0xd6>
     dfc:	83 2d       	mov	r24, r3
     dfe:	82 60       	ori	r24, 0x02	; 2
     e00:	38 2e       	mov	r3, r24
     e02:	e3 2d       	mov	r30, r3
     e04:	e4 60       	ori	r30, 0x04	; 4
     e06:	3e 2e       	mov	r3, r30
     e08:	2a c0       	rjmp	.+84     	; 0xe5e <vfprintf+0x10c>
     e0a:	f3 2d       	mov	r31, r3
     e0c:	f8 60       	ori	r31, 0x08	; 8
     e0e:	1d c0       	rjmp	.+58     	; 0xe4a <vfprintf+0xf8>
     e10:	37 fc       	sbrc	r3, 7
     e12:	2d c0       	rjmp	.+90     	; 0xe6e <vfprintf+0x11c>
     e14:	20 ed       	ldi	r18, 0xD0	; 208
     e16:	28 0f       	add	r18, r24
     e18:	2a 30       	cpi	r18, 0x0A	; 10
     e1a:	40 f0       	brcs	.+16     	; 0xe2c <vfprintf+0xda>
     e1c:	8e 32       	cpi	r24, 0x2E	; 46
     e1e:	b9 f4       	brne	.+46     	; 0xe4e <vfprintf+0xfc>
     e20:	36 fc       	sbrc	r3, 6
     e22:	75 c1       	rjmp	.+746    	; 0x110e <__stack+0xf>
     e24:	23 2d       	mov	r18, r3
     e26:	20 64       	ori	r18, 0x40	; 64
     e28:	32 2e       	mov	r3, r18
     e2a:	19 c0       	rjmp	.+50     	; 0xe5e <vfprintf+0x10c>
     e2c:	36 fe       	sbrs	r3, 6
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <vfprintf+0xea>
     e30:	8a e0       	ldi	r24, 0x0A	; 10
     e32:	98 9e       	mul	r9, r24
     e34:	20 0d       	add	r18, r0
     e36:	11 24       	eor	r1, r1
     e38:	92 2e       	mov	r9, r18
     e3a:	11 c0       	rjmp	.+34     	; 0xe5e <vfprintf+0x10c>
     e3c:	ea e0       	ldi	r30, 0x0A	; 10
     e3e:	2e 9e       	mul	r2, r30
     e40:	20 0d       	add	r18, r0
     e42:	11 24       	eor	r1, r1
     e44:	22 2e       	mov	r2, r18
     e46:	f3 2d       	mov	r31, r3
     e48:	f0 62       	ori	r31, 0x20	; 32
     e4a:	3f 2e       	mov	r3, r31
     e4c:	08 c0       	rjmp	.+16     	; 0xe5e <vfprintf+0x10c>
     e4e:	8c 36       	cpi	r24, 0x6C	; 108
     e50:	21 f4       	brne	.+8      	; 0xe5a <vfprintf+0x108>
     e52:	83 2d       	mov	r24, r3
     e54:	80 68       	ori	r24, 0x80	; 128
     e56:	38 2e       	mov	r3, r24
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <vfprintf+0x10c>
     e5a:	88 36       	cpi	r24, 0x68	; 104
     e5c:	41 f4       	brne	.+16     	; 0xe6e <vfprintf+0x11c>
     e5e:	f7 01       	movw	r30, r14
     e60:	93 fd       	sbrc	r25, 3
     e62:	85 91       	lpm	r24, Z+
     e64:	93 ff       	sbrs	r25, 3
     e66:	81 91       	ld	r24, Z+
     e68:	7f 01       	movw	r14, r30
     e6a:	81 11       	cpse	r24, r1
     e6c:	b3 cf       	rjmp	.-154    	; 0xdd4 <vfprintf+0x82>
     e6e:	98 2f       	mov	r25, r24
     e70:	9f 7d       	andi	r25, 0xDF	; 223
     e72:	95 54       	subi	r25, 0x45	; 69
     e74:	93 30       	cpi	r25, 0x03	; 3
     e76:	28 f4       	brcc	.+10     	; 0xe82 <vfprintf+0x130>
     e78:	0c 5f       	subi	r16, 0xFC	; 252
     e7a:	1f 4f       	sbci	r17, 0xFF	; 255
     e7c:	9f e3       	ldi	r25, 0x3F	; 63
     e7e:	99 83       	std	Y+1, r25	; 0x01
     e80:	0d c0       	rjmp	.+26     	; 0xe9c <vfprintf+0x14a>
     e82:	83 36       	cpi	r24, 0x63	; 99
     e84:	31 f0       	breq	.+12     	; 0xe92 <vfprintf+0x140>
     e86:	83 37       	cpi	r24, 0x73	; 115
     e88:	71 f0       	breq	.+28     	; 0xea6 <vfprintf+0x154>
     e8a:	83 35       	cpi	r24, 0x53	; 83
     e8c:	09 f0       	breq	.+2      	; 0xe90 <vfprintf+0x13e>
     e8e:	55 c0       	rjmp	.+170    	; 0xf3a <vfprintf+0x1e8>
     e90:	20 c0       	rjmp	.+64     	; 0xed2 <vfprintf+0x180>
     e92:	f8 01       	movw	r30, r16
     e94:	80 81       	ld	r24, Z
     e96:	89 83       	std	Y+1, r24	; 0x01
     e98:	0e 5f       	subi	r16, 0xFE	; 254
     e9a:	1f 4f       	sbci	r17, 0xFF	; 255
     e9c:	88 24       	eor	r8, r8
     e9e:	83 94       	inc	r8
     ea0:	91 2c       	mov	r9, r1
     ea2:	53 01       	movw	r10, r6
     ea4:	12 c0       	rjmp	.+36     	; 0xeca <vfprintf+0x178>
     ea6:	28 01       	movw	r4, r16
     ea8:	f2 e0       	ldi	r31, 0x02	; 2
     eaa:	4f 0e       	add	r4, r31
     eac:	51 1c       	adc	r5, r1
     eae:	f8 01       	movw	r30, r16
     eb0:	a0 80       	ld	r10, Z
     eb2:	b1 80       	ldd	r11, Z+1	; 0x01
     eb4:	36 fe       	sbrs	r3, 6
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <vfprintf+0x16c>
     eb8:	69 2d       	mov	r22, r9
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <vfprintf+0x170>
     ebe:	6f ef       	ldi	r22, 0xFF	; 255
     ec0:	7f ef       	ldi	r23, 0xFF	; 255
     ec2:	c5 01       	movw	r24, r10
     ec4:	4e d1       	rcall	.+668    	; 0x1162 <strnlen>
     ec6:	4c 01       	movw	r8, r24
     ec8:	82 01       	movw	r16, r4
     eca:	f3 2d       	mov	r31, r3
     ecc:	ff 77       	andi	r31, 0x7F	; 127
     ece:	3f 2e       	mov	r3, r31
     ed0:	15 c0       	rjmp	.+42     	; 0xefc <vfprintf+0x1aa>
     ed2:	28 01       	movw	r4, r16
     ed4:	22 e0       	ldi	r18, 0x02	; 2
     ed6:	42 0e       	add	r4, r18
     ed8:	51 1c       	adc	r5, r1
     eda:	f8 01       	movw	r30, r16
     edc:	a0 80       	ld	r10, Z
     ede:	b1 80       	ldd	r11, Z+1	; 0x01
     ee0:	36 fe       	sbrs	r3, 6
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <vfprintf+0x198>
     ee4:	69 2d       	mov	r22, r9
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <vfprintf+0x19c>
     eea:	6f ef       	ldi	r22, 0xFF	; 255
     eec:	7f ef       	ldi	r23, 0xFF	; 255
     eee:	c5 01       	movw	r24, r10
     ef0:	2d d1       	rcall	.+602    	; 0x114c <strnlen_P>
     ef2:	4c 01       	movw	r8, r24
     ef4:	f3 2d       	mov	r31, r3
     ef6:	f0 68       	ori	r31, 0x80	; 128
     ef8:	3f 2e       	mov	r3, r31
     efa:	82 01       	movw	r16, r4
     efc:	33 fc       	sbrc	r3, 3
     efe:	19 c0       	rjmp	.+50     	; 0xf32 <vfprintf+0x1e0>
     f00:	82 2d       	mov	r24, r2
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	88 16       	cp	r8, r24
     f06:	99 06       	cpc	r9, r25
     f08:	a0 f4       	brcc	.+40     	; 0xf32 <vfprintf+0x1e0>
     f0a:	b6 01       	movw	r22, r12
     f0c:	80 e2       	ldi	r24, 0x20	; 32
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	33 d1       	rcall	.+614    	; 0x1178 <fputc>
     f12:	2a 94       	dec	r2
     f14:	f5 cf       	rjmp	.-22     	; 0xf00 <vfprintf+0x1ae>
     f16:	f5 01       	movw	r30, r10
     f18:	37 fc       	sbrc	r3, 7
     f1a:	85 91       	lpm	r24, Z+
     f1c:	37 fe       	sbrs	r3, 7
     f1e:	81 91       	ld	r24, Z+
     f20:	5f 01       	movw	r10, r30
     f22:	b6 01       	movw	r22, r12
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	28 d1       	rcall	.+592    	; 0x1178 <fputc>
     f28:	21 10       	cpse	r2, r1
     f2a:	2a 94       	dec	r2
     f2c:	21 e0       	ldi	r18, 0x01	; 1
     f2e:	82 1a       	sub	r8, r18
     f30:	91 08       	sbc	r9, r1
     f32:	81 14       	cp	r8, r1
     f34:	91 04       	cpc	r9, r1
     f36:	79 f7       	brne	.-34     	; 0xf16 <vfprintf+0x1c4>
     f38:	e1 c0       	rjmp	.+450    	; 0x10fc <__DATA_REGION_LENGTH__+0xfc>
     f3a:	84 36       	cpi	r24, 0x64	; 100
     f3c:	11 f0       	breq	.+4      	; 0xf42 <vfprintf+0x1f0>
     f3e:	89 36       	cpi	r24, 0x69	; 105
     f40:	39 f5       	brne	.+78     	; 0xf90 <vfprintf+0x23e>
     f42:	f8 01       	movw	r30, r16
     f44:	37 fe       	sbrs	r3, 7
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <vfprintf+0x204>
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	0c 5f       	subi	r16, 0xFC	; 252
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <vfprintf+0x214>
     f56:	60 81       	ld	r22, Z
     f58:	71 81       	ldd	r23, Z+1	; 0x01
     f5a:	07 2e       	mov	r0, r23
     f5c:	00 0c       	add	r0, r0
     f5e:	88 0b       	sbc	r24, r24
     f60:	99 0b       	sbc	r25, r25
     f62:	0e 5f       	subi	r16, 0xFE	; 254
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	f3 2d       	mov	r31, r3
     f68:	ff 76       	andi	r31, 0x6F	; 111
     f6a:	3f 2e       	mov	r3, r31
     f6c:	97 ff       	sbrs	r25, 7
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <vfprintf+0x230>
     f70:	90 95       	com	r25
     f72:	80 95       	com	r24
     f74:	70 95       	com	r23
     f76:	61 95       	neg	r22
     f78:	7f 4f       	sbci	r23, 0xFF	; 255
     f7a:	8f 4f       	sbci	r24, 0xFF	; 255
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	f0 68       	ori	r31, 0x80	; 128
     f80:	3f 2e       	mov	r3, r31
     f82:	2a e0       	ldi	r18, 0x0A	; 10
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	a3 01       	movw	r20, r6
     f88:	33 d1       	rcall	.+614    	; 0x11f0 <__ultoa_invert>
     f8a:	88 2e       	mov	r8, r24
     f8c:	86 18       	sub	r8, r6
     f8e:	44 c0       	rjmp	.+136    	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
     f90:	85 37       	cpi	r24, 0x75	; 117
     f92:	31 f4       	brne	.+12     	; 0xfa0 <vfprintf+0x24e>
     f94:	23 2d       	mov	r18, r3
     f96:	2f 7e       	andi	r18, 0xEF	; 239
     f98:	b2 2e       	mov	r11, r18
     f9a:	2a e0       	ldi	r18, 0x0A	; 10
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	25 c0       	rjmp	.+74     	; 0xfea <vfprintf+0x298>
     fa0:	93 2d       	mov	r25, r3
     fa2:	99 7f       	andi	r25, 0xF9	; 249
     fa4:	b9 2e       	mov	r11, r25
     fa6:	8f 36       	cpi	r24, 0x6F	; 111
     fa8:	c1 f0       	breq	.+48     	; 0xfda <vfprintf+0x288>
     faa:	18 f4       	brcc	.+6      	; 0xfb2 <vfprintf+0x260>
     fac:	88 35       	cpi	r24, 0x58	; 88
     fae:	79 f0       	breq	.+30     	; 0xfce <vfprintf+0x27c>
     fb0:	ae c0       	rjmp	.+348    	; 0x110e <__stack+0xf>
     fb2:	80 37       	cpi	r24, 0x70	; 112
     fb4:	19 f0       	breq	.+6      	; 0xfbc <vfprintf+0x26a>
     fb6:	88 37       	cpi	r24, 0x78	; 120
     fb8:	21 f0       	breq	.+8      	; 0xfc2 <vfprintf+0x270>
     fba:	a9 c0       	rjmp	.+338    	; 0x110e <__stack+0xf>
     fbc:	e9 2f       	mov	r30, r25
     fbe:	e0 61       	ori	r30, 0x10	; 16
     fc0:	be 2e       	mov	r11, r30
     fc2:	b4 fe       	sbrs	r11, 4
     fc4:	0d c0       	rjmp	.+26     	; 0xfe0 <vfprintf+0x28e>
     fc6:	fb 2d       	mov	r31, r11
     fc8:	f4 60       	ori	r31, 0x04	; 4
     fca:	bf 2e       	mov	r11, r31
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <vfprintf+0x28e>
     fce:	34 fe       	sbrs	r3, 4
     fd0:	0a c0       	rjmp	.+20     	; 0xfe6 <vfprintf+0x294>
     fd2:	29 2f       	mov	r18, r25
     fd4:	26 60       	ori	r18, 0x06	; 6
     fd6:	b2 2e       	mov	r11, r18
     fd8:	06 c0       	rjmp	.+12     	; 0xfe6 <vfprintf+0x294>
     fda:	28 e0       	ldi	r18, 0x08	; 8
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	05 c0       	rjmp	.+10     	; 0xfea <vfprintf+0x298>
     fe0:	20 e1       	ldi	r18, 0x10	; 16
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <vfprintf+0x298>
     fe6:	20 e1       	ldi	r18, 0x10	; 16
     fe8:	32 e0       	ldi	r19, 0x02	; 2
     fea:	f8 01       	movw	r30, r16
     fec:	b7 fe       	sbrs	r11, 7
     fee:	07 c0       	rjmp	.+14     	; 0xffe <vfprintf+0x2ac>
     ff0:	60 81       	ld	r22, Z
     ff2:	71 81       	ldd	r23, Z+1	; 0x01
     ff4:	82 81       	ldd	r24, Z+2	; 0x02
     ff6:	93 81       	ldd	r25, Z+3	; 0x03
     ff8:	0c 5f       	subi	r16, 0xFC	; 252
     ffa:	1f 4f       	sbci	r17, 0xFF	; 255
     ffc:	06 c0       	rjmp	.+12     	; 0x100a <__DATA_REGION_LENGTH__+0xa>
     ffe:	60 81       	ld	r22, Z
    1000:	71 81       	ldd	r23, Z+1	; 0x01
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 5f       	subi	r16, 0xFE	; 254
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	a3 01       	movw	r20, r6
    100c:	f1 d0       	rcall	.+482    	; 0x11f0 <__ultoa_invert>
    100e:	88 2e       	mov	r8, r24
    1010:	86 18       	sub	r8, r6
    1012:	fb 2d       	mov	r31, r11
    1014:	ff 77       	andi	r31, 0x7F	; 127
    1016:	3f 2e       	mov	r3, r31
    1018:	36 fe       	sbrs	r3, 6
    101a:	0d c0       	rjmp	.+26     	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
    101c:	23 2d       	mov	r18, r3
    101e:	2e 7f       	andi	r18, 0xFE	; 254
    1020:	a2 2e       	mov	r10, r18
    1022:	89 14       	cp	r8, r9
    1024:	58 f4       	brcc	.+22     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1026:	34 fe       	sbrs	r3, 4
    1028:	0b c0       	rjmp	.+22     	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    102a:	32 fc       	sbrc	r3, 2
    102c:	09 c0       	rjmp	.+18     	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    102e:	83 2d       	mov	r24, r3
    1030:	8e 7e       	andi	r24, 0xEE	; 238
    1032:	a8 2e       	mov	r10, r24
    1034:	05 c0       	rjmp	.+10     	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    1036:	b8 2c       	mov	r11, r8
    1038:	a3 2c       	mov	r10, r3
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <__DATA_REGION_LENGTH__+0x42>
    103c:	b8 2c       	mov	r11, r8
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <__DATA_REGION_LENGTH__+0x42>
    1040:	b9 2c       	mov	r11, r9
    1042:	a4 fe       	sbrs	r10, 4
    1044:	0f c0       	rjmp	.+30     	; 0x1064 <__DATA_REGION_LENGTH__+0x64>
    1046:	fe 01       	movw	r30, r28
    1048:	e8 0d       	add	r30, r8
    104a:	f1 1d       	adc	r31, r1
    104c:	80 81       	ld	r24, Z
    104e:	80 33       	cpi	r24, 0x30	; 48
    1050:	21 f4       	brne	.+8      	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
    1052:	9a 2d       	mov	r25, r10
    1054:	99 7e       	andi	r25, 0xE9	; 233
    1056:	a9 2e       	mov	r10, r25
    1058:	09 c0       	rjmp	.+18     	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
    105a:	a2 fe       	sbrs	r10, 2
    105c:	06 c0       	rjmp	.+12     	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
    105e:	b3 94       	inc	r11
    1060:	b3 94       	inc	r11
    1062:	04 c0       	rjmp	.+8      	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
    1064:	8a 2d       	mov	r24, r10
    1066:	86 78       	andi	r24, 0x86	; 134
    1068:	09 f0       	breq	.+2      	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
    106a:	b3 94       	inc	r11
    106c:	a3 fc       	sbrc	r10, 3
    106e:	10 c0       	rjmp	.+32     	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
    1070:	a0 fe       	sbrs	r10, 0
    1072:	06 c0       	rjmp	.+12     	; 0x1080 <__DATA_REGION_LENGTH__+0x80>
    1074:	b2 14       	cp	r11, r2
    1076:	80 f4       	brcc	.+32     	; 0x1098 <__DATA_REGION_LENGTH__+0x98>
    1078:	28 0c       	add	r2, r8
    107a:	92 2c       	mov	r9, r2
    107c:	9b 18       	sub	r9, r11
    107e:	0d c0       	rjmp	.+26     	; 0x109a <__DATA_REGION_LENGTH__+0x9a>
    1080:	b2 14       	cp	r11, r2
    1082:	58 f4       	brcc	.+22     	; 0x109a <__DATA_REGION_LENGTH__+0x9a>
    1084:	b6 01       	movw	r22, r12
    1086:	80 e2       	ldi	r24, 0x20	; 32
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	76 d0       	rcall	.+236    	; 0x1178 <fputc>
    108c:	b3 94       	inc	r11
    108e:	f8 cf       	rjmp	.-16     	; 0x1080 <__DATA_REGION_LENGTH__+0x80>
    1090:	b2 14       	cp	r11, r2
    1092:	18 f4       	brcc	.+6      	; 0x109a <__DATA_REGION_LENGTH__+0x9a>
    1094:	2b 18       	sub	r2, r11
    1096:	02 c0       	rjmp	.+4      	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
    1098:	98 2c       	mov	r9, r8
    109a:	21 2c       	mov	r2, r1
    109c:	a4 fe       	sbrs	r10, 4
    109e:	0f c0       	rjmp	.+30     	; 0x10be <__DATA_REGION_LENGTH__+0xbe>
    10a0:	b6 01       	movw	r22, r12
    10a2:	80 e3       	ldi	r24, 0x30	; 48
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	68 d0       	rcall	.+208    	; 0x1178 <fputc>
    10a8:	a2 fe       	sbrs	r10, 2
    10aa:	16 c0       	rjmp	.+44     	; 0x10d8 <__DATA_REGION_LENGTH__+0xd8>
    10ac:	a1 fc       	sbrc	r10, 1
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <__DATA_REGION_LENGTH__+0xb6>
    10b0:	88 e7       	ldi	r24, 0x78	; 120
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <__DATA_REGION_LENGTH__+0xba>
    10b6:	88 e5       	ldi	r24, 0x58	; 88
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	b6 01       	movw	r22, r12
    10bc:	0c c0       	rjmp	.+24     	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
    10be:	8a 2d       	mov	r24, r10
    10c0:	86 78       	andi	r24, 0x86	; 134
    10c2:	51 f0       	breq	.+20     	; 0x10d8 <__DATA_REGION_LENGTH__+0xd8>
    10c4:	a1 fe       	sbrs	r10, 1
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <__DATA_REGION_LENGTH__+0xcc>
    10c8:	8b e2       	ldi	r24, 0x2B	; 43
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <__DATA_REGION_LENGTH__+0xce>
    10cc:	80 e2       	ldi	r24, 0x20	; 32
    10ce:	a7 fc       	sbrc	r10, 7
    10d0:	8d e2       	ldi	r24, 0x2D	; 45
    10d2:	b6 01       	movw	r22, r12
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	50 d0       	rcall	.+160    	; 0x1178 <fputc>
    10d8:	89 14       	cp	r8, r9
    10da:	30 f4       	brcc	.+12     	; 0x10e8 <__DATA_REGION_LENGTH__+0xe8>
    10dc:	b6 01       	movw	r22, r12
    10de:	80 e3       	ldi	r24, 0x30	; 48
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	4a d0       	rcall	.+148    	; 0x1178 <fputc>
    10e4:	9a 94       	dec	r9
    10e6:	f8 cf       	rjmp	.-16     	; 0x10d8 <__DATA_REGION_LENGTH__+0xd8>
    10e8:	8a 94       	dec	r8
    10ea:	f3 01       	movw	r30, r6
    10ec:	e8 0d       	add	r30, r8
    10ee:	f1 1d       	adc	r31, r1
    10f0:	80 81       	ld	r24, Z
    10f2:	b6 01       	movw	r22, r12
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	40 d0       	rcall	.+128    	; 0x1178 <fputc>
    10f8:	81 10       	cpse	r8, r1
    10fa:	f6 cf       	rjmp	.-20     	; 0x10e8 <__DATA_REGION_LENGTH__+0xe8>
    10fc:	22 20       	and	r2, r2
    10fe:	09 f4       	brne	.+2      	; 0x1102 <__stack+0x3>
    1100:	4e ce       	rjmp	.-868    	; 0xd9e <vfprintf+0x4c>
    1102:	b6 01       	movw	r22, r12
    1104:	80 e2       	ldi	r24, 0x20	; 32
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	37 d0       	rcall	.+110    	; 0x1178 <fputc>
    110a:	2a 94       	dec	r2
    110c:	f7 cf       	rjmp	.-18     	; 0x10fc <__DATA_REGION_LENGTH__+0xfc>
    110e:	f6 01       	movw	r30, r12
    1110:	86 81       	ldd	r24, Z+6	; 0x06
    1112:	97 81       	ldd	r25, Z+7	; 0x07
    1114:	02 c0       	rjmp	.+4      	; 0x111a <__stack+0x1b>
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	9f ef       	ldi	r25, 0xFF	; 255
    111a:	2b 96       	adiw	r28, 0x0b	; 11
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	bf 90       	pop	r11
    1138:	af 90       	pop	r10
    113a:	9f 90       	pop	r9
    113c:	8f 90       	pop	r8
    113e:	7f 90       	pop	r7
    1140:	6f 90       	pop	r6
    1142:	5f 90       	pop	r5
    1144:	4f 90       	pop	r4
    1146:	3f 90       	pop	r3
    1148:	2f 90       	pop	r2
    114a:	08 95       	ret

0000114c <strnlen_P>:
    114c:	fc 01       	movw	r30, r24
    114e:	05 90       	lpm	r0, Z+
    1150:	61 50       	subi	r22, 0x01	; 1
    1152:	70 40       	sbci	r23, 0x00	; 0
    1154:	01 10       	cpse	r0, r1
    1156:	d8 f7       	brcc	.-10     	; 0x114e <strnlen_P+0x2>
    1158:	80 95       	com	r24
    115a:	90 95       	com	r25
    115c:	8e 0f       	add	r24, r30
    115e:	9f 1f       	adc	r25, r31
    1160:	08 95       	ret

00001162 <strnlen>:
    1162:	fc 01       	movw	r30, r24
    1164:	61 50       	subi	r22, 0x01	; 1
    1166:	70 40       	sbci	r23, 0x00	; 0
    1168:	01 90       	ld	r0, Z+
    116a:	01 10       	cpse	r0, r1
    116c:	d8 f7       	brcc	.-10     	; 0x1164 <strnlen+0x2>
    116e:	80 95       	com	r24
    1170:	90 95       	com	r25
    1172:	8e 0f       	add	r24, r30
    1174:	9f 1f       	adc	r25, r31
    1176:	08 95       	ret

00001178 <fputc>:
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	fb 01       	movw	r30, r22
    1182:	23 81       	ldd	r18, Z+3	; 0x03
    1184:	21 fd       	sbrc	r18, 1
    1186:	03 c0       	rjmp	.+6      	; 0x118e <fputc+0x16>
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	9f ef       	ldi	r25, 0xFF	; 255
    118c:	2c c0       	rjmp	.+88     	; 0x11e6 <fputc+0x6e>
    118e:	22 ff       	sbrs	r18, 2
    1190:	16 c0       	rjmp	.+44     	; 0x11be <fputc+0x46>
    1192:	46 81       	ldd	r20, Z+6	; 0x06
    1194:	57 81       	ldd	r21, Z+7	; 0x07
    1196:	24 81       	ldd	r18, Z+4	; 0x04
    1198:	35 81       	ldd	r19, Z+5	; 0x05
    119a:	42 17       	cp	r20, r18
    119c:	53 07       	cpc	r21, r19
    119e:	44 f4       	brge	.+16     	; 0x11b0 <fputc+0x38>
    11a0:	a0 81       	ld	r26, Z
    11a2:	b1 81       	ldd	r27, Z+1	; 0x01
    11a4:	9d 01       	movw	r18, r26
    11a6:	2f 5f       	subi	r18, 0xFF	; 255
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	31 83       	std	Z+1, r19	; 0x01
    11ac:	20 83       	st	Z, r18
    11ae:	8c 93       	st	X, r24
    11b0:	26 81       	ldd	r18, Z+6	; 0x06
    11b2:	37 81       	ldd	r19, Z+7	; 0x07
    11b4:	2f 5f       	subi	r18, 0xFF	; 255
    11b6:	3f 4f       	sbci	r19, 0xFF	; 255
    11b8:	37 83       	std	Z+7, r19	; 0x07
    11ba:	26 83       	std	Z+6, r18	; 0x06
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <fputc+0x6e>
    11be:	8b 01       	movw	r16, r22
    11c0:	ec 01       	movw	r28, r24
    11c2:	fb 01       	movw	r30, r22
    11c4:	00 84       	ldd	r0, Z+8	; 0x08
    11c6:	f1 85       	ldd	r31, Z+9	; 0x09
    11c8:	e0 2d       	mov	r30, r0
    11ca:	09 95       	icall
    11cc:	89 2b       	or	r24, r25
    11ce:	e1 f6       	brne	.-72     	; 0x1188 <fputc+0x10>
    11d0:	d8 01       	movw	r26, r16
    11d2:	16 96       	adiw	r26, 0x06	; 6
    11d4:	8d 91       	ld	r24, X+
    11d6:	9c 91       	ld	r25, X
    11d8:	17 97       	sbiw	r26, 0x07	; 7
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	17 96       	adiw	r26, 0x07	; 7
    11de:	9c 93       	st	X, r25
    11e0:	8e 93       	st	-X, r24
    11e2:	16 97       	sbiw	r26, 0x06	; 6
    11e4:	ce 01       	movw	r24, r28
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	08 95       	ret

000011f0 <__ultoa_invert>:
    11f0:	fa 01       	movw	r30, r20
    11f2:	aa 27       	eor	r26, r26
    11f4:	28 30       	cpi	r18, 0x08	; 8
    11f6:	51 f1       	breq	.+84     	; 0x124c <__ultoa_invert+0x5c>
    11f8:	20 31       	cpi	r18, 0x10	; 16
    11fa:	81 f1       	breq	.+96     	; 0x125c <__ultoa_invert+0x6c>
    11fc:	e8 94       	clt
    11fe:	6f 93       	push	r22
    1200:	6e 7f       	andi	r22, 0xFE	; 254
    1202:	6e 5f       	subi	r22, 0xFE	; 254
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	af 4f       	sbci	r26, 0xFF	; 255
    120c:	b1 e0       	ldi	r27, 0x01	; 1
    120e:	3e d0       	rcall	.+124    	; 0x128c <__ultoa_invert+0x9c>
    1210:	b4 e0       	ldi	r27, 0x04	; 4
    1212:	3c d0       	rcall	.+120    	; 0x128c <__ultoa_invert+0x9c>
    1214:	67 0f       	add	r22, r23
    1216:	78 1f       	adc	r23, r24
    1218:	89 1f       	adc	r24, r25
    121a:	9a 1f       	adc	r25, r26
    121c:	a1 1d       	adc	r26, r1
    121e:	68 0f       	add	r22, r24
    1220:	79 1f       	adc	r23, r25
    1222:	8a 1f       	adc	r24, r26
    1224:	91 1d       	adc	r25, r1
    1226:	a1 1d       	adc	r26, r1
    1228:	6a 0f       	add	r22, r26
    122a:	71 1d       	adc	r23, r1
    122c:	81 1d       	adc	r24, r1
    122e:	91 1d       	adc	r25, r1
    1230:	a1 1d       	adc	r26, r1
    1232:	20 d0       	rcall	.+64     	; 0x1274 <__ultoa_invert+0x84>
    1234:	09 f4       	brne	.+2      	; 0x1238 <__ultoa_invert+0x48>
    1236:	68 94       	set
    1238:	3f 91       	pop	r19
    123a:	2a e0       	ldi	r18, 0x0A	; 10
    123c:	26 9f       	mul	r18, r22
    123e:	11 24       	eor	r1, r1
    1240:	30 19       	sub	r19, r0
    1242:	30 5d       	subi	r19, 0xD0	; 208
    1244:	31 93       	st	Z+, r19
    1246:	de f6       	brtc	.-74     	; 0x11fe <__ultoa_invert+0xe>
    1248:	cf 01       	movw	r24, r30
    124a:	08 95       	ret
    124c:	46 2f       	mov	r20, r22
    124e:	47 70       	andi	r20, 0x07	; 7
    1250:	40 5d       	subi	r20, 0xD0	; 208
    1252:	41 93       	st	Z+, r20
    1254:	b3 e0       	ldi	r27, 0x03	; 3
    1256:	0f d0       	rcall	.+30     	; 0x1276 <__ultoa_invert+0x86>
    1258:	c9 f7       	brne	.-14     	; 0x124c <__ultoa_invert+0x5c>
    125a:	f6 cf       	rjmp	.-20     	; 0x1248 <__ultoa_invert+0x58>
    125c:	46 2f       	mov	r20, r22
    125e:	4f 70       	andi	r20, 0x0F	; 15
    1260:	40 5d       	subi	r20, 0xD0	; 208
    1262:	4a 33       	cpi	r20, 0x3A	; 58
    1264:	18 f0       	brcs	.+6      	; 0x126c <__ultoa_invert+0x7c>
    1266:	49 5d       	subi	r20, 0xD9	; 217
    1268:	31 fd       	sbrc	r19, 1
    126a:	40 52       	subi	r20, 0x20	; 32
    126c:	41 93       	st	Z+, r20
    126e:	02 d0       	rcall	.+4      	; 0x1274 <__ultoa_invert+0x84>
    1270:	a9 f7       	brne	.-22     	; 0x125c <__ultoa_invert+0x6c>
    1272:	ea cf       	rjmp	.-44     	; 0x1248 <__ultoa_invert+0x58>
    1274:	b4 e0       	ldi	r27, 0x04	; 4
    1276:	a6 95       	lsr	r26
    1278:	97 95       	ror	r25
    127a:	87 95       	ror	r24
    127c:	77 95       	ror	r23
    127e:	67 95       	ror	r22
    1280:	ba 95       	dec	r27
    1282:	c9 f7       	brne	.-14     	; 0x1276 <__ultoa_invert+0x86>
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	61 05       	cpc	r22, r1
    1288:	71 05       	cpc	r23, r1
    128a:	08 95       	ret
    128c:	9b 01       	movw	r18, r22
    128e:	ac 01       	movw	r20, r24
    1290:	0a 2e       	mov	r0, r26
    1292:	06 94       	lsr	r0
    1294:	57 95       	ror	r21
    1296:	47 95       	ror	r20
    1298:	37 95       	ror	r19
    129a:	27 95       	ror	r18
    129c:	ba 95       	dec	r27
    129e:	c9 f7       	brne	.-14     	; 0x1292 <__ultoa_invert+0xa2>
    12a0:	62 0f       	add	r22, r18
    12a2:	73 1f       	adc	r23, r19
    12a4:	84 1f       	adc	r24, r20
    12a6:	95 1f       	adc	r25, r21
    12a8:	a0 1d       	adc	r26, r0
    12aa:	08 95       	ret

000012ac <__divmodsi4>:
    12ac:	05 2e       	mov	r0, r21
    12ae:	97 fb       	bst	r25, 7
    12b0:	16 f4       	brtc	.+4      	; 0x12b6 <__divmodsi4+0xa>
    12b2:	00 94       	com	r0
    12b4:	0f d0       	rcall	.+30     	; 0x12d4 <__negsi2>
    12b6:	57 fd       	sbrc	r21, 7
    12b8:	05 d0       	rcall	.+10     	; 0x12c4 <__divmodsi4_neg2>
    12ba:	24 d0       	rcall	.+72     	; 0x1304 <__udivmodsi4>
    12bc:	07 fc       	sbrc	r0, 7
    12be:	02 d0       	rcall	.+4      	; 0x12c4 <__divmodsi4_neg2>
    12c0:	46 f4       	brtc	.+16     	; 0x12d2 <__divmodsi4_exit>
    12c2:	08 c0       	rjmp	.+16     	; 0x12d4 <__negsi2>

000012c4 <__divmodsi4_neg2>:
    12c4:	50 95       	com	r21
    12c6:	40 95       	com	r20
    12c8:	30 95       	com	r19
    12ca:	21 95       	neg	r18
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	4f 4f       	sbci	r20, 0xFF	; 255
    12d0:	5f 4f       	sbci	r21, 0xFF	; 255

000012d2 <__divmodsi4_exit>:
    12d2:	08 95       	ret

000012d4 <__negsi2>:
    12d4:	90 95       	com	r25
    12d6:	80 95       	com	r24
    12d8:	70 95       	com	r23
    12da:	61 95       	neg	r22
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	08 95       	ret

000012e4 <__muluhisi3>:
    12e4:	31 d0       	rcall	.+98     	; 0x1348 <__umulhisi3>
    12e6:	a5 9f       	mul	r26, r21
    12e8:	90 0d       	add	r25, r0
    12ea:	b4 9f       	mul	r27, r20
    12ec:	90 0d       	add	r25, r0
    12ee:	a4 9f       	mul	r26, r20
    12f0:	80 0d       	add	r24, r0
    12f2:	91 1d       	adc	r25, r1
    12f4:	11 24       	eor	r1, r1
    12f6:	08 95       	ret

000012f8 <__mulshisi3>:
    12f8:	b7 ff       	sbrs	r27, 7
    12fa:	f4 cf       	rjmp	.-24     	; 0x12e4 <__muluhisi3>

000012fc <__mulohisi3>:
    12fc:	f3 df       	rcall	.-26     	; 0x12e4 <__muluhisi3>
    12fe:	82 1b       	sub	r24, r18
    1300:	93 0b       	sbc	r25, r19
    1302:	08 95       	ret

00001304 <__udivmodsi4>:
    1304:	a1 e2       	ldi	r26, 0x21	; 33
    1306:	1a 2e       	mov	r1, r26
    1308:	aa 1b       	sub	r26, r26
    130a:	bb 1b       	sub	r27, r27
    130c:	fd 01       	movw	r30, r26
    130e:	0d c0       	rjmp	.+26     	; 0x132a <__udivmodsi4_ep>

00001310 <__udivmodsi4_loop>:
    1310:	aa 1f       	adc	r26, r26
    1312:	bb 1f       	adc	r27, r27
    1314:	ee 1f       	adc	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	a2 17       	cp	r26, r18
    131a:	b3 07       	cpc	r27, r19
    131c:	e4 07       	cpc	r30, r20
    131e:	f5 07       	cpc	r31, r21
    1320:	20 f0       	brcs	.+8      	; 0x132a <__udivmodsi4_ep>
    1322:	a2 1b       	sub	r26, r18
    1324:	b3 0b       	sbc	r27, r19
    1326:	e4 0b       	sbc	r30, r20
    1328:	f5 0b       	sbc	r31, r21

0000132a <__udivmodsi4_ep>:
    132a:	66 1f       	adc	r22, r22
    132c:	77 1f       	adc	r23, r23
    132e:	88 1f       	adc	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	1a 94       	dec	r1
    1334:	69 f7       	brne	.-38     	; 0x1310 <__udivmodsi4_loop>
    1336:	60 95       	com	r22
    1338:	70 95       	com	r23
    133a:	80 95       	com	r24
    133c:	90 95       	com	r25
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
    1342:	bd 01       	movw	r22, r26
    1344:	cf 01       	movw	r24, r30
    1346:	08 95       	ret

00001348 <__umulhisi3>:
    1348:	a2 9f       	mul	r26, r18
    134a:	b0 01       	movw	r22, r0
    134c:	b3 9f       	mul	r27, r19
    134e:	c0 01       	movw	r24, r0
    1350:	a3 9f       	mul	r26, r19
    1352:	70 0d       	add	r23, r0
    1354:	81 1d       	adc	r24, r1
    1356:	11 24       	eor	r1, r1
    1358:	91 1d       	adc	r25, r1
    135a:	b2 9f       	mul	r27, r18
    135c:	70 0d       	add	r23, r0
    135e:	81 1d       	adc	r24, r1
    1360:	11 24       	eor	r1, r1
    1362:	91 1d       	adc	r25, r1
    1364:	08 95       	ret

00001366 <_exit>:
    1366:	f8 94       	cli

00001368 <__stop_program>:
    1368:	ff cf       	rjmp	.-2      	; 0x1368 <__stop_program>
