
EindOpdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000220  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800108  00800108  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014c3  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd8  00000000  00000000  000018f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ae  00000000  00000000  000025cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00002f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079b  00000000  00000000  00003250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000843  00000000  00000000  000039eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000422e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c7 c0       	rjmp	.+398    	; 0x1c0 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	aa d0       	rcall	.+340    	; 0x218 <main>
  c4:	ab c0       	rjmp	.+342    	; 0x21c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <GameLogic_Init>:
	}
}

GAMELOGIC_ERROR GameLogic_Init()
{
	display_init();
  c8:	5d d0       	rcall	.+186    	; 0x184 <display_init>
		lcd_write_data(1);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	14 c0       	rjmp	.+40     	; 0xf8 <lcd_write_data>
//
	//TRESHOLD_MEASURMENT = accelerometer_read();
//
	//return UNKNOWN;
    //display_text("---starting up game---");
}
  d0:	08 95       	ret

000000d2 <switch_E>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <switch_E+0xa>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <switch_E+0x10>
  e2:	00 00       	nop
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	87 7f       	andi	r24, 0xF7	; 247
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	8f ec       	ldi	r24, 0xCF	; 207
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <switch_E+0x1c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <switch_E+0x22>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <lcd_write_data>:
  f8:	cf 93       	push	r28
  fa:	c8 2f       	mov	r28, r24
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	84 60       	ori	r24, 0x04	; 4
 102:	85 bb       	out	0x15, r24	; 21
 104:	e6 df       	rcall	.-52     	; 0xd2 <switch_E>
 106:	c2 95       	swap	r28
 108:	c0 7f       	andi	r28, 0xF0	; 240
 10a:	c5 bb       	out	0x15, r28	; 21
 10c:	85 b3       	in	r24, 0x15	; 21
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	85 bb       	out	0x15, r24	; 21
 112:	df df       	rcall	.-66     	; 0xd2 <switch_E>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_write_command>:
 118:	cf 93       	push	r28
 11a:	c8 2f       	mov	r28, r24
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	85 bb       	out	0x15, r24	; 21
 124:	d6 df       	rcall	.-84     	; 0xd2 <switch_E>
 126:	c2 95       	swap	r28
 128:	c0 7f       	andi	r28, 0xF0	; 240
 12a:	c5 bb       	out	0x15, r28	; 21
 12c:	85 b3       	in	r24, 0x15	; 21
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	85 bb       	out	0x15, r24	; 21
 132:	cf df       	rcall	.-98     	; 0xd2 <switch_E>
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <display_clear>:
		_delay_ms(2);
	}
}

void display_clear(){
	lcd_write_command(0x01);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	ee df       	rcall	.-36     	; 0x118 <lcd_write_command>
 13c:	8f e9       	ldi	r24, 0x9F	; 159
 13e:	9f e0       	ldi	r25, 0x0F	; 15
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <display_clear+0x8>
 144:	00 c0       	rjmp	.+0      	; 0x146 <display_clear+0xe>
 146:	00 00       	nop
	_delay_ms(2);
	lcd_write_command(0x80);
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	e6 cf       	rjmp	.-52     	; 0x118 <lcd_write_command>
 14c:	08 95       	ret

0000014e <LCD_Custom_Char>:
}

void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	8b 01       	movw	r16, r22
	unsigned char i;
	if(loc<8)
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	80 f4       	brcc	.+32     	; 0x17a <LCD_Custom_Char+0x2c>
	{
		lcd_write_command(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 96       	adiw	r24, 0x08	; 8
 15e:	88 0f       	add	r24, r24
 160:	88 0f       	add	r24, r24
 162:	88 0f       	add	r24, r24
 164:	d9 df       	rcall	.-78     	; 0x118 <lcd_write_command>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	06 c0       	rjmp	.+12     	; 0x176 <LCD_Custom_Char+0x28>
		lcd_write_data(msg[i]);
 16a:	f8 01       	movw	r30, r16
 16c:	ec 0f       	add	r30, r28
 16e:	f1 1d       	adc	r31, r1
 170:	80 81       	ld	r24, Z
 172:	c2 df       	rcall	.-124    	; 0xf8 <lcd_write_data>
{
	unsigned char i;
	if(loc<8)
	{
		lcd_write_command(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
 174:	cf 5f       	subi	r28, 0xFF	; 255
 176:	c8 30       	cpi	r28, 0x08	; 8
		lcd_write_data(msg[i]);
	}
	display_clear();
 178:	c0 f3       	brcs	.-16     	; 0x16a <LCD_Custom_Char+0x1c>
 17a:	de df       	rcall	.-68     	; 0x138 <display_clear>
}
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <display_init>:
void display_init() {
 184:	cf 93       	push	r28
	// See table 13 from the HD44780U datasheet.
	DDRC = 0xFF;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 18a:	15 ba       	out	0x15, r1	; 21
	
	// Step 2 Function set
	PORTC = 0x20;
 18c:	c0 e2       	ldi	r28, 0x20	; 32
 18e:	c5 bb       	out	0x15, r28	; 21
	switch_E();
 190:	a0 df       	rcall	.-192    	; 0xd2 <switch_E>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	switch_E();
 192:	c5 bb       	out	0x15, r28	; 21
 194:	9e df       	rcall	.-196    	; 0xd2 <switch_E>
	PORTC = 0x80;
 196:	80 e8       	ldi	r24, 0x80	; 128
	switch_E();
 198:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 19a:	9b df       	rcall	.-202    	; 0xd2 <switch_E>
	switch_E();
 19c:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 19e:	99 df       	rcall	.-206    	; 0xd2 <switch_E>
	switch_E();
 1a0:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 1a2:	85 bb       	out	0x15, r24	; 21
	switch_E();
 1a4:	96 df       	rcall	.-212    	; 0xd2 <switch_E>
	PORTC = 0x60;
 1a6:	15 ba       	out	0x15, r1	; 21
 1a8:	94 df       	rcall	.-216    	; 0xd2 <switch_E>
	switch_E();
 1aa:	80 e6       	ldi	r24, 0x60	; 96
	
	// Set cursor to position 0 on first row.
	lcd_write_command(0x02);
 1ac:	85 bb       	out	0x15, r24	; 21
 1ae:	91 df       	rcall	.-222    	; 0xd2 <switch_E>
 1b0:	82 e0       	ldi	r24, 0x02	; 2
	
	unsigned char Character6[8] = { 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04 };
	LCD_Custom_Char(1, fullheart);
 1b2:	b2 df       	rcall	.-156    	; 0x118 <lcd_write_command>
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	71 e0       	ldi	r23, 0x01	; 1
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	c9 df       	rcall	.-110    	; 0x14e <LCD_Custom_Char>
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <__vector_12>:
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	0b b6       	in	r0, 0x3b	; 59
 1cc:	0f 92       	push	r0
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
 1e6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__data_end>
 1ea:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <__data_end+0x1>
 1ee:	09 95       	icall
 1f0:	f8 94       	cli
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0b be       	out	0x3b, r0	; 59
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <main>:


// Main program
int main( void )
{
	GameLogic_Init();
 218:	57 df       	rcall	.-338    	; 0xc8 <GameLogic_Init>
 21a:	ff cf       	rjmp	.-2      	; 0x21a <main+0x2>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
