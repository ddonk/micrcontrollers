
OpdrachtenWeek5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cd4  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e8  00000000  00000000  000018fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cd  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021c  00000000  00000000  000023a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000025c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	92 d0       	rcall	.+292    	; 0x1be <main>
  9a:	c2 c0       	rjmp	.+388    	; 0x220 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <spi_masterInit>:
void displayOff() 
{
  	spi_slaveSelect(0);				// Select display chip
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	87 bb       	out	0x17, r24	; 23
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	82 e5       	ldi	r24, 0x52	; 82
  b0:	8d b9       	out	0x0d, r24	; 13
  b2:	08 95       	ret

000000b4 <spi_write>:
  b4:	8f b9       	out	0x0f, r24	; 15
  b6:	77 9b       	sbis	0x0e, 7	; 14
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <spi_write+0x2>
  ba:	08 95       	ret

000000bc <spi_slaveSelect>:
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <spi_slaveSelect+0xc>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	8a 95       	dec	r24
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <spi_slaveSelect+0x8>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	28 bb       	out	0x18, r18	; 24
  d2:	08 95       	ret

000000d4 <spi_slaveDeSelect>:
  d4:	98 b3       	in	r25, 0x18	; 24
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <spi_slaveDeSelect+0xc>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <spi_slaveDeSelect+0x8>
  e4:	29 2b       	or	r18, r25
  e6:	28 bb       	out	0x18, r18	; 24
  e8:	08 95       	ret

000000ea <displayDriverInit>:
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	e7 df       	rcall	.-50     	; 0xbc <spi_slaveSelect>
  ee:	89 e0       	ldi	r24, 0x09	; 9
  f0:	e1 df       	rcall	.-62     	; 0xb4 <spi_write>
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	df df       	rcall	.-66     	; 0xb4 <spi_write>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	ed df       	rcall	.-38     	; 0xd4 <spi_slaveDeSelect>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	df df       	rcall	.-66     	; 0xbc <spi_slaveSelect>
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	d9 df       	rcall	.-78     	; 0xb4 <spi_write>
 102:	8f e0       	ldi	r24, 0x0F	; 15
 104:	d7 df       	rcall	.-82     	; 0xb4 <spi_write>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	e5 df       	rcall	.-54     	; 0xd4 <spi_slaveDeSelect>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	d7 df       	rcall	.-82     	; 0xbc <spi_slaveSelect>
 10e:	8b e0       	ldi	r24, 0x0B	; 11
 110:	d1 df       	rcall	.-94     	; 0xb4 <spi_write>
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	cf df       	rcall	.-98     	; 0xb4 <spi_write>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	dd df       	rcall	.-70     	; 0xd4 <spi_slaveDeSelect>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	cf df       	rcall	.-98     	; 0xbc <spi_slaveSelect>
 11e:	8c e0       	ldi	r24, 0x0C	; 12
 120:	c9 df       	rcall	.-110    	; 0xb4 <spi_write>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	c7 df       	rcall	.-114    	; 0xb4 <spi_write>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	d5 cf       	rjmp	.-86     	; 0xd4 <spi_slaveDeSelect>
 12a:	08 95       	ret

0000012c <spi_writeWord>:
}

void spi_writeWord ( unsigned char adress, unsigned char data ){
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	d8 2f       	mov	r29, r24
 132:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0);				// Select display chip
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	c2 df       	rcall	.-124    	; 0xbc <spi_slaveSelect>
	spi_write(adress); 				// Selecting adress
 138:	8d 2f       	mov	r24, r29
 13a:	bc df       	rcall	.-136    	; 0xb4 <spi_write>
	spi_write(data); 				// Writing data to adress
 13c:	8c 2f       	mov	r24, r28
 13e:	ba df       	rcall	.-140    	; 0xb4 <spi_write>
	spi_slaveDeSelect(0);			// Deselect display chip
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	c8 df       	rcall	.-112    	; 0xd4 <spi_slaveDeSelect>
 144:	df 91       	pop	r29
}
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <writeLedDisplay>:
 14a:	0f 93       	push	r16

void writeLedDisplay( int value ){
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
	// Error control
	if (value > 9999 ||value < -999){
 152:	9c 01       	movw	r18, r24
 154:	29 51       	subi	r18, 0x19	; 25
 156:	3c 4f       	sbci	r19, 0xFC	; 252
 158:	27 3f       	cpi	r18, 0xF7	; 247
 15a:	3a 42       	sbci	r19, 0x2A	; 42
 15c:	58 f5       	brcc	.+86     	; 0x1b4 <writeLedDisplay+0x6a>
		return;
	}
	
	if(value < 0) {
 15e:	99 23       	and	r25, r25
 160:	24 f5       	brge	.+72     	; 0x1aa <writeLedDisplay+0x60>
		value *= -1;
 162:	91 95       	neg	r25
 164:	81 95       	neg	r24
 166:	91 09       	sbc	r25, r1
		for (int i = 1; i <= 3; i++)
 168:	c1 e0       	ldi	r28, 0x01	; 1
 16a:	d0 e0       	ldi	r29, 0x00	; 0
 16c:	0b c0       	rjmp	.+22     	; 0x184 <writeLedDisplay+0x3a>
			{
				// Writing to display
				spi_writeWord(i, (value % 10));
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	2f d0       	rcall	.+94     	; 0x1d2 <__divmodhi4>
 174:	06 2f       	mov	r16, r22
 176:	17 2f       	mov	r17, r23
 178:	68 2f       	mov	r22, r24
 17a:	8c 2f       	mov	r24, r28
 17c:	d7 df       	rcall	.-82     	; 0x12c <spi_writeWord>
						
				// Incrementing modulo
				value /= 10;
 17e:	80 2f       	mov	r24, r16
 180:	91 2f       	mov	r25, r17
		return;
	}
	
	if(value < 0) {
		value *= -1;
		for (int i = 1; i <= 3; i++)
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	c4 30       	cpi	r28, 0x04	; 4
 186:	d1 05       	cpc	r29, r1
 188:	94 f3       	brlt	.-28     	; 0x16e <writeLedDisplay+0x24>
				spi_writeWord(i, (value % 10));
						
				// Incrementing modulo
				value /= 10;
			}
		spi_writeWord(4, 'z');
 18a:	6a e7       	ldi	r22, 0x7A	; 122
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	ce df       	rcall	.-100    	; 0x12c <spi_writeWord>
 190:	11 c0       	rjmp	.+34     	; 0x1b4 <writeLedDisplay+0x6a>
	} else {
		for (int i = 1; i <= 4; i++)
		{
			// Writing to display
			spi_writeWord(i, (value % 10));
 192:	6a e0       	ldi	r22, 0x0A	; 10
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	1d d0       	rcall	.+58     	; 0x1d2 <__divmodhi4>
 198:	06 2f       	mov	r16, r22
 19a:	17 2f       	mov	r17, r23
 19c:	68 2f       	mov	r22, r24
 19e:	8c 2f       	mov	r24, r28
 1a0:	c5 df       	rcall	.-118    	; 0x12c <spi_writeWord>
 1a2:	80 2f       	mov	r24, r16
				
			// Incrementing modulo
			value /= 10;
 1a4:	91 2f       	mov	r25, r17
 1a6:	21 96       	adiw	r28, 0x01	; 1
				// Incrementing modulo
				value /= 10;
			}
		spi_writeWord(4, 'z');
	} else {
		for (int i = 1; i <= 4; i++)
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <writeLedDisplay+0x64>
 1aa:	c1 e0       	ldi	r28, 0x01	; 1
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	c5 30       	cpi	r28, 0x05	; 5
 1b0:	d1 05       	cpc	r29, r1
 1b2:	7c f3       	brlt	.-34     	; 0x192 <writeLedDisplay+0x48>
 1b4:	df 91       	pop	r29
				
			// Incrementing modulo
			value /= 10;
		}
	}	
}
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	08 95       	ret

000001be <main>:
 1be:	81 e0       	ldi	r24, 0x01	; 1

int main()
{
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 1c0:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
 1c2:	6d df       	rcall	.-294    	; 0x9e <spi_masterInit>
	displayDriverInit();            // Initialize display chip
 1c4:	92 df       	rcall	.-220    	; 0xea <displayDriverInit>
 1c6:	83 e1       	ldi	r24, 0x13	; 19
	writeLedDisplay(-237);
 1c8:	9f ef       	ldi	r25, 0xFF	; 255
 1ca:	bf df       	rcall	.-130    	; 0x14a <writeLedDisplay>
 1cc:	81 e0       	ldi	r24, 0x01	; 1

  	return (1);
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	08 95       	ret

000001d2 <__divmodhi4>:
 1d2:	97 fb       	bst	r25, 7
 1d4:	07 2e       	mov	r0, r23
 1d6:	16 f4       	brtc	.+4      	; 0x1dc <__divmodhi4+0xa>
 1d8:	00 94       	com	r0
 1da:	06 d0       	rcall	.+12     	; 0x1e8 <__divmodhi4_neg1>
 1dc:	77 fd       	sbrc	r23, 7
 1de:	08 d0       	rcall	.+16     	; 0x1f0 <__divmodhi4_neg2>
 1e0:	0b d0       	rcall	.+22     	; 0x1f8 <__udivmodhi4>
 1e2:	07 fc       	sbrc	r0, 7
 1e4:	05 d0       	rcall	.+10     	; 0x1f0 <__divmodhi4_neg2>
 1e6:	3e f4       	brtc	.+14     	; 0x1f6 <__divmodhi4_exit>

000001e8 <__divmodhi4_neg1>:
 1e8:	90 95       	com	r25
 1ea:	81 95       	neg	r24
 1ec:	9f 4f       	sbci	r25, 0xFF	; 255
 1ee:	08 95       	ret

000001f0 <__divmodhi4_neg2>:
 1f0:	70 95       	com	r23
 1f2:	61 95       	neg	r22
 1f4:	7f 4f       	sbci	r23, 0xFF	; 255

000001f6 <__divmodhi4_exit>:
 1f6:	08 95       	ret

000001f8 <__udivmodhi4>:
 1f8:	aa 1b       	sub	r26, r26
 1fa:	bb 1b       	sub	r27, r27
 1fc:	51 e1       	ldi	r21, 0x11	; 17
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <__udivmodhi4_ep>

00000200 <__udivmodhi4_loop>:
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	a6 17       	cp	r26, r22
 206:	b7 07       	cpc	r27, r23
 208:	10 f0       	brcs	.+4      	; 0x20e <__udivmodhi4_ep>
 20a:	a6 1b       	sub	r26, r22
 20c:	b7 0b       	sbc	r27, r23

0000020e <__udivmodhi4_ep>:
 20e:	88 1f       	adc	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	5a 95       	dec	r21
 214:	a9 f7       	brne	.-22     	; 0x200 <__udivmodhi4_loop>
 216:	80 95       	com	r24
 218:	90 95       	com	r25
 21a:	bc 01       	movw	r22, r24
 21c:	cd 01       	movw	r24, r26
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
